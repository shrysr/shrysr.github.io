[{"authors":null,"categories":null,"content":"This section contains my notes, tutorials and articles from courses and various topics related to programming, data science, Emacs and so on.\nUse the navigation bar on the left / right to jump to articles or sections and the search bar to find specific keywords.\n","date":1545289200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1545289200,"objectID":"4cdd37113783e47641dd300543c94e1b","permalink":"https://shrysr.github.io/docs/","publishdate":"2018-12-20T00:00:00-07:00","relpermalink":"/docs/","section":"docs","summary":"This section contains my notes, tutorials and articles from courses and various topics related to programming, data science, Emacs and so on.\nUse the navigation bar on the left / right to jump to articles or sections and the search bar to find specific keywords.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":["Emacs","Data-Science"],"content":"Matt Dancho\u0026rsquo;s course DSB-101-R is an awesome course to step into ROI driven business analytics fueled by Data Science. In this course, among many other things - he teaches methods to understand and use cheatsheets to gain rapid level-ups, especially to find information connecting various packages and functions and workflows. I have been hooked to this approach and needed a way to quickly refer to the different cheatsheets as needed.\nFavio Vazquez\u0026rsquo;s ds-cheatsheets repo, akin to the One Ring to Rule them All (with respect to Cheatsheets of course), combined with Emacs (Projectile + Helm packages) make it almost a breeze to find a specific cheatsheet quickly, by just typing in a few words.\u0026nbsp;1\nThe built-in Hydras in Scimax make it very easy to do the above with a few key presses. All I do is F12 \u0026gt;\u0026gt; p \u0026gt;\u0026gt; ww, start typing in \u0026ldquo;ds-\u0026rdquo; and choose the project and then start typing in the name of the PDF file I\u0026rsquo;m looking for. Check out the animation below.\n Rapidly switching to a cheatsheet PDF   The above concept applies to switching to any file in any git based project that is added to Projectile\u0026rsquo;s lists.\nThe next aspect to consider was switching between maximized buffer of the opened cheatsheet PDF and the current code buffer. As it goes in Emacs, \u0026ldquo;there\u0026rsquo;s probably a package for that..\u0026rdquo; ! My solution was to use one of the various frame/window configuration packages in Emacs to save the position and orientation of the buffers and rapidly switch between the maximised PDF frame and the split code and interpreter frames.\nFacilitating the above was in fact already available in Scimax, where a frame or window configuration can be saved into a register that is valid for that session. Persistent saving of window configuration across sessions (i.e Emacs restarts) is a little more complex, but it is still possible with some tweaking. Winner-mode is also an interesting option to switch rapidly between window configurations.\n To some extent, it is also possible that launchers like the Alfred app could be set or programmed to search in particular locations. This is a decent, less hacky option for Mac users.\r^   ","date":1547953320,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547953378,"objectID":"497cec360d5bd8f945e2a1734e1a243a","permalink":"https://shrysr.github.io/post/e86e171e-cc0d-4957-b587-ed2bbf36a8cf/","publishdate":"2019-01-19T20:02:00-07:00","relpermalink":"/post/e86e171e-cc0d-4957-b587-ed2bbf36a8cf/","section":"post","summary":"Matt Dancho\u0026rsquo;s course DSB-101-R is an awesome course to step into ROI driven business analytics fueled by Data Science. In this course, among many other things - he teaches methods to understand and use cheatsheets to gain rapid level-ups, especially to find information connecting various packages and functions and workflows. I have been hooked to this approach and needed a way to quickly refer to the different cheatsheets as needed.","tags":["Emacs"],"title":"Rapidly accessing cheatsheets to learn data science with Emacs","type":"post"},{"authors":null,"categories":["Productivity"],"content":"While reading the book Atomic Habits by James Clear, I was reflecting that my choice of embracing Emacs and progressively gaining mastery over it was intimately connected with the philosophy preached in the book.\nMy efforts initially started out with a craving for a system to quantify and manage my tasks, habits, notes, blog writing, job applications and projects in a custom environment, and to be able to build toolkits of code to perform repetitive tasks. As mentioned in an earlier blog post , I tried several approaches before settling on Emacs. The idea was to find or create a single system to track everything of importance in my life (with ease and efficiency). This was instead of a fragmented approach of using multiple tools and techniques, for example, Sublime Text / Atom as a text editor and Todoist as a task management tool.\nI started with a vanilla configuration of Emacs and painstakingly borrowed (and eventually) modified lisp snippets to implement desired \u0026lsquo;features\u0026rsquo; or behaviors. It was a just a couple of features every week, initially focused on Org mode\u0026rsquo;s behavior alone. That was nearly 3 years ago. As of now, I am able to manage my blog [hugo], view my email [mu4e], browse the web [w3m], seamlessly capture notes / ideas / tasks from (almost) anywhere [Org mode], chat on IRC, build multi-language code notebooks with ease [Org babel]. All the above provide me significant advantages in speed and efficiency which still have plenty of potential to improve.\nSure, I certainly appear closer to my goal today.. however, I did not know if it was a pipe dream when I started out. It was often extremely frustrating, right from memorizing the \u0026lsquo;crazy\u0026rsquo; keybindings in Emacs, to struggling with getting a lisp snippet to work as expected.\nChoosing Emacs had unexpected rewards as well. For example, the need of synchronizing my notes and Emacs configuration with multiple machines led me to Git. Magit\u0026rsquo;s easily accessible commands and relatively visual interface has been a massive help in getting things done with Git, despite not having any deep technical knowledge of how Git works.\nMy journey with Emacs is testament that an incremental, compounding improvement over time can ultimately result in significant gains. It is also important to acknowledge that I am standing on the shoulder of giants and the awesome Scimax is a cornerstone in my toolkit.\n","date":1547951580,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547951594,"objectID":"fdccb9e1e5640af8c82669cf55387060","permalink":"https://shrysr.github.io/post/32266f09-c9b9-48ff-9c48-e2348eeda33d/","publishdate":"2019-01-19T19:33:00-07:00","relpermalink":"/post/32266f09-c9b9-48ff-9c48-e2348eeda33d/","section":"post","summary":"While reading the book Atomic Habits by James Clear, I was reflecting that my choice of embracing Emacs and progressively gaining mastery over it was intimately connected with the philosophy preached in the book.\nMy efforts initially started out with a craving for a system to quantify and manage my tasks, habits, notes, blog writing, job applications and projects in a custom environment, and to be able to build toolkits of code to perform repetitive tasks.","tags":["Emacs","Org-mode"],"title":"Incremental improvements can lead to significant gains","type":"post"},{"authors":null,"categories":["Data-Science"],"content":"A slide deck from Netflix, mentions using Nteract as their programming notebook, and prompted a mini exploration.\nThis blog post by Safia Abdalla, (a maintainer/ developer of Nteract) introduces Nteract as an open source, desktop-based, interactive computing application that was designed to overcome a bunch of limitations in Jupyter Notebook\u0026rsquo;s design philosophy. One key difference (among many others) is the ability to execute code in a variety of languages within a single notebook, and it also appears that that the electron based desktop app should make it easier for beginners to start coding.\nAlong similar lines, this blog post is a nice primer to the evolution of Ipython, Jupyter Notebooks and Nteract, from the plain vanilla Python console, which was the starting point. Beyond the illuminating definition that the Jupyter notebook is an \u0026lsquo;establishment of well-defined protocols and formats\u0026rsquo;, and is not just a console or a programming notebook, the blog post provides a deeper insight into how these protocols are implemented and communicate with interpreters or Jupyter kernels.\nThis reddit discussion has a few interesting pros and cons regarding using nteract.\nWhile I can see the value of computing notebooks like Jupyter and Nteract, I do think that these do not come close to the functionality and ease that can be achieved with Org mode and Emacs, which have been in existence a lot longer. I was able to intuitively transition to using multiple language code \u0026lsquo;notebooks\u0026rsquo; using Org mode. This reddit thread and blog post elucidate the advantages of using Babel and Org mode over Jupyter notebooks.\n","date":1547951400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547951445,"objectID":"8055a28ad7391e622d83f47dfbac9ed6","permalink":"https://shrysr.github.io/post/a642fab6-6704-4e57-9f97-43e7dd8d9caa/","publishdate":"2019-01-19T19:30:00-07:00","relpermalink":"/post/a642fab6-6704-4e57-9f97-43e7dd8d9caa/","section":"post","summary":"A slide deck from Netflix, mentions using Nteract as their programming notebook, and prompted a mini exploration.\nThis blog post by Safia Abdalla, (a maintainer/ developer of Nteract) introduces Nteract as an open source, desktop-based, interactive computing application that was designed to overcome a bunch of limitations in Jupyter Notebook\u0026rsquo;s design philosophy. One key difference (among many others) is the ability to execute code in a variety of languages within a single notebook, and it also appears that that the electron based desktop app should make it easier for beginners to start coding.","tags":["datascience","Emacs"],"title":"Nteract : An interactive computing environment","type":"post"},{"authors":null,"categories":["Data-Science"],"content":"Title: Navigating Diverse Data Science Learning: Critical Reflections Towards Future Practice\nAuthor: Yehia Elkhatib\nDownload link\nThis are my notes on the above paper, which mainly deals with detailing the methods explored and implemented to impart a high quality of education in data science. The paper also provides an interesting breakup of the different roles in data science workflows.\n The importance of being able to work in a team is highlighted. Working in isolation for a data scientist almost renders the results meaningless.\n Considering the typically diverse backgrounds of DS practitioners, it is difficult to devise a curriculum that caters to everybody. This factor is certainly critical to consider before taking up any formal university courses. I would not want to spend a great deal of time and money in learning obsolete techniques or technologies.\n There are differences in learning rates based on the background, and past academic environments. In particular, most students do not seem to realize that the best learning takes place in a \u0026lsquo;social\u0026rsquo; manner. Besides addressing the above, several aspects of effective learning and aligning the curriculum and teaching methodology to the typical industrial workflows are explored in this paper.\n The literature references of past studies and research would certainly make interesting reads. However, they are more relevant to those in the teaching line. An interesting approach would be to read between the lines to extract the best practices for students to learn rapidly and effectively. However, there are many direct resources and techniques to approach the latter.\n DS Roles :- Core.\n Janitor  data cleaning, pre-processing  Scout  EDA, early insights  Analyst  identifying patterns, initial hypothesis, evidence of unforeseen narratives)  Decision Builder  automate decision making, ML, DL  Curator  storage formats across interfaces, data governance  Engineer  Manage the interface between development and production products, efficiency and reliability of data interaction.   Auxiliary roles : these roles come into the picture as the DS team grows.\n Domain specialist  data significance, sources of bias  Infrastructure manager  support to build and operate, beyond the data engineer  Communicator  Communicating explanatory and confirmatory analyses, setting up systems to interact with the audiences outside the DS team  Facilitator  A/B experiments, additional support to the communicator.    ","date":1547951400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547951485,"objectID":"423a87faca6f8f66b184e79e3cd9fe88","permalink":"https://shrysr.github.io/post/44d30b28-0de8-4211-afad-18fe22323bf3/","publishdate":"2019-01-19T19:30:00-07:00","relpermalink":"/post/44d30b28-0de8-4211-afad-18fe22323bf3/","section":"post","summary":"Title: Navigating Diverse Data Science Learning: Critical Reflections Towards Future Practice\nAuthor: Yehia Elkhatib\nDownload link\nThis are my notes on the above paper, which mainly deals with detailing the methods explored and implemented to impart a high quality of education in data science. The paper also provides an interesting breakup of the different roles in data science workflows.\n The importance of being able to work in a team is highlighted.","tags":["datascience","Paper-review"],"title":"Technical notes : Research paper on learning/teaching data science","type":"post"},{"authors":null,"categories":["Emacs"],"content":"Scimax has a convenient feature of immediately creating projects (M-x nb-new). The location of the project directory is defined by the setting (setq nb-notebook-directory \u0026quot;~/my_projects/\u0026quot;), which has to be set in your Emacs config. Once the name of the project is chosen, a Readme.org buffer is immediately opened and one can start right away. It is an awesome, friction-free method to get started with a project.\nThese projects are automatically initialised as git repositories, to which it is trivial to add a new remote using Magit. Therefore individual folders and git repos are automatically created for each project in the specified project directory. This enables the convenient possibility of keeping the data, folder structures, tasks, notes and scripts of each project separate.\nDifferent projects can be switched to using M-x nb-open and typing in a few words that denote the title of the project. Choosing a project automatically provides the option to open the Readme.org files created earlier. Therefore it would be convenient to include relevant links to different locations / scripts and etc in the Readme file.\nUsing the above technique resulted in me creating a huge number of projects over a period of time. Especially while working on multiple computers, it is worth inculcating the discipline of adding a remote on github/bitbucket and regularly pushing to the remote.\nThe advantage of using a separate repo for each project is the alignment with the space constraints imposed by the free tier repos on bitbucket or github. However, it is also useful to have the entire project folder as a git repo. This can be resolved by adding each project as a sub-module. In this way, all the projects are available with a single clone of the project foder, and then specific sub-modules or projects can be initialized as required. Having separate repos for each project also enables more streamlined collaboration or publishing of a particular project, rather than the entire project folder and allowing separate gitignore lists for each project.Using a single file for all the projects will also enable adding notes pertaining to the content of each project, which can be searched before intialising the entire project repo. Scripts for initializing and commit can also be included in this file for convenience.\nOnce the above is done, the org-projectile package can be leveraged to plan the tasks and manage the notes for each project. It is possible to have all the tasks for a project within a separate file within each project, or specify a single file as the task management for all the projects. This file is then appended to the org-agenda files for tasks to show up in the agenda. As mentioned in the Readme of the org-projectile package the settings would look like the following (for a single file pertaining to all the projects):\n;; Setting up org-projectile (require 'org-projectile) (setq org-projectile-projects-file \u0026quot;~/my_org/project-tasks.org\u0026quot;) (push (org-projectile-project-todo-entry) org-capture-templates) (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files))) (global-set-key (kbd \u0026quot;C-c n p\u0026quot;) 'org-projectile-project-todo-completing-read)  The above snippet adds a TODO capture template activated by the letter \u0026lsquo;p\u0026rsquo;, and also adds the project-tasks file to the agenda files. Inside a project, it is then possible to capture using C-cc p and add a task which will create a top level heading linked to the project, and the task or note as a sub-heading.\n org-projectile task capture   ","date":1547951220,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547951279,"objectID":"0bb846017bd18605fbd51deb896bb826","permalink":"https://shrysr.github.io/post/8f702ce2-8bb7-40a3-b44b-a47222c02909/","publishdate":"2019-01-19T19:27:00-07:00","relpermalink":"/post/8f702ce2-8bb7-40a3-b44b-a47222c02909/","section":"post","summary":"Scimax has a convenient feature of immediately creating projects (M-x nb-new). The location of the project directory is defined by the setting (setq nb-notebook-directory \u0026quot;~/my_projects/\u0026quot;), which has to be set in your Emacs config. Once the name of the project is chosen, a Readme.org buffer is immediately opened and one can start right away. It is an awesome, friction-free method to get started with a project.\nThese projects are automatically initialised as git repositories, to which it is trivial to add a new remote using Magit.","tags":["Emacs","Org-mode","productivity"],"title":"Juggling multiple projects and leveraging org-projectile","type":"post"},{"authors":null,"categories":["Emacs","Datascience"],"content":" This post provides a simple example demonstrating how a shell script can be called with appropriate variables from any Org file in Emacs. The script essentially converts a Jupyter notebook to Org source, and Babel is leveraged to call the script with appropriate variables from any Org file. This reddit thread and blog post elucidate the advantages of using Babel and Org mode over Jupyter notebooks.\nDirectly editing code in a Jupyter notebook in a browser is not an attractive long term option and is inconvenient even in the short term. My preference is to have it all in Emacs, leveraging a versatile Org file where it is easy to encapsulate code in notebooks or projects within Org-headings. Thus, projects are integrated with the in-built task management and calendar of Org mode.\nHowever, it may be a frequent necessity to access an external Jupyter notebook for which there is no Org source.\nOne solution is to start up a Jupyter server locally, open the file and then File \u0026gt;\u0026gt; save as a markdown file, which can be converted to an Org file using pandoc. Remarkably, the output code seems similar to the code blocks used in the R-markdown notebooks, rather than pure markdown markup. Therefore this markdown export should work fine in RStudio as well. However, unless the Jupyter server is always running on your machine, this is a relatively slow, multi-step process.\nThis SO discussion provided my answer, which is a 2 step script via the versatile pandoc. A workable solution, as a test conversion revealed. The headings and subheadings and code are converted into Org markup along with Org source blocks.\njupyter nbconvert notebook.ipynb --to markdown pandoc notebook.md -o notebook.org  The next consideration was to have the above script or recipe handy for converting any Jupyter notebook to an Org file quickly.1 For the script to be referenced and called from any other location, the source block needs to be defined with a name and the necessary arguments, and also added into the org-babel library.\nIn this example the path to the Jupyter notebook, markdown file and resulting org file are specified as variables or arguments. Note that the absolute path to any file is required. Save the following in an Org file, named appropriately, like my-recipes.org\n#+NAME: jupyter-to-org-current #+HEADER: :var path_ipynb=\u0026quot;/Users/xxx/Jupyter_notebook\u0026quot; #+HEADER: :var path_md = \u0026quot;Jupyter_notebook-markdown\u0026quot; #+HEADER: :var path_org = \u0026quot;Jupyter-notebook-org\u0026quot; #+BEGIN_SRC sh :results verbatim cwd=$(pwd) jupyter nbconvert --to markdown $path_ipynb.ipynb --output $cwd/$path_md.md pandoc $cwd/$path_md.md -o $cwd/$path_org.org cp $path_ipynb.ipynb $cwd ls  The path_ipynb variable can be changed as required to point to the Jupyter notebook.2\nAll such blocks above can be stored in Org files and added to the Library of Babel (LOB) by including the following in the Emacs init configuration.\n(org-babel-lob-ingest \u0026quot;/Users/shreyas/my_projects/my-recipes.org\u0026quot;)  The named shell script source block can now be called from any Org file, with specified arguments and have the notebook. The script is called using the #+CALL function and using the name and arguments of the source block above.\n#+CALL: jupyter-to-org-current(path_md=\u0026quot;Jup-to-markdown\u0026quot;, path_org=\u0026quot;Markdown-to-org\u0026quot;)  Therefore, the snippet above will convert a Jupyter notebook to a markdown file named Jup-to-markdown and then an Org file called Markdown-to-org. If an argument is not specified, the default value of the paths specified in the original source block will be used.\nOf course, the #+CALL function used above is also too lengthy to remember and reproduce without headaches. This is also bound to happen as the number of such named code snippets increase. One solution (though not ideal) is to store the #+CALL as a snippet using M-x yas-new-snippet, and load it when needed using the excellent ivy-yasnippet package (see MELPA), with minimal exertions.\nFurther possibilities It would be nice to improve the options available for modifications on the fly. Python may be an \u0026lsquo;easier\u0026rsquo; option to write up for such activities rather than a shell script. For example, a script with the working directory being an additional /optional argument could be considered.\nAnother desirable factor in the resulting Org file would be iPython blocks in place of python. As a temporary solution, the python blocks could be converted to ipython blocks via a search and replace throughout the document. A lisp macro / source block could run after the above source block to facilitate the search and replace.\u0026nbsp;3\n In Scimax - it is possible to quickly start a new project using M-x nb-new, which creates a sub-folder in the specified projects folder and creates and opens a readme.org file for the project.\r^ The option C-u-cl is a messy way to quickly get the full file name path, the resulting path will need to be modified slightly.\r^ It is worth noting that a bunch of additional HTML blocks and hyperlinks are inserted via the above export procedure. It should be possible to add some hooks to clean up the org file after the export from pandoc.\r^   ","date":1547949960,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547950780,"objectID":"0a062dfc6660944d9e2a163216e27989","permalink":"https://shrysr.github.io/post/0b63f316-6f6b-4ec2-84a4-5ff287ecf7a7/","publishdate":"2019-01-19T19:06:00-07:00","relpermalink":"/post/0b63f316-6f6b-4ec2-84a4-5ff287ecf7a7/","section":"post","summary":"This post provides a simple example demonstrating how a shell script can be called with appropriate variables from any Org file in Emacs. The script essentially converts a Jupyter notebook to Org source, and Babel is leveraged to call the script with appropriate variables from any Org file. This reddit thread and blog post elucidate the advantages of using Babel and Org mode over Jupyter notebooks.\nDirectly editing code in a Jupyter notebook in a browser is not an attractive long term option and is inconvenient even in the short term.","tags":["Emacs","Jupyter","Python","Org-mode"],"title":"Jupyter notebooks to Org source + Tower of Babel","type":"post"},{"authors":null,"categories":["General"],"content":" Whiplash: Wikipedia\nWhiplash is a fascinating movie on many levels regarding a topic that interests me deeply\u0026hellip; How to progressively perform, and strive to become the very best in a chosen field. Personally, I found each step of the movie riveting and would recommend it to anybody who would find the above question even mildly interesting. The movie\u0026rsquo;s climax was immensely interesting, inspiring and supported by great acting. At any rate, the movie induced a blog post !\nThe story revolves around the mind and life of a student who wants to be among the greats in his field, and the way he deals with an abrasive, abusive and unorthodox teacher whose intentions are to bring out the best in a student. No movie is perfect - while some points in Whiplash do appear extreme and therefore relatively unrealistic - the overriding message and theme conveyed certainly rings out clearly, in an engaging plot.\nI could relate to the following pointers from the movie:\nLeverage stress to achieve new levels of insight and performance The belief of the teacher, that the best performance or attributes hidden inside a person can come out only via repeated, unexpected and stressful prodding. I\u0026rsquo;m not sure if this works as shown in the movie, but I have found unexpected insights at times of extreme stress, that have were taken forward to habits that changed my life.\nWeathering criticism The mental conditioning required to weather and beat intense, sharp, depressing criticism along with verbal and physical abuse from a mentor or teacher and use the same as a motive force for self-improvement and eventually superlative performance. Though there are examples of extreme abrasiveness in leaders like Steve Jobs - such an approach would not be tolerated by most people today.\n I know other stories of people working under such mentors, striving to learn and gain their approval and eventually winning the same. These efforts paid off by resulting in skills, thinking patterns and a superior mental conditioning. Finding such a mentor at the formative stage is probably the best thing to happen to anybody.\n An effective strategy to find mentors is to shadow people on Linked in and learn from their profiles and activity. Some of them may be willing to connect and invest time in mentoring.\n Another possibility to find like minded people and mentors would be to join the communities of on-line courses, like Datacamp and Dataquest, who have lively channels in Slack for paid members.\n  Getting back up after a fall Everybody breaks. Just as the promising student in Whiplash breaks. But the champions among us rally, to stage a comeback and performance that make history.\nRegularly surpassing the level of deliberate knowledge of your own performance, and thus improvement by exactly being able to measure your performance and pinpoint mistakes. This point is portrayed in a very interesting manner in Whiplash, where the teacher expects the student to know exactly what mistake is being made.\nBe Great, not Good Rejecting the \u0026lsquo;Good\u0026rsquo; or \u0026lsquo;Good enough\u0026rsquo; feedback from anybody. The goal is to be Great, not good. The goal should be to strive to set the precedent and not just follow a beaten track. The pinpoint focus should be on progressive improvement to become the best, and that entails never being satisfied and to be ruthless in rooting out flaws.\nAchieving Balance : mind + body + surroundings Great performance is about that perfect balance between the body, mind and environment to leverage the best result possible. I view the scene where the student survives a car crash, just to reach a performance and then not being able to perform, as a good example of overreaching, without strengthening the core, and thus inviting instability.\nGo off the beaten track and Lose yourself It was the ending of Whiplash that truly drove me to comprehend the points so far. It is twisted, unexpected and led me to truly enjoy the movie and appreciate that: despite the above points being reasonably discernible - the human mind and nature is exceedingly complex. Stability and reasoning are not the only keystones to the foundation of greatness. There has to be a healthy mix of some form of abnormal obsession thrown in, to make a stellar performance what it is. However, can this be practically repeated on a regular basis?\nLearning velocity and Flow There are several bodies of research work available today that can be studied to get closer to consciously stimulating a great performance. One such example is:\n Unlocking the Talent Code With Dan Coyle on the Unmistakable Creatives podcast provides an insight in line with the points seen above, into what constitute outliers and performers. The interesting concept of \u0026lsquo;Learning velocity\u0026rsquo; is explained by Dan with a lucid example. It is surmised that progress and maximum learning to become better occurs at the boundary line dividing what we know at the moment, and the unknown skills that beckon.  That point sems to be an amalgamation of several factors, that are typically present when someone is in \u0026lsquo;flow\u0026rsquo;. Perhaps this flow can be described as a heightened sense of what is, and what should be and the energy to strive and achieve what should be.. It certainly does feel logical to think that we become better by pushing that boundary.\n","date":1547951820,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547951877,"objectID":"b9f96ac1c15730097b7736a9cb740fee","permalink":"https://shrysr.github.io/post/5fc69e19-e330-4dd9-9317-7280a9c93966/","publishdate":"2019-01-19T19:37:00-07:00","relpermalink":"/post/5fc69e19-e330-4dd9-9317-7280a9c93966/","section":"post","summary":"Whiplash: Wikipedia\nWhiplash is a fascinating movie on many levels regarding a topic that interests me deeply\u0026hellip; How to progressively perform, and strive to become the very best in a chosen field. Personally, I found each step of the movie riveting and would recommend it to anybody who would find the above question even mildly interesting. The movie\u0026rsquo;s climax was immensely interesting, inspiring and supported by great acting. At any rate, the movie induced a blog post !","tags":["Movie-notes","excellence"],"title":"Notes from the movie Whiplash","type":"post"},{"authors":null,"categories":["Emacs"],"content":"Before my foray into Emacs, I purchased applications like IAWriter (classic)1, Marked2, Texts (cross platform Mac/Windows), and have also tried almost all the recommended apps for longer form writing. I am a fan of zen writing apps. In particular the font and environment provided by IAWriter are conducive to focused writing. There also exist apps like Hemingway that also help check the quality of your writing.\nZen writing apps are called so because they have a unique combination of fonts, background color, including line spacing and overall text-width - all of which enable a streamlined and focused flow of words onto the screen. Any customisation required towards this end is possible in Emacs.\nThe Texts app has some nifty features (besides being cross platform), but the font and appearance is not as beautiful as IAWriter. Both IAWriter (classic) and Texts have minimal settings for further customisation. See the comparison below:\n Emacs (writeroom-mode + Iosevka font) || Texts (Sepia theme)    Emacs (writeroom-mode, Iosevka font) || IAWriter(Classic)   While everybody\u0026rsquo;s style and approach vary, there are many authors who swear by archaic text editors and tools that enable distraction free writing. One example is Tony Ballantyne\u0026rsquo;s post on writing tools, and several more examples are available in this blog post.\nThe next best thing to a clear retina display on a MacBook Pro, is a beautiful font face to take you through the day, enhancing the viewing pleasure and thus the motivation to work longer.\nIn Emacs, writeroom-mode and Emacs can be customised to mimic IAWriter. In this regard, the font Iosevka, is a great font to try. This old Emacs reddit has many more suggestions. One post described Iosevka as \u0026ldquo;it doesn\u0026rsquo;t look like much, but after a few hours it will be difficult to use any other font.\u0026rdquo; This is exactly what happened to me.\nThere\u0026rsquo;s still a lot of tweaking to be done with writeroom-mode, but this is certainly a workable result. My nascent configuration for writeroom-mode in emacs is as follows (munged off the internet!). It\u0026rsquo;s remarkable how much was achieved with a few lines of code!\n(with-eval-after-load 'writeroom-mode (define-key writeroom-mode-map (kbd \u0026quot;C-s-,\u0026quot;) #'writeroom-decrease-width) (define-key writeroom-mode-map (kbd \u0026quot;C-s-.\u0026quot;) #'writeroom-increase-width) (define-key writeroom-mode-map (kbd \u0026quot;C-s-=\u0026quot;) #'writeroom-adjust-width)) (advice-add 'text-scale-adjust :after #'visual-fill-column-adjust)   The latest version of IAWriter has a truck load of features and advantages over over the Classic version. I did consider purchasing it, but Emacs won the day. Nevertheless, as a plain vanilla writing app - IAWriter offers much right out of the box.\r^   ","date":1547950920,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547950935,"objectID":"4609ad29370e465e8bfca11bdb12ee34","permalink":"https://shrysr.github.io/post/951004ce-add0-4e7e-b6e2-2932e0dee429/","publishdate":"2019-01-19T19:22:00-07:00","relpermalink":"/post/951004ce-add0-4e7e-b6e2-2932e0dee429/","section":"post","summary":"Before my foray into Emacs, I purchased applications like IAWriter (classic)1, Marked2, Texts (cross platform Mac/Windows), and have also tried almost all the recommended apps for longer form writing. I am a fan of zen writing apps. In particular the font and environment provided by IAWriter are conducive to focused writing. There also exist apps like Hemingway that also help check the quality of your writing.\nZen writing apps are called so because they have a unique combination of fonts, background color, including line spacing and overall text-width - all of which enable a streamlined and focused flow of words onto the screen.","tags":["Emacs","writing","font","Linux","productivity"],"title":"Iosevka - an awesome font for Emacs","type":"post"},{"authors":null,"categories":["Emacs","Productivity"],"content":"I\u0026rsquo;m an admirer of Howard Abrams, especially because his posts and videos show the awesome power of doing things in Emacs, and the importance of writing clean and logical code. Watching his videos and reading his posts make me feel like I was born yesterday and I am just getting started. But more importantly, they also fire up my imagination regarding the possibilities out there and the potential to create glorious workflows.\nHoward\u0026rsquo;s tutorial on Literate Programming, combined with his Literate Devops with Emacs video are among the best ways to get started with understanding the power of using Org Mode and Org-Babel to create complex, inter-connected, multi-language programs / documents / research that are of course well documented (this being one basic tenet of literate programming). Essentially, Org Mode and Org-Babel enable a high quality programming environment in a single Org mode buffer or document. The said environment is significantly more feature rich compared to Jupyter notebooks, especially being supported by it\u0026rsquo;s foundation in Emacs.\nThough I\u0026rsquo;ve been using Org files for a while now for all my programming explorations, I\u0026rsquo;ve been bothered about my sub-par workflows. I could not easily reference other code blocks and snippets and recipes for a new document or project. It was inefficient and time consuming to locate the necessary snippet and re-write or re-paste the code in the new source blocks. I was not making much progress plodding through the vast documentation of org-babel.\nTherefore, I was thrilled to discover the Library of Babel through Howard\u0026rsquo;s tutorial, which can be used to add files to a global library that is accessible from anywhere! Did I mention that it involves hitting barely 3 keys, and any number of arguments can be passed to these source blocks? I\u0026rsquo;m not sure such a feature is available with any other IDE.\nIn addition, the above tutorial clearly elucidates how different languages can be combined together, and the video elucidates typical Devops procedures, which are easily taken care of with appropriate arguments and headers to the source code blocks. For example, all the source code blocks could be tangled into appropriately named and located script files using a single argument. These tutorials tied up bits and pieces of info in my head from various sources and was invaluable in enhancing my understanding of using Emacs and Org-Babel\nThe Library of Babel can be made persistent across sessions by loading a specified org-file from which the named source code blocks are automatically read in. It is surprising that the internet does not seem to contain more references and examples using the Library of Babel. Perhaps there are some caveats that I am yet to encounter. One question that arises is whether the Library of Babel is automatically updated when the source code block is updated.\n","date":1547951100,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547951157,"objectID":"24dc122c5526a5e7387e25c70c388d73","permalink":"https://shrysr.github.io/post/6953c104-a8b3-4779-aad3-c33032beb111/","publishdate":"2019-01-19T19:25:00-07:00","relpermalink":"/post/6953c104-a8b3-4779-aad3-c33032beb111/","section":"post","summary":"I\u0026rsquo;m an admirer of Howard Abrams, especially because his posts and videos show the awesome power of doing things in Emacs, and the importance of writing clean and logical code. Watching his videos and reading his posts make me feel like I was born yesterday and I am just getting started. But more importantly, they also fire up my imagination regarding the possibilities out there and the potential to create glorious workflows.","tags":["Emacs"],"title":"Literate Programming - Emacs, Howard Abrams and Library of Babel","type":"post"},{"authors":null,"categories":null,"content":" In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 \u0026hellip;\nTip 2 \u0026hellip;\n","date":1536472800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536472800,"objectID":"d13d4bf91505a59c1ad9d441d935b6bb","permalink":"https://shrysr.github.io/docs/course-edx-r-fundamentals/","publishdate":"2018-09-09T00:00:00-06:00","relpermalink":"/docs/course-edx-r-fundamentals/","section":"docs","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 \u0026hellip;\nTip 2 \u0026hellip;","tags":null,"title":"Example Page","type":"docs"},{"authors":null,"categories":null,"content":" \nIntroduction This project contains notes and recipes in R, especially pertaining to data science. The purpose is to have a handy reference to refresh concepts / syntax via examples and also share the functions that I develop to streamline workflow.\n\nReferences  Datacamp courses  Quantitative Analyst career track in R Tidyverse courses  Edx : HarvardX: PH125.1x Data Science: R Basics  \nNotes \nRprofile and user files  ?Startup in the R interpreter for information on how the R environment is started up. Note that the Rprofile.site and other user files are not setup by default. These have to be created by the user. The default CRAN repo can be set in the Rprofile.site file  To find the installation location of R, use the R.home() function with component specified as shown below. More information.\nR.home(component='home') R.home(component='etc')  \nImporting data into R packages : readr, haven,\n\nIndexing in R Indexing in R starts with 1, unlike most other languages.\n\nWorkspace The workspace contains all the variables that were used in a particular session.\nls() can be used to list the variables in the workspace.\n\nMatrix \nDefining a matrix A matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns.\nA matrix is called two-dimensional, since there are rows and columns. It is constructed using the matrix() function.\nArguments:\n Elements of the matrix byrow to have the matrix filled by rows. By default, this is set to false. nrow for number of rows\nmatrix(1:10,byrow = TRUE, nrow = 4)\n  Demonstrating the difference of not using byrow\nmatrix(1:10, ncol = 2, nrow = 5) matrix(1:10, ncol = 2, nrow= 5 , byrow = TRUE)  \nNaming the rows and the columns rownames() and colnames() can be used.\n#Defining the row data row_1 \u0026lt;- c(250, 300) row_2 \u0026lt;- c(55, 350) # Defining the matrix my_matrix \u0026lt;- matrix(c(row_1, row_2), byrow = TRUE, nrow = 2) # Defining row and column names my_rownames \u0026lt;- c(\u0026quot;test_row1\u0026quot;, \u0026quot;test_row2\u0026quot;) my_colnames \u0026lt;- c(\u0026quot;test_col1\u0026quot;, \u0026quot;test_col2\u0026quot;) # Attaching row and column names to the created matrix rownames(my_matrix) \u0026lt;- my_rownames colnames(my_matrix) \u0026lt;- my_colnames my_matrix  \nSums - =rowSums() and colSums(), adding rows - rbind() and columns - cbind() my_rowsums \u0026lt;- rowSums(my_matrix) # Adding a new column of the calculated sums my_new_matrix \u0026lt;- cbind(my_matrix, my_rowsums) my_new_matrix # Adding a new row and calculating the sums again row_3 \u0026lt;- c(200, 100 ) my_newest_matrix \u0026lt;- rbind(my_matrix, row_3) my_new_rowsums \u0026lt;- rowSums(my_newest_matrix) my_newest_matrix \u0026lt;- cbind(my_newest_matrix, my_new_rowsums) my_newest_matrix  \ncorrelation : cor() Correlation is a measure of association between different quantities.\n+1 : perfectly positive linear relationship -1 : perfectly negative linear relationship 0 : No linear relationship\nA matrix can be passed into cor() to get a correlation matrix. For example, this is most useful with 3 or more stocks.\n# Defining imaginary stock prices apple \u0026lt;- c(22.45, 33, 41, 21, 25.67) micr \u0026lt;- c(12.4, 56.4, 32.4, 21, 24.45) huawei \u0026lt;- c(23.5, 44, 12.25, 39, 56) # Creating a matrix, calculations and plotting the correlation. app_micr_cor \u0026lt;- cor(cbind(apple, micr)) app_micr_huaw_cor \u0026lt;- cor(cbind(apple, micr, huawei)) app_micr_huaw_cor plot(app_micr_huaw_cor) plot(app_micr_cor)   TODO Find out more information about manual correlation calculations  \nDataframe Used to store a table of data. Multiple data types can be stored in a single dataframe. A matrix can store only a single data type.\n Defined using data.frame() colnames() : to rename the columns in a dataframe subset() : to extract a particular subset of a dataframe. Compared to calling a column name, using this is more informative or robust.  first argument: name of the dataframe 2nd argument: the condition or the column name within the dataframe  A column can be deleted by assigning it NULL There is no need to use a c() to add multiple objects to the dataframe. Directly add the vectors like data.frame(variable 1, variable 2) and so on.  \nTODO Dataframe peek function in R head() tail() str() desc() glimpse()  \nFactors  factor() can be used to store the unique levels of a vector.  The vector to be converted to a factor is passed in as an argument.  levels() can be used to access the unique levels of a factor object.  Rename the levels by just passing a vector levels(factor_object)  cut() can be used to break up a vector into specified buckets or based on specified intervals.  argument \u0026lsquo;breaks\u0026rsquo; to specify the demarcations in which the vector will be cut up. R treats the left side of the bucket as exclusive and the right side of the bucket as inclusive. This is represented by \u0026lsquo;(\u0026rsquo; and \u0026lsquo;]\u0026rsquo;.  summary() can be used to provide the counts of items under each factor. This is best used on a factor object. Ordering and sub-setting vectors\n ordered() : R has an inbuilt system to order the object alphabetically. passing the levels argument to factor() along with the argument ordered = T, with levels containing the desired order (written as least to greatest) will enable a custom ordering of factors. drop = T argument to drop a level completely. Subsetting with [-1] only drops the object at the first position, but retains the level. R\u0026rsquo;s default behavior when creating data frames is to convert all characters into factors  ranking \u0026lt;- c(1:20) head(ranking) buckets \u0026lt;- c(0, 5, 10, 15, 20) ranking_grouped \u0026lt;- cut(ranking, breaks = buckets) head(ranking_grouped) ranking_grouped\n  \nLists  Use the list() with the chosen data structures as the arguments. The list can contain multiple types of objects or data types. Subsetting: using a [] returns a subset of the list and using [[]] returns the data inside the list being referenced.  A subset can be used on a dateframe to extract specific data. Syntax example: subset(dataframe, column1 \u0026gt; condition1 \u0026amp; column2 \u0026lt; condition2)  The elements of the list can be named, by adding the to the arguments while defining the list. adding names to an existing list can be done using the names(list name) function. With a named list, the $ operator can also be used to access specific list items. items can be added to the list using c(), which would look like c(list_name, new_item_name = item_name) Removing elements from a list can be done by assigning the item the NULL value. Other list creating functions  split() : split(list-name, item-name). This will create 2 lists separated by the item name specified. unsplit() : to unsplit a list. unsplit(split-list-name, grouping) Similar syntax to the above. split-apply-combine class of problems. Example is where a particular factor is to be applied for a portion of the data and another factor for the other portion, and after which the 2 portions are recombined. For eg: offering customer A a discount of 10% and customer B a discount of 20% via splitting and them recombining the split parts into a common dataframe.  attributes(): meta data of an object. For example the dim or dimension is an attribute of a matrix, and the names, row.names and class are common attributes of a dataframe.  use attr() to access a specific attribute. This takes 2 arguments at least. attr(matrix_name, which = \u0026quot;desired attribute\u0026quot;)    \nDates  The ISO 8601 format is the way R accepts and stores dates. This is basically in the yyyy-mm-dd format. Internally stored by R as the number of days since January 1, 1970. Alternative format year/month/day Dates are internally stored as numerics with some special characteristics over typical numerics. Current time from the system : Sys.time() Current date from the system : Sys.Date() Character vectors are most common source of creating dates. class of dates  could be a date class catering to calendar dates. could also be a POSIX - Portable Operating System Interface class, which is commonly used in the finance world  POSIXlt and POSIXct allow holding a date. POSIXct is a way to represent datetime objects like \u0026ldquo;2015-01-22 08:39:40 EST\u0026rdquo;. This method is important for storing intraday financial data.  Using the simplest date class is generally the best strategy. There are other classes of date as well.  as.date() can be used to convert the object to a date class.  the format argument can facilitate conversion from different formats to the necessary ISO format.  Extractor functions  weekdays() can be used to extract the day of the week from a date object. format() can be used to convert existing date objects to different date formats. months() for extracting the months of the date objects quarters() to extract the quarter in which the date object falls  Dates can be subtracted, just like numerics.  The object must be in the Date format. Direct subtraction provides the difference in days. difftime(date1, date2, units = \u0026quot;secs\u0026quot;) can be used to find the difference in time, with the argument units specifying the output type  Argument units should be one of “auto”, “secs”, “mins”, “hours”, “days”, “weeks” The 2nd argument date2, will be subtracted from the first argument date1.   Formats of representing alternate date formats\n Y: 4-digit year (1982) y: 2-digit year (82) m: 2-digit month (01) d: 2-digit day of the month (13) A: weekday (Wednesday) a: abbreviated weekday (Wed) B: month (January) b: abbreviated month (Jan)  Using the system date and time todays_date \u0026lt;- Sys.Date() todays_time \u0026lt;- Sys.time() todays_date todays_time\nClass of defined date and time class(todays_date) class(todays_time)\nReading alternate formats of dates test_date_alt_format \u0026lt;- \u0026ldquo;23/02/2019\u0026rdquo; as.Date(test_date_alt_format, format = \u0026ldquo;%d/%m/%Y\u0026rdquo;)\ntest2_date_alt_format \u0026lt;- \u0026ldquo;Sep 25,2020\u0026rdquo; as.Date(test2_date_alt_format, format = \u0026ldquo;%B %d,%Y\u0026rdquo;)\nExtractor functions weekdays(as.Date(test2_date_alt_format, format = \u0026ldquo;%B %d,%Y\u0026rdquo;))\nSubtracting dates date1 \u0026lt;- as.Date(\u0026ldquo;2030-02-20\u0026rdquo;) date2 \u0026lt;- as.Date(\u0026ldquo;2040-03-30\u0026rdquo;) date2 - date1 difftime(date2, date1, units = \u0026lsquo;secs\u0026rsquo;) difftime(date1, date2, units = \u0026lsquo;mins\u0026rsquo;)\nSetting the weekdays as names() dates3 \u0026lt;- c(date1, date2, as.Date(c(\u0026ldquo;2025-03-23\u0026rdquo;, \u0026ldquo;2015-04-25\u0026rdquo;))) names(dates3) \u0026lt;- weekdays(dates3) dates3\nSyntax example of using Not (relational operators) a \u0026lt;- c(100,140,2,240, 300)\nchecking where a is Not greater than 200 !(a \u0026gt; 200)\nTesting runif()  \nTODO Analysing distributions  runif() r-unif, used to generate a random number between specified min, max.  \nglimpse() - part of dplyr To view all the columns.\n\nSummary statistics  skimr package : also lists missing and unique values skim(object)  \nChanging the class of an object The class of an object can be changed by simply assigning the desired type of class. The class() is used.\n# Example changing the clas of a date object to a numeric dateX \u0026lt;- as.Date(\u0026quot;2030-02-20\u0026quot;) class(dateX) class(dateX) \u0026lt;- \u0026quot;Numeric\u0026quot; class(dateX)   =class(obj) \u0026lt;- \u0026ldquo;Date\u0026rdquo;  \nRelational operators  TRUE coerces to 1 and FALSE to 0 In case of strings and using the greater / lesser than operator, the first letter is considered, in the alphabetical order\nT == 1 T == 0 F == 1 F == 0 \u0026ldquo;useR\u0026rdquo; == \u0026ldquo;user\u0026rdquo; \u0026ldquo;user\u0026rdquo; == \u0026ldquo;User\u0026rdquo; \u0026ldquo;useR\u0026rdquo; \u0026gt; \u0026ldquo;user\u0026rdquo; \u0026ldquo;user\u0026rdquo; \u0026gt; \u0026ldquo;User\u0026rdquo;\n  \nConditional Statements  ifelse(): conditional function in a single line that can work on entire vectors, compared to the typical if() operator.  ifelse() strips the date of its attribute before returning it and therefore the date often becomes a numeric. -   \nFinance related \nPresent value General formula : present_value \u0026lt;- cash_flow * (1 + interest / 100) ^ -year\n\nBond Credit ratings are a good example of factors.  Bond credit ratings are common in the fixed income side of the finance world as a simple measure of how \u0026ldquo;risky\u0026rdquo; a certain bond might be. riskiness can be defined as the probability of default, which means an inability to pay back your debts. Example of Standard and Poor\u0026rsquo;s credit rating AAA, AA, A, BBB, BB, B, CCC, CC, C, D. (Left to right: Least risky to most risky)  \nDates in Finance could be at the rate of years or in micro seconds. \nThere will be a likely need to convert multiple dates from the character to string format. \nPlayground linkedin \u0026lt;- c(16, 9, 13, 5, 2, 17, 14) last \u0026lt;- tail(linkedin, 3) print(last) head \u0026lt;- head(linkedin, 3) print(head) x \u0026lt;- 5 y \u0026lt;- 7 !(!(x \u0026lt; 4) \u0026amp; !!!(y \u0026gt; 12))  ","date":1536472800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536472800,"objectID":"36f1754b9624e766da5457135e424dbc","permalink":"https://shrysr.github.io/docs/r-recipes-notes/","publishdate":"2018-09-09T00:00:00-06:00","relpermalink":"/docs/r-recipes-notes/","section":"docs","summary":"Introduction This project contains notes and recipes in R, especially pertaining to data science. The purpose is to have a handy reference to refresh concepts / syntax via examples and also share the functions that I develop to streamline workflow.\n\nReferences  Datacamp courses  Quantitative Analyst career track in R Tidyverse courses  Edx : HarvardX: PH125.1x Data Science: R Basics  \nNotes \nRprofile and user files  ?","tags":null,"title":"R - Notes | Examples | Recipes","type":"docs"},{"authors":null,"categories":null,"content":" I like to have any reading material and my notes side by side1. This is easily done with Emacs by splitting the buffer vertically (C-x 3)2\nFor example: Once a link has been opened via w3m, I hit org-capture (C-c) with a preset template that grabs the URL to the article along with the created date in the properties, with the cursor in position ready to take notes.\n(setq org-capture-templates '((\u0026quot;l\u0026quot; \u0026quot;Link + notes\u0026quot; entry (file+headline \u0026quot;~/my_org/link_database.org\u0026quot; \u0026quot;.UL Unfiled Links\u0026quot;) \u0026quot;** %? %a \u0026quot;)))  The snippet above is activated by the command \u0026lsquo;l\u0026rsquo; and is listed with the title Link + notes in the agenda. It captures the link of the file being viewed as the heading and allows further notes to be inserted below. This is stored into the file link_database and under the specified heading .UL Unfiled Links.\nIt is also possible to capture a highlighted chunk of text to be added under the heading mentioned above. That would look something like:\n(setq org-capture-templates '((\u0026quot;e\u0026quot; \u0026quot;Snippet + Notes\u0026quot; entry ;; 'w' for 'org-protocol' (file+headline \u0026quot;~/my_org/link_database.org\u0026quot; \u0026quot;.UL Unfiled Links\u0026quot;) \u0026quot;*** %a, %T\\n %:initial\u0026quot;)))  Now I have the capture buffer and the viewing content side by side, by calling C-c l. I can browse through the article use the mark-paragraph function (conveniently set to M-h) can be used to select and copy (M-w) entire paragraphs or alternately use C-spc to select lines of interest from the article them to the kill ring. The figure below depicts how it looks for me:\n Emacs content capture and buffer split   It is now possible to continue highlighting interesting lines / paragraphs and copy them, which adds them to the kill-ring. Once the article is done with, I switch over to the capture buffer and hit M-x browse-kill-ring, which brings up a pop-up buffer with all the items in the kill-ring3. Once called, I can hit n to move to the next item, and hit \u0026lsquo;i\u0026rsquo; to insert the current item at the cursor location. It is also possible to append / prepend/ edit the item before yanking. All the available shortcuts can be found using \u0026lsquo;?\u0026rsquo;, while in the browse-kill-ring buffer.\nThe above methodology curiously enables me to ensure capturing atleast some details of interest from an article / source, and also serve as a quick revision of the read content before filing it away.\nOne issue with the above workflow is that while reading multiple articles, there is a chance of mixing up the content being captured from different articles. This could be solved by using \u0026lsquo;x\u0026rsquo; in order to pop items out of the kill ring in the selection process above. However, it seems excessive to clear the entire kill ring for each article read. On the other hand, it could promote a focused workflow.\nAdditional possibilities:\n To view pdf files side by side and capture notes is via the Interleave package. The org-web-clipper concept outlined here is also very convenient to rapidly capture entire webpages being browsed in w3m.  Further reading:\n Howard Abrams has some great tips on customising the org-capture mechanism, Bernt Hansen\u0026rsquo;s comprehensive documentation.  Footnotes 1 Sometimes, this procedure has to be set specifically. Some good discussions on SO : link1, link2. However, at times horizontal splitting is useful. Therefore, I would rather not set a 0 width-threshold enabling only vertical splitting.\n(setq split-width-threshold 75) (setq split-height-threshold nil)  2 C-x essentially means Control + x. M-x or Meta-x is Alt + x\n3 The browse-kill-ring package can be installed via MELPA. (M-x install package)\n","date":1532822400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532822400,"objectID":"98b5e4f4b4998b7115b9f77793c9df2b","permalink":"https://shrysr.github.io/post/2d1b3227-28de-4b30-93c8-ad5cbe276e44/","publishdate":"2018-07-29T00:00:00Z","relpermalink":"/post/2d1b3227-28de-4b30-93c8-ad5cbe276e44/","section":"post","summary":"I like to have any reading material and my notes side by side1. This is easily done with Emacs by splitting the buffer vertically (C-x 3)2\nFor example: Once a link has been opened via w3m, I hit org-capture (C-c) with a preset template that grabs the URL to the article along with the created date in the properties, with the cursor in position ready to take notes.\n(setq org-capture-templates '((\u0026quot;l\u0026quot; \u0026quot;Link + notes\u0026quot; entry (file+headline \u0026quot;~/my_org/link_database.","tags":["Emacs","productivity"],"title":"Emacs notes: Select paragraph and browse-kill-ring for effective content capture","type":"post"},{"authors":null,"categories":null,"content":"It\u0026rsquo;s a well known trick that installing a SSD in place of the conventional Hard disk can breathe new life into very old machines. My mid 2010 Macbook Pro is one such example, being over 8 years old.\nIn particular, within Emacs - mu4e responds much more quickly and there is significantly less lag in searching / accessing emails and HTML rendering.\nThe other advantage of using a Mac over Linux is that installation and setup instructions are more often available out the box for the Mac OS (though this is changing). I have access to dedicated apps including Evernote, Dash, Spotify, Whatsap, Slack etc on my Mac. This is in addition to several other high quality apps on the App store.\nI do love using Arch Linux and Antergos and the packing management and rolling OS upgrades are totally cool. However, a little bit of elegance in the user interface and hardware (being available out of the box) does ease up the mind and progress. It takes quite a bit of effort to achieve that unless you are at the level of purely using Emacs as window manager.\nOn the Mac, it is easy to move around virtual desktops and use the magic track pad to rapidly switch between applications as well. I\u0026rsquo;m sure many of these \u0026lsquo;gimmicks\u0026rsquo; may be setup with diligence and due time on Linux through solutions with varying levels of quality.\nHowever, as of today : it\u0026rsquo;s likely I would have struggled with some aspects on Linux that are readily available on other systems. Evernote is an example. After hours of searching for an alternate (and acceptable) solution for software packages that are not yet ported to Linux, I would quite possibly end up making a compromise. Typically, the compromises would mean using Electron or Web based versions of apps, which are often not as powerful as the desktop app, not to mention inconvenient. A prime example would be Evernote, on Arch Linux. Some other examples are apps like Word, Pages, Outlook and Excel and so on, which are more critical.\nUltimately, my preference would be to use a Mac as my daily driver and play around with Linux on a back up computer. In any case, multiple Linux distros can be run on Virtual Box within the Mac.\n","date":1531180800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531180800,"objectID":"fd316138721b75ebc19db9ed43b7e613","permalink":"https://shrysr.github.io/post/01252410-853f-4570-858f-f3d609f5def5/","publishdate":"2018-07-10T00:00:00Z","relpermalink":"/post/01252410-853f-4570-858f-f3d609f5def5/","section":"post","summary":"It\u0026rsquo;s a well known trick that installing a SSD in place of the conventional Hard disk can breathe new life into very old machines. My mid 2010 Macbook Pro is one such example, being over 8 years old.\nIn particular, within Emacs - mu4e responds much more quickly and there is significantly less lag in searching / accessing emails and HTML rendering.\nThe other advantage of using a Mac over Linux is that installation and setup instructions are more often available out the box for the Mac OS (though this is changing).","tags":["Emacs","productivity","Mac","Linux"],"title":"An SSD can breathe life into old computers","type":"post"},{"authors":null,"categories":null,"content":" I\u0026rsquo;ve used Evernote since 2014, with over 3k notes of all kinds stored in it. Though I did try to capture everything of interest - the procedure was never fast or streamlined enough for me. The Evernote app runs ridiculously slower on older phones. In particular, being used to the speed of Emacs and Org mode - I was mostly displeased with the Evernote Mac / Windows apps as well. I ended up using the drafts app for writing on iOS devices.\nHowever, using Evernote was still worth due to the availability of an excellent catch-all bucket for multiple kinds of information, that can be searched on demand. I could literally whip up important receipts or scanned copies of a document and it felt wonderful to have that kind of control over your information. This foray was also fueled by the deficiencies of Emacs in mobile apps and the ability to store and refer to rich content and several file types.\nSwitching to DEVONthink Pro (DTP) I\u0026rsquo;ve recently converted to DEVONthink Pro (DTP). Though DTP is Mac / iOS only, I would personally prefer DTP over Evernote. Some advantages of DTP:\n blazing fast application response + search on both iOS and Mac. leverages AI to provide interesting connections between notes and ideas. Users have leveraged these connections to help generate new ideas from unforeseen connections. There\u0026rsquo;s more information here.  so far, my experience is that the notes have to be in a particular format,I.e one article or principal idea per note to enable a sensible matching with other relevant articles. There are several incorrect connections also made.  Better control over content organisation.  Project and folder creation, including separate databases for different kinds of work.  One time payment for a major version of the software, along with discounted upgrades. Ability to index local folders. using multiple \u0026lsquo;databases\u0026rsquo; customised to any workflow, along with the provision of password protection and syncing to multiple sources. ability to confidently store private information based on the encryption and custom syncing options available. Ability to store web archives of Linked in posts (or any content). This was not always possible with Evernote. The iOS share option of clipping to the DEVONthink to go app as a web archive works rather well most of the time. The Evernote plug-in for Chrome/ Firefox works relatively slower. connection with DEVONAgent Pro (a fascinating tool dedicated to customised and deep web search. More on this on another blog post) Deploy scripts on databases / notes and thus allowing custom workflows with particular note categories. DTP can import all your Evernote notes and tags as they are. This worked for me in a single attempt.  It\u0026rsquo;s actually hard to quantify the benefits of using DTP. There are a myriad of features within, including the ability to index locations and script automated workflows.\nFor most of the part, I found the speed and response of Evernote to be frustrating. It hindered a streamlined workflow. There are also additional irritations with respect to the .enex format and being able to encrypt information.\nNo doubt, the ubiquity of Evernote in almost all the platforms (except Linux1) works in its favor. However, the search response with DTP is incredibly rapid and the note viewing experience of DTP is extremely smooth. This is on an ancient mid 2010 macbook pro!\nIt\u0026rsquo;s also worth noting that unlike Evernote - I was actually intrigued enough to correspond with the technical support team of DTP to understand features like indexing a folder, and their responses have been prompt and helpful.\nThe best place to find up to date information is on the DEVONtechnologies forum. Even a deep search on the internet does not lead to many articles about the DEVONthink technologies products.\nSome caveats of DTP  DTP does offer all the flexibility above. However the quality of the Evernote webclipper\u0026rsquo;s output is better in several cases. The uncluttered text grab is not automated well enough. I\u0026rsquo;m yet to discover the best pattern. Several apps offer Evernote integration as a premium feature. Evernote offers a more \u0026lsquo;polished\u0026rsquo; and simpler interface and is mainstream and available on multiple platforms. The note taking editors and capture mechanism is more user friendly.  DEVONagent Pro (DAP) DAP is an intriguing bit of software that facilitates deep searches of the web and developing automated workflows including report development. Their algorithm filters searches from any number of databases / engines / websites to provide the best matches.\nOne could use this to monitor the website of a competitor for news announcements. Or crawl Hackernews for the keyword Datascience. It appears to be a tool that can provide exactly the information that we seek by processing the information out there in the web.\nThis includes generation of mind-map esque graphs connecting keywords in all the search results. I\u0026rsquo;m yet to explore more, but it is very interesting so far, especially to gain an overview of the subject.\nSome Conclusions Exploring DTP in conjunction with DEVONagent Pro is absolutely a worthwhile exercise for those relying a lot on information from the internet for their jobs and work, and those working in an apple eco-system. It has a steep(er) learning curve, but will transform your information management. DAP is also a worthy option to explore to deep search the web on focused topics.\nYes, it is mac only software. I have not been able to find any equivalent apps on windows. Another reason to stick to the Apple-verse.\nThe system is addictive and once a good workflow has been built up, it would be difficult to use anything else.\nArchiving interesting Linked in posts: One of the most killer features of using the DEVON 2 GO app is the ability to capture Linked in posts as web archives. Though not optimal, in terms of the format - it is still extremely useful to rapidly build up a reference database of web resources.\nFootnotes 1 Nixnote is one solution. I\u0026rsquo;ve seen it in action and it is useful, and probably even closer to DEVONthink. However, I could never get it working in Arch Linux reliably.\n","date":1531180800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531180800,"objectID":"12fba69aa9b6ae945723d2f4de10e064","permalink":"https://shrysr.github.io/post/ec354a8e-a276-4c89-8560-ce82b1693744/","publishdate":"2018-07-10T00:00:00Z","relpermalink":"/post/ec354a8e-a276-4c89-8560-ce82b1693744/","section":"post","summary":"I\u0026rsquo;ve used Evernote since 2014, with over 3k notes of all kinds stored in it. Though I did try to capture everything of interest - the procedure was never fast or streamlined enough for me. The Evernote app runs ridiculously slower on older phones. In particular, being used to the speed of Emacs and Org mode - I was mostly displeased with the Evernote Mac / Windows apps as well.","tags":["Evernote","note-taking","productivity"],"title":"Switching from Evernote to DEVONtechnologies products","type":"post"},{"authors":null,"categories":null,"content":" Why use RSS? Off late, I had been relying more on email based content consumption. The phenomenally fast search and filtering capabilities that can be leveraged with mu4e make this easy.\nHowever, even with all these filters, it is quite difficult to keep on top of news from different sources. At times it is inconvenient to mix important emails and correspondence with newsletters and the like, which arrive by the dozen(s) everyday.\nThere\u0026rsquo;s also a nagging feeling that relevant and \u0026lsquo;up to date\u0026rsquo; information is better searched through Google, with a fresh search each time. However, this approach invites distractions.\nThe above made me realise that a dedicated RSS reader could inspire focused reading and aid in retention of information, and could be a better option than flooding my inbox.\nAn all-in-one solution for reading RSS feeds with a capable in-built browser to view images/webpages/videos would be excellent, along with the ability to sync with multiple services and facilitate capturing notes.\nExploration: Within Emacs - Elfeed (along with Elfeed-goodies) is a good option to read feeds and is strongly integrated with Emacs and org-mode. A single keypress can be programmed to store a link as a note. Unfortunately, (perhaps due to my age old machine) activating elfeed makes Emacs lag to the extent of being useless. An alternative was necessary for me.\nSide note: As I set up all the feeds on Planet Emacsen, I felt a profound happiness in being able to selectively glance at and process a lot of information quickly and was also able to implement a few configuration tricks found through the feeds. On the contrary, with email - I\u0026rsquo;ve felt somewhat overwhelmed. This prompted me to explore further.\nThough it does not seem to be a mainstream recommendation on reviews like the sweet setup : Vienna is a reliable solution (open source!) to consider using to browse RSS feeds on the Mac OS. This comes with a caveat - some tinkering is required to get it to sync with a service.\nVienna has inbuilt share options to share via Buffer or Twitter. Side note: I would recommend using Buffer to manage posts on multiple social media sites in a seamless manner. Buffer\u0026rsquo;s free tier should be sufficient for moderate, personal purposes. I use it to post on Twitter and Linked in simultaneously.\nHarvesting information The next consideration was harvesting information of interest from the RSS feeds. If not Emacs, the information has to go to DEVONThink Pro (DTP), which has a handy pull out drawer into which content can be dragged. I was able to just drag and drop the article or text selection into the DTP drawer. This appears as a URL / bookmark in DTP, and can be converted to a formatted note or web archive subsequently. A script could probably accomplish this automatically. That\u0026rsquo;s for a future project.\n Screenshot - Vienna + DTP drawer   Granted, an application external to Emacs (especially without a customisable keyboard driven flow) is not the desirable way to do things. Most websites usually have an RSS feed or email subscription possibility.\nOpting for Feedly as a susbcription service and RSS app In the next step, Vienna had to be abandoned as it felt more sensible to opt for a Feedly subscription (in order to get going quickly with syncing across devices). The Feedly app turned out to run surprisingly well on my ancient iPad and I can still drag and drop entire articles into DTP which come out to be formatted RTFD files which could be read and highlighted in leisure. While it may be nice to opt for a standalone app in the Mac for RSS feeds, the Feedly app satisfies my needs and is also available cross-platform. Note: I use the excellent Unread app to read RSS on my newer iPhone.\nBesides the numerous sync options, Feedly provides other interesting features in their pro subscription, like setting up Google keyword searching and organising multiple feeds into \u0026lsquo;boards\u0026rsquo;. This will certainly help in enabling some level of filtering. The method of organising sources and opml imports in the mac app is a little clunky and not that intuitive, but it is usable.\nHow to cover them all? With numerous sources available on most topics - a technique to read is of even more importance. Besides leveraging custom boards, it seems the best way to consume content is to rapidly sweep through the titles and the short descriptions, and in parallel skim through articles of interest. If the article (even slightly) feels worth recording and reading in detail, I select the entire article and drag it into DTP via the drawer for a future session.\nI try to deploy DTP as my primary reading app, because of the ability to highlight lines (which are generally available across devices). Besides aiding in skimming the article in the future, it helps me know I\u0026rsquo;ve actually read the article. This is in addition to the core ability to use DTP\u0026rsquo;s AI algorithms in searching through my notes and forming connections between ideas. I also use smart groups that show me the articles captured in the last 1 week, 2 weeks, 3 weeks, which helps me re-visit them in a structured method. The latter works rather well as a memory aid.\n Article captured from Feedly into DTP   Future plans? It would be ideal to setup my own server which will process the RSS feeds. Perhaps a Raspberry Pi or something else could be employed. This would be a cost efficient approach for the long term. The DEVONAgent Pro app could be leveraged for deep searches. Web scraping could be performed regularly from a set of links for deeper insight.\n","date":1531008000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531008000,"objectID":"21d339b95df19c96baf992571086b7e1","permalink":"https://shrysr.github.io/post/c641a230-37c9-46aa-84eb-e78cc00d0c7e/","publishdate":"2018-07-08T00:00:00Z","relpermalink":"/post/c641a230-37c9-46aa-84eb-e78cc00d0c7e/","section":"post","summary":"Why use RSS? Off late, I had been relying more on email based content consumption. The phenomenally fast search and filtering capabilities that can be leveraged with mu4e make this easy.\nHowever, even with all these filters, it is quite difficult to keep on top of news from different sources. At times it is inconvenient to mix important emails and correspondence with newsletters and the like, which arrive by the dozen(s) everyday.","tags":["reading","productivity","Emacs","Mac"],"title":"Back to RSS","type":"post"},{"authors":null,"categories":null,"content":"Links to certificates of courses completed on Dataquest\n Data Analyst Path in R\n Git \u0026amp; Version control\n SQL Fundamentals\n  ","date":1529020800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1529020800,"objectID":"0bd20db75065382052597e837c59721a","permalink":"https://shrysr.github.io/project/courses-dataquest/course-dataquest-datascience/","publishdate":"2018-06-15T00:00:00Z","relpermalink":"/project/courses-dataquest/course-dataquest-datascience/","section":"project","summary":"Course competition certificates from Dataquest.","tags":["python","R","Data Science","code","Course","SQL","Certificate","git"],"title":"Courses @ Dataquest","type":"project"},{"authors":null,"categories":null,"content":" Discovered the glorious awesome lists today on Github. They are available through a simple search on github, and contain curated lists of resources of all kinds on a multitude of topics.\nAs one might expect, there is a lot of common ground between these lists, including topics and links.\nHow could one search for a keyword through all these repositories? I have always wanted search for particular keywords or code snippets in my Emacs configuration files, or in other files in a particular location. This is especially to verify if a bit of code or note is already available, in another location. Something that looks like this ;):\n Searching for \u0026lsquo;datascience\u0026rsquo; with emacs-helm-ag through a bunch of awesome-lists and other local repositories.   An answer had been available in Howard\u0026rsquo;s cool blog post on why one should learn Emacs - in a footnote (!), in which he\u0026rsquo;s mentioned ack and ag (the silver searcher). 1. It is even possible to edit in line with each search.\nThe silver searcher github page provides clear examples of how it\u0026rsquo;s significantly faster than ack (and similar). Further exploration led me to the emacs-helm-ag package, which is a helm interface to the silver searcher. Implementing emacs-helm-ag was as simple as adding it to my list of packages, and adding a basic setup to my helm configuration.2\nSweet !!\n Notice the search across multiple files. So I\u0026rsquo;ve called require org capture perhaps more times than necessary.   Footnotes 1 This is my first animated gif in a blog post! It was tricky! I used the free GIPHY capture app on the Mac store.\n2 As of now, I add packages to Scimax using this bit of code that I\u0026rsquo;ve obviously borrowed from the internet, and this case - I\u0026rsquo;m afraid I did not note the source.\n;; Setting up use packages ;; list the packages you want (setq package-list '(diminish org-journal google-this ztree org-gcal w3m org-trello org-web-tools ox-hugo auto-indent-mode ob-sql-mode dash org-super-agenda ox-hugo workgroups2 switch-window ess ess-R-data-view interleave deft org-bookmark-heading writeroom-mode evil evil-leader polymode helm-ag)) ;;fetch the list of packages available (unless package-archive-contents (package-refresh-contents)) ;; install the missing packages (dolist (package package-list) (unless (package-installed-p package) (package-install package))) ;; Remember to start helm-ag. As per the Silver searcher github site, the helm-follow-mode-persistent has to be set before calling helm-ag. (custom-set-variables '(helm-follow-mode-persistent t)) (require 'helm-ag)  ","date":1524700800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1524700800,"objectID":"e8f6607cd25cb050be8d81b299f356d9","permalink":"https://shrysr.github.io/post/03133c10-709e-4d06-9f3d-c00ffeae64a7/","publishdate":"2018-04-26T00:00:00Z","relpermalink":"/post/03133c10-709e-4d06-9f3d-c00ffeae64a7/","section":"post","summary":"Discovered the glorious awesome lists today on Github. They are available through a simple search on github, and contain curated lists of resources of all kinds on a multitude of topics.\nAs one might expect, there is a lot of common ground between these lists, including topics and links.\nHow could one search for a keyword through all these repositories? I have always wanted search for particular keywords or code snippets in my Emacs configuration files, or in other files in a particular location.","tags":["emacs","search","productivity","code"],"title":"Searching the awesome-lists on Github","type":"post"},{"authors":null,"categories":null,"content":" The course covered an introduction to using R to extract, manipulate and thus analyse data. It basically lays the foundations to using R in data science.\nVerified EdX Certificate of Achievement  Course exercises are linked with a Datacamp course.  Data Science R basics   Course Notes and code This Jupyter notebook contains code written while following along with the course, which was expanded to illustrate concepts and notes.\n","date":1522195200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1522195200,"objectID":"537971b4baef6deb642d5020b7287ea8","permalink":"https://shrysr.github.io/project/course-edx-harvard-r/","publishdate":"2018-03-28T00:00:00Z","relpermalink":"/project/course-edx-harvard-r/","section":"project","summary":"The course covered an introduction to using `R` to extract, manipulate and thus analyse data. It basically lays the foundations to using `R` in data science.","tags":["R","Code","Course","Certificate"],"title":"EdX HarvardX PH125.1x: Data Science: R Basics","type":"project"},{"authors":null,"categories":null,"content":" Introduction To integrate tasks, reminders, notes, coding workflow into a single framework is no easy challenge. Org mode and Emacs help you do just that.\nAfter trying out several tools, IMHO : Todoist offers the best bang for your buck, especially with it\u0026rsquo;s natural language parsing ability, smooth and reliable sync as well as its multi-platform availability. Many describe Omnifocus to be the king of task management tools, with dedicated apps for different purposes and probably well integrated.\nMy journey veered away from Omnifocus since it is limited to the Apple platform and this is obviously a serious handicap for people (like me) who are often forced to use multiple operating systems and devices distributed between personal and work environments.\nI\u0026rsquo;d religiously managed my tasks on Todoist for over a year via the Chrome extensions/add-ins, the stand alone apps on Windows and the Mac, and on Android as well as iOS.\nHowever, there was something missing in terms of being able to truly capture it all. This led me to Emacs. My search is summarised in this article.\nNeeds versus the software development The real problem surfaced when my needs evolved at a pace and specificity that a general software\u0026rsquo;s development could not cater to. The problem is characterized by an endless wait for seemingly simple features that could make a phenomenal difference to personal workflow and productivity. This feature may range from a small tweak or bugfix to a rewiring of the basic behavior of the program itself.\nAdditionally, the proprietary format of tasks/notes and entries in Todoist or even Evernote is not a comforting aspect. On the other hand, using a simple text file with lists of work or notes is too simplistic to address a complex problem.\nHowever, the issue could be resolved when the simple and ubiquitous Text file is parsed by a system like Org mode with in built and novel routines to filter and present the data in the text file in a very useful. Ultimately the key factor is that the workflow and output can be completely customised as required.\nThings I\u0026rsquo;d like from a task management tool:  Rapid and seamless Task/Note taking ability - could be generic, or specific to a particular project/task. Quick capturing of links and snippets from websites and emails Consistent experience across multiple platforms and very fast sync. Ability to manage personal or work related projects A date management system with atleast reasonably good understanding of natural language Refiling tasks/notes very easily across main tasks or categories or projects Customisable Views of the task summary along with the deadlines Task and Note search and filtering at every level possible Ability to easily export notes to multiple formats and write in some form of markup language so as to take care of formatting on the go. Preferably an all-in-one tool for managing notes, all kinds of writing, research, tasks, recurring reminders, maintaining an activity log/journal, project summaries .. etc. Includes \u0026lsquo;clocking\u0026rsquo; abilities for tasks. Fast keyboard based shortcuts and \u0026lsquo;bookmarks\u0026rsquo; to do all that is required. Recording tasks or notes from the phone, while on the go. Should have the lightest footprint possible in terms of time spent on the tool, as well as system resources with no compromise in benefits derived.  Can it be achieved? Short answer: Yes. Through Emacs.\nSure, several of the above points can be done in Todoist and other tools, in one way or via combining different services.\nHowever, a holistic consideration of the above points indicate a system that is a cross between Todoist and Evernote, capable of being utilised for a multitude of purposes : a customised GTD workflow plus an organiser for notes or writings. Point no 9, could serve to be a concise but incomplete statement of Orgmode\u0026rsquo;s capabilities, and is a stark reminder of Todoist\u0026rsquo;s specific expertise in only task management. Additionally, the above points can be done in orgmode, very, very quickly. Evernote has a great system, but is not as fast, because it indexes a huge variety of content. 1\nExamples of workflows Lets say that while typing up a project summary, I remember an additional task for another project or perhaps need to note down a snippet of generic information. To compensate for the lack of a photographic memory without breaking my on-going workflow - I need to be able to store the task/note/idea in a place that I can easily look up for further processing.\nSuch an activity is not at all streamlined with Todoist, and definitely not so with Evernote. With Org mode its just a C-c c, or Control + c and hit c again. Optionally, a C-cw for refiling the note on the spot if desired. When I hit refile - I can search through my org headings or projects and place the newly captured item exactly where it should be.\nOnce accustomed to the speed of recording stuff with Org-capture, along with the myriad possibilities of auto-save, backups, moving the cursor to the last location you were at, switching to another document/heading at lightning speed and etc - it will be hard to find another system that is truly competitive.\nProject management via Emacs using the excellent projectile package can enable you to find information at a speed that is very pleasing. I have often needed to deal with several customers of different kinds, thoroughly understand their requirements, resolve technical and commercial ambiguities and be able to refer to earlier jobs where something was agreed upon. I\u0026rsquo;ve often worked in projects with a bewildering number of aspects to take care of, along with sporadic infusions of information which could be clarifications or even new information altogether.\nIncluded in project / productivity /relationship management are several subsets of activities like Minutes of Meetings (MOM\u0026rsquo;s), summaries of travel/visits to the customer, telephonic discussions, indications of future projects as well as generic or specific problems.\nUsing Org mode, it is possible create customised workflows and templates to manage all the above aspects, more than any other note taking system, including only handwritten notes. An excellent, comprehensive overview can be found in Bert Hansen\u0026rsquo;s article.\nEverybody\u0026rsquo;s needs are unique Eventually, I guess we all come to realise the fact that each human being is truly unique. Each one of us have our own ways of thinking, being and approaching problems.\nWhile Todoist worked very well for me - I was still bothered by being constrained by it\u0026rsquo;s proprietary format and the lack of a lifetime membership with a one time payment. Money spent should give me a tool that brings supreme value and satisfaction with it. It was also tiresome to take detailed notes on tasks and rely on a separate Simplenote/Evernote system via Sublime Text for this purpose. You may have a different viewpoint. You may want a great GUI design and app that works well on your phone in addition to other environments. 2\nOrgmode is more aligned to people who prefer to get most of their work done on their computers, who are or atleast don\u0026rsquo;t mind being keyboard shortcut freaks and those who would like to take the effort to learn a souped up text editor like Emacs that can evolve to cover a lot of needs efficiently. It\u0026rsquo;s not going to work well for people who need a reminder to pop up on their phones, with a fancy GUI and those who expect a software to work extremely well right out of the box. However, this is Org mode and Emacs\u0026#x2026;. there are ways to sync your iOS / outlook calendar with orgmode\u0026rsquo;s calendar, or with wunderlist or Toodledo. Anything is possible, but it just won\u0026rsquo;t be via some classy GUI..\nConcluding points While it may seem daunting at first - the feeling of being able to search through existing notes to know whether you have met this particular thought/aspect before, can be extremely valuable and very satisfying. There are people like Sacha Chua and Bert Hansen, who\u0026rsquo;ve built complex, efficient, and beautiful workflows through which a great deal of achievement has been made possible using the resulting streamlined tool. As Cal Newport often reiterates in his blog and exploration on productivity - it is important to be able to accurately quantify the time being spent on different things. The awesome-emacs list on github offers several worthy resources, along with the excellent Planet Emacsen.\nThe organiser tool by itself should have the lightest possible footprint in terms of the time taken to enter in stuff. Certainly - most people spend a lifetime in customising emacs and that may seem contrary to the previous point. However, it is possible to quickly reach a certain point that results in a marked improvement in productivity and workflow. Beyond this, leisure time can always be spent in fine-tuning the basic setup and understanding the code better.\nThe customisation options with Emacs and Org mode are literally endless and constrained only by programming skills, or Googling skills to find the code snippet that can get your work done, not to mention social skills in getting help via online communities. This is actually a lot easier than it sounds. While a bunch of people would call this a weakness, there are a large number of people who see the value in a customised tool which will evolve to facilitate a very fast and efficient workflow.\nDeliberate practise towards improvement is certainly boosted when one is able to work consistently in a environment customised to needs and workflows. Using Org mode and Emacs is a firm step in this direction.\nFootnotes 1 While Org mode is optimised for text, it is possible to attach any kind of file to a \u0026lsquo;heading\u0026rsquo;, and use interleave and other techniques to browse and annotate PDF\u0026rsquo;s. The possibilities are too numerous to be covered in a blog post or a single google search.\n2 On iOS - I\u0026rsquo;ve found Drafts is a great app for writing fast and appending the notes to an org file, which can be refiled later, using emacs. One problem I\u0026rsquo;m yet to resolve is that appending to an org file in dropbox, requires a network/internet connection. There should be a way to deal with situations without handy internet available.\n","date":1491177600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1491177600,"objectID":"293b8d3f1f538b83ae47bfa2c9adfbc3","permalink":"https://shrysr.github.io/post/2b0b2c79-3f6e-4079-a07d-9e382fda8954/","publishdate":"2017-04-03T00:00:00Z","relpermalink":"/post/2b0b2c79-3f6e-4079-a07d-9e382fda8954/","section":"post","summary":"Introduction To integrate tasks, reminders, notes, coding workflow into a single framework is no easy challenge. Org mode and Emacs help you do just that.\nAfter trying out several tools, IMHO : Todoist offers the best bang for your buck, especially with it\u0026rsquo;s natural language parsing ability, smooth and reliable sync as well as its multi-platform availability. Many describe Omnifocus to be the king of task management tools, with dedicated apps for different purposes and probably well integrated.","tags":["Org mode","Emacs","writing","productivity"],"title":"Getting productive - an exploration into holistic task management","type":"post"},{"authors":null,"categories":null,"content":"Links to certificates of courses completed on Datacamp\n Intro to SQL\n Data Science R basics.\n Completed as a part of EdX HarvardX PH125.1x: Data Science: R Basics  Introduction to Tidyverse\n Introduction to R for Finance\n  ","date":1487116800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1487116800,"objectID":"1888ca1999f4b7bbf3f58f7563e3c324","permalink":"https://shrysr.github.io/project/courses-datacamp/courses-datacamp/","publishdate":"2017-02-15T00:00:00Z","relpermalink":"/project/courses-datacamp/courses-datacamp/","section":"project","summary":"Data Science related courses completed on Datacamp.","tags":["python","R","Data Science","code","Course","Certificate","git","finance"],"title":"Courses @ Datacamp","type":"project"},{"authors":null,"categories":null,"content":"Embed your slides or video here using shortcodes. Further details can easily be added using Markdown and $\\rm \\LaTeX$ math code.\n","date":1483254000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483254000,"objectID":"cd6d9d084287506b4668ad90c6aff50a","permalink":"https://shrysr.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00-07:00","relpermalink":"/talk/example-talk/","section":"talk","summary":"Embed your slides or video here using shortcodes. Further details can easily be added using Markdown and $\\rm \\LaTeX$ math code.","tags":null,"title":"Example Talk","type":"talk"},{"authors":null,"categories":null,"content":" It is possible (and prevalent) to create templates to post process CFD Simulation results in ANSYS CFD Post using session (.cse) files. Using Shell scripts, it would then be simple to apply these session files on multiple result files and extract the output dictated by the session file.\nThis python script that enables the user to set the location of: - the session file (.cse) - the CFD result files (.res) - create a BAT script with sequential lines, each calling ANSYS CFD Post with the necessary arguments - run the session script on all the result files available in a particular location. - gracefully exit, removing all the temporary script files.\nCode On Github\nHow it helped  While these operations could be done directly in python, it is easier and simpler to control ANSYS CFD post using a BASH script. Therefore the python program creates a BASH script.   Python script \u0026quot;\u0026quot;\u0026quot; Created on Thu Dec 18 16:10:49 2014 @author: shrysr \u0026quot;\u0026quot;\u0026quot; # Description: # This is a simple program that is designed to apply am ANSYS CFD post macro on all the results available at a particular location, one after the other. There are 3 strings required to be set as input by the user. # 1. The location of the ANSYS CFD Post executable # 2. THe path to the macro file (.cst/.cse) # 3. The folder location where the result files are located. # Note : the \u0026gt;quit command can be written in the post macro to optionally execute the post macro on one file after the other automatically. Otherwise CFD Post has to be quit manually by the user after the macro is applied on each file. ###---------- USER INPUT -------------### # Setting the paths to various locations. CFDPost_loc=r'\u0026quot;C:\\Program Files\\ANSYS Inc\\v145\\CFD-Post\\bin\\cfdpost\u0026quot;' #Setting the path to the ANSYS CFD Post executable. Post_template_loc=r'\u0026quot;C:\\\\example_location\\post_macro.cse\u0026quot;' #Path to the .cse/.cst post macro to be applied. Res_loc=r\u0026quot;Q:\\Queueing_sys\\Completed\\Archive\\Shreyas\u0026quot; #Folder location of the result file path ###---x---x--x-- USER INPUT -x---x---x---x--### #importing required libraries import os import glob import subprocess as sp #Creating BAT script for extracting the list of res files in the current working folder - sorted Date wise def res_list_syn(Res_loc): \u0026quot;\u0026quot;\u0026quot; Grabs all the CFX res files in the chosen location (Res_loc) and stores them in the variable (array) A1. The variableA1 is passed onto another function which uses the array contents Example: \u0026gt;\u0026gt;\u0026gt; Res_loc=r\u0026quot;Q:\\Queueing_sys\\Completed\\Archive\u0026quot; \u0026gt;\u0026gt;\u0026gt; post_syn(Res_loc) \u0026gt;\u0026gt;\u0026gt; return variableA1 \u0026quot;\u0026quot;\u0026quot; print \u0026quot;\u0026quot; print \u0026quot;Grabbing all res files from chosen location.\u0026quot; os.chdir(Res_loc) reslist=glob.glob('*.res') print \u0026quot;Passing the list of res files to the Post_Syn function\u0026quot; post_syn(reslist) def post_syn(variable): print \u0026quot; \u0026quot; print \u0026quot;Listing grabbed res files and creating Post BAT file in chosen location...\u0026quot; print \u0026quot;\u0026quot; post_batname='Post_bat_runner.BAT' post_bat_loc=os.path.join(Res_loc,post_batname) PC=open(post_bat_loc,'w') PC.write('cd /d \u0026quot;%s\u0026quot;\\n'%Res_loc) i=0 while i\u0026lt;len(variable): print \u0026quot;%d --%s\u0026quot; %(i,variable[i]) PC.write('%s -s %s %s\\n' %(CFDPost_loc,Post_template_loc,variable[i])) i+=1 PC.close() print \u0026quot;Running post macro on all the listed Res Files....\u0026quot; print '' sp.call(post_bat_loc) t.sleep(5) print 'Killing temp files...' t.sleep(5) File_killer(Res_loc,'BAT') #Function for deleting temp Files. Prevents Clutter. def File_killer(folder_location, type_of_extension): for variable in glob.glob('%s/*.%s'%(folder_location,type_of_extension)): if os.path.isfile(variable): os.remove(variable) #Starting Program. Geting current working directory print \u0026quot;Hello. Program Launch...--\u0026gt;\u0026quot; print \u0026quot;\u0026quot; print \u0026quot;The chosen result location to be scanned is: %s\u0026quot;%Res_loc print \u0026quot;\u0026quot; print \u0026quot;Starting scan\u0026quot; res_list_syn(Res_loc)  ","date":1369612800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1369612800,"objectID":"ab64ac7d1072546b098562ba5c309e1d","permalink":"https://shrysr.github.io/project/cfd-post-processing-python/","publishdate":"2013-05-27T00:00:00Z","relpermalink":"/project/cfd-post-processing-python/","section":"project","summary":"`python` script to help automate post processing of simulations, by applying an extraction macro on multiple result files.","tags":["python","code","automation","CFD"],"title":"CFD Post Processing automation","type":"project"},{"authors":null,"categories":null,"content":" View : CFD-Online Wiki page.\nMotivation During my initial foray into open source CFD and especially getting started with Linux - there was a lot of information that I had to collate from different sources in order to figure out each step. In addition, there were perspectives on performance that could be gained only through experience. Therefore, I plugged back the knowledge gained to the CFD-Online wiki with the idea that it would help any newbie get started a little quicker.\nIn the last few years, the number of courses and the material available on-line on CFD, Linux and applying Numerical techniques has increased substantially. This is somewhat supported by the increasing trend of page views shown on the CFD-Online Wiki. Nevertheless, this document still serves as a useful overview and getting started guide.\nThe documentation explores the idea of Open Source software, and the basic techniques to get started with the exploration. Eg: the different options of running Linux on your current machine as well as the pros and cons of each approach, and the software options available, as well as links to useful and high quality information and tutorials.\n","date":1369612800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1369612800,"objectID":"cf8665ab01bfa0ff109cdd1e591b9126","permalink":"https://shrysr.github.io/project/cfd-on-line-wiki/cfd-online-wiki/","publishdate":"2013-05-27T00:00:00Z","relpermalink":"/project/cfd-on-line-wiki/cfd-online-wiki/","section":"project","summary":"Documentation (based on actual exploration) to the popular CFD-Online wiki related to getting started with Open Source CFD.","tags":["documentation","CFD","open-source","Linux"],"title":"Contributions to the CFD-Online Wiki","type":"project"},{"authors":null,"categories":null,"content":"This project utilized MATLAB, Solidworks to research and design a human finger and calculate the range of it\u0026rsquo;s motion. SIMULINK is also utilised to design a PID controller for the wrist.\n","date":1369612800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1369612800,"objectID":"efee832f269676d0c1e59ab8b0460559","permalink":"https://shrysr.github.io/project/kinematic-finger-design/kinematic-design-finger/","publishdate":"2013-05-27T00:00:00Z","relpermalink":"/project/kinematic-finger-design/kinematic-design-finger/","section":"project","summary":"This project utilized MATLAB, Solidworks to research and design a human finger and calculate the range of it's motion. SIMULINK is also utilised to design a PID controller for the wrist.","tags":["CAD","code","MATLAB","SIMULINK","Solidworks","Design","Research"],"title":"Design of an Electro-mechanical prosthetic finger, and a PID controller for the wrist.","type":"project"},{"authors":null,"categories":null,"content":"  Scheduler Psuedo-Algorithm   Introduction Code On Github\nPresentation\nWiki on Github\nThis is a Python script for a portable, scalable job scheduler with multiple priorities - for ANSYS CFX simulations. The script was designed to be called every minute by an external scheduler program.\n In the practical case, the free version of the software System Scheduler was used to deploy the script successfully, for over 3 years, managing 2 computing clusters.  Once called, the program basically loops through pre designated folders and lists .def files based on the last modified date available in Windows. The system interaction is via BASH scripts created via the Python code, as well as the python OS library. There are several in-built flags to support priority, pausing a particular cluster, logging data and troubleshooting.\nThe idea behind the project was to create a multi-platform job scheduler for ANSYS CFX that has a balance between sophistication and ease of deployment (and management). Typically job schedulers and load balancing programs are relatively very sophisticated and complex to setup with several pre-requisites and constraints. Such complexity dictates expensive commercial support and licensing considerations.\nProblem Statement A job scheduler or simulation management system was required to address the following:\n Optimum and continuous simulation solver license utilisation by all members of the team in a First-In-First-Out (FIFO) basis, Provision for dynamic or urgent priority jobs, as well as an interface to submit simulations or view job history. Optimisation and management of workload of simulation jobs facilitating overall project management and planning.  What the program accomplished  Allowed users to submit simulations by simply placing the input files in a particular folder location, which also served as a particular priority basket. Removed the need of creating manual scripts to submit multiple simulations and resolved inefficient license utilisation approaches. Facilitated a optimised approach to certain design cases, thus resulting in a 75% reduction in simulation time Enabled the use of consistent solver and memory utilisation parameters and settings, allowing efficient deployment and reducing inefficiencies due to errors. Allowed optimal or perfect utilisation of available licensing scheme, resulting in a significant increase in team output and productivity.  Tools used and links  Written with Python 2.7, using portable python, Spyder, Notepad ++ and Sublime Text 3. System Scheduler  ","date":1369612800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1369612800,"objectID":"9b66bd9a3584e45f66245e79bf55b0a5","permalink":"https://shrysr.github.io/project/cfd-cfx-simulation-scheduler/cfd-cfx-job-scheduler/","publishdate":"2013-05-27T00:00:00Z","relpermalink":"/project/cfd-cfx-simulation-scheduler/cfd-cfx-job-scheduler/","section":"project","summary":"`python` script to manage and schedule ANSYS CFX simulations on designated computing clusters.","tags":["python","code","automation","CFD"],"title":"Simulation job scheduler","type":"project"},{"authors":null,"categories":null,"content":"This project undertakes a technology study and survey covering the methods to controlling harmful emission from Diesel engines in particular and the efficacy different technologies. It explores current emission norms and the contradicting formation conditions of NOx and CO.\n","date":1297728000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1297728000,"objectID":"b064dc5eb623115eb0997aa2ffb161be","permalink":"https://shrysr.github.io/project/emission-technology-ic/emission-technology/","publishdate":"2011-02-15T00:00:00Z","relpermalink":"/project/emission-technology-ic/emission-technology/","section":"project","summary":"This project undertakes a technology study and survey covering the methods to controlling harmful emission from Diesel engines in particular and the efficacy different technologies. It explores current emission norms and the contradicting formation conditions of NOx and CO","tags":["Combustion","Design","Research","IC Engines","Emission"],"title":"Current Trends of Emission Reduction Technology in Vehicular Diesel Engines.","type":"project"},{"authors":["Shreyas Ragavan"],"categories":null,"content":"","date":1293840000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1293840000,"objectID":"0f49ea72dfcdd6b8f374348cbf7c82dd","permalink":"https://shrysr.github.io/publication/emission-study/","publishdate":"2011-01-01T00:00:00Z","relpermalink":"/publication/emission-study/","section":"publication","summary":"Combustion is the primary source of vehicular pollution,[1]. The Euro countries recently agreed on the goal that would reduce current vehicular emission , in particular carbon emissions by 85% by 2050. This would mean a 95% reduction in the carbonisation of the transportation sector, which is one of the accepted prolific contributors to pollution,[10]. As will be seen, de-carbonisation is a key issue with vehicular light duty diesel engine emissions, [9],along with reduction in NOx, with the latter being highlighted[3,4]. Two constituents of diesel emissions, Particulate Matter (PM) and NOx are contradictory in the conditions of their formation and hence require a combination of technologies to solve the problem satisfactorily. Consequently, emission reduction technologies are of extreme importance. The most stringent norms are those of Super Ultra Low Emission Vehicles (SULEV) formed by the Environmental Protection Agency (EPA) and the Euro 6 has been proposed and awaiting approval. The author’s opinion of a balanced solution being a combination of several technologies is established. The logical path to this conclusion is presented, duly referenced.","tags":null,"title":"Current Trends of Emission Reduction Technology in Vehicular Diesel Engines","type":"publication"},{"authors":["Shreyas Ragavan"],"categories":null,"content":"","date":1292371200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1292371200,"objectID":"b84a9c47d8fe4565fdfcdafd32eb51b2","permalink":"https://shrysr.github.io/publication/kinematic-design-finger/","publishdate":"2010-12-15T00:00:00Z","relpermalink":"/publication/kinematic-design-finger/","section":"publication","summary":"The design of the finger to be attached to a modular prosthetic hand and a controller solution for the wrist are explored in this effort. A novel design of a sliding body has been proposed using a Solidworks model where the outershell, providing form to the finger can be slid in or out off a of a light weight chassis and tightened with a screw. In addition to this the end effector is removabl. This provides an easy method to inspect the mechanism especially as the wiring and the motors are embedded inside.The report deals with key aspects such as the using the forward kinematics (Denavit-Hartenberg equations (DHE)) to component selection for building the model. The wrist is treated as as separate design issue and a Proportional Integral Derivative (PID) controller has been designed and manually tuned to control the rotation of the wrist, using Simulink. Though these continuous equations applied, are assuming ideal conditions, a saturation of the output provides realistic limits and conditions and a more realistic view of what occurs. The results obtained and the tuning process are explained and the conclusions are reached.","tags":null,"title":"Design of an Electro-mechanical Anthropometric finger, and a PID controller for the wrist for applications in Prosthetics","type":"publication"}]