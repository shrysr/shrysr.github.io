[{"authors":null,"categories":null,"content":"This section contains my notes, tutorials and code snippets on various topics, as well as my literate Emacs configuation.\nUse the navigation bar on the left / right to jump to articles or sections and the search bar to find specific keywords.\n","date":1545289200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1545289200,"objectID":"4cdd37113783e47641dd300543c94e1b","permalink":"https://shrysr.github.io/docs/","publishdate":"2018-12-20T00:00:00-07:00","relpermalink":"/docs/","section":"docs","summary":"This section contains my notes, tutorials and code snippets on various topics, as well as my literate Emacs configuation.\nUse the navigation bar on the left / right to jump to articles or sections and the search bar to find specific keywords.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":["Emacs"],"content":"TLDR: Check out the Docs section for my Emacs config in Org-mode\n The literate programming paradigm, as conceived by Donald Knuth, represents a move away from writing programs in the manner and order imposed by the computer, and instead enables programmers to develop programs in the order demanded by the logic and flow of their thoughts. Literate programs are written as an uninterrupted exposition of logic in an ordinary human language, much like the text of an essay, in which macros are included to hide abstractions and traditional source code.\nWikipedia article on Literate Programming\n I had graduated to using an Org-mode based configuration with vanilla Emacs, until discovering Scimax a few years ago. At this point, it seemed easier to switch back to using elisp script files in multiple files which were loaded in the desired / necessary order. The plan was to use a file for each major \u0026lsquo;concept\u0026rsquo;, for example one file each for hydras, Org-mode, mu4e, and so on.\nWhile it is not difficult to manage multiple script files with the projectile package, it does become cumbersome and inelegant to record notes and thoughts in the comment form along with code. Over time, it also becomes difficult to decide the placement of multi-package functions and snippets. As my configuration has evolved - I\u0026rsquo;ve felt an increasing need to shift back to a literate configuration using Org for Emacs, and also separate the personal parts of my configuration to enable sharing on Github.\nUsing a literate configuration enables a live documentary of my Emacs configuration and also adding meaningful notes and snippets which are directly or indirectly related to configuring Emacs. For example, it is important to have IPython and Jupyter installed for Scimax to work correctly, and I can include notes and working scripts for the same.\nThere are discussions on Emacs init time increasing by using a tangled org file. However, this is atleast partially remedied by including a function to tangle the config file whenever it is saved, and there are other methods like the one described by Holger Schurig, which I intend to try out soon. Personally, I have not found any degrade in Emacs init time via Scimax.\n","date":1550415720,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550415988,"objectID":"1b82caa706de7acaa1616e075db3b5b0","permalink":"https://shrysr.github.io/post/d16caa34-c2e2-439b-894f-d95be5708160/","publishdate":"2019-02-17T08:02:00-07:00","relpermalink":"/post/d16caa34-c2e2-439b-894f-d95be5708160/","section":"post","summary":"TLDR: Check out the Docs section for my Emacs config in Org-mode\n The literate programming paradigm, as conceived by Donald Knuth, represents a move away from writing programs in the manner and order imposed by the computer, and instead enables programmers to develop programs in the order demanded by the logic and flow of their thoughts. Literate programs are written as an uninterrupted exposition of logic in an ordinary human language, much like the text of an essay, in which macros are included to hide abstractions and traditional source code.","tags":["Emacs","Org-mode"],"title":"Literate Org-mode configuration for Emacs is liberating","type":"post"},{"authors":null,"categories":["Emacs","Productivity"],"content":"The primary power of Emacs is that you can create customised workflows to suit your needs. However, lisp is probably not a language that many learn as a typical requirement in the academic systems, perhaps even for a software engineer.\nHow would one then start customisting Emacs? One way would be to hunt for snippets from forums like reddit and stack overflow, and customise them.\nAnother easy way to learn a programming language, especially one that is intrinsic to a software is to record macros and edit these macros. Emacs is no different in this regard, and in fact makes it easy being a self-documenting text editor.\nThe elmacro package reduces some of the burden. The recorded macro does require a subsequent clean-up to be useful, which is still easier than coding lisp from scratch. In any case, exploring the recorded code will eventuall lead towards proficiency in writing lisp.\nThis blog post provides a more detailed introduction, including creating a menu entry for elmacro. As highlighted by the blog, some commands do not register in Emacs, since external packages handle those functions.\nFor example, I have 3 main repositories where I commit my work. This is a frequent, repetitive process that is often done till (and at) the last minute.\nThese are snippets that were developed leveraging elmacro:\n;; Maximise current frame, open scimax user directory, ;; call magit, switch window and open the scimax directory ;; Scimax magit status and dired (defun sr/windows-magit-scimax () (interactive) (ace-delete-other-windows) (dired \u0026#34;~/scimax/user/\u0026#34;) (switch-window-then-split-right nil) (magit-status \u0026#34;~/scimax/\u0026#34;) (switch-window) (split-window-vertically) (dired-up-directory) (windmove-right) ) ;; Maximise current frame, open org directory, call magit ;; my_org magit status (defun sr/windows-magit-org () (interactive) (ace-delete-other-windows) (magit-status \u0026#34;~/my_org/\u0026#34;) ) ;; Maximise current frame, call magit for my_projects directory ;; split buffer and call dired in case I need to navigate to a particular directory. ;; the latter can also be done via magit itself if desired. (defun sr/windows-magit-projects () (interactive) (ace-delete-other-windows) (switch-window-then-split-right nil) (magit-status \u0026#34;~/my_projects/\u0026#34;) (switch-window) (dired \u0026#34;~/my_projects/\u0026#34;) (switch-window) ) Another more complicated example, is using projectile to switch to a project, call a particular file in the project and then split the buffer and open the tasks of that particular project with a narrowed view.\nI capture each project\u0026rsquo;s tasks and notes separately in an org file using org-projectile. This is useful especially for coding projects so that the code is better separated from notes and yet linked.\n;; This is to rapidly switch between projects and have a similar window configuration, ;; i.e. a main file, and a narrowed view of the tasks heading. (defun sr/windows-projects () (interactive) (ace-delete-other-windows) (switch-window-then-split-right nil) (projectile-switch-project) (switch-window) (find-file \u0026#34;~/my_org/project-tasks.org\u0026#34;) (widen) (helm-org-rifle-current-buffer) (org-narrow-to-subtree) (outline-show-children) ) These are not perfect. For example, I\u0026rsquo;d rather have to select the project name only once and have that feed into helm-org-rifle. These are topics of future exploration.\nWhat then remained was being able call these functions with a few keypresses. Hydras enable this.\n(defhydra sr/process-window-keys () \u0026#34; Key^^ ^Workflow^ -------------------- o org magit s scimax magit p projects magit w select project and set window config SPC exit \u0026#34; (\u0026#34;o\u0026#34; sr/windows-magit-org ) (\u0026#34;p\u0026#34; sr/windows-magit-projects ) (\u0026#34;s\u0026#34; sr/windows-magit-scimax ) (\u0026#34;w\u0026#34; sr/windows-projects) (\u0026#34;SPC\u0026#34; nil) ) (global-set-key (kbd \u0026#34;\u0026lt;f8\u0026gt; m\u0026#34;) \u0026#39;sr/process-window-keys/body) With the above in place, now all I have to do is call the menu to choose the desired function by typing F8 m and then type o or p and so on. The hydra exits with Space, which makes it easy to switch to another project in case there is nothing to commit in the current choice.\nThough simple and in many ways primitive - these functions have still saved me a lot of repetitive acrobatics on my keyboard and I enjoy using them.\n","date":1549127760,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549127955,"objectID":"14cf9e0dca916f2f8ff99e6c94443918","permalink":"https://shrysr.github.io/post/7b7b94ca-2d77-4814-8cae-c9e95d3f8bc4/","publishdate":"2019-02-02T10:16:00-07:00","relpermalink":"/post/7b7b94ca-2d77-4814-8cae-c9e95d3f8bc4/","section":"post","summary":"The primary power of Emacs is that you can create customised workflows to suit your needs. However, lisp is probably not a language that many learn as a typical requirement in the academic systems, perhaps even for a software engineer.\nHow would one then start customisting Emacs? One way would be to hunt for snippets from forums like reddit and stack overflow, and customise them.\nAnother easy way to learn a programming language, especially one that is intrinsic to a software is to record macros and edit these macros.","tags":["Emacs","lisp"],"title":"Leverage recorded macros to learn elisp and hack together workflows in Emacs","type":"post"},{"authors":null,"categories":["Productivity"],"content":"While reading the book Atomic Habits by James Clear, I was reflecting that my choice of embracing Emacs and progressively gaining mastery over it was intimately connected with the philosophy preached in the book.\nMy efforts initially started out with a craving for a system to quantify and manage my tasks, habits, notes, blog writing, job applications and projects in a custom environment, and to be able to build toolkits of code to perform repetitive tasks. As mentioned in an earlier blog post , I tried several approaches before settling on Emacs. The idea was to find or create a single system to track everything of importance in my life (with ease and efficiency). This was instead of a fragmented approach of using multiple tools and techniques, for example, Sublime Text / Atom as a text editor and Todoist as a task management tool.\nI started with a vanilla configuration of Emacs and painstakingly borrowed (and eventually) modified lisp snippets to implement desired \u0026lsquo;features\u0026rsquo; or behaviors. It was a just a couple of features every week, initially focused on Org mode\u0026rsquo;s behavior alone. That was nearly 3 years ago. As of now, I am able to manage my blog [hugo], view my email [mu4e], browse the web [w3m], seamlessly capture notes / ideas / tasks from (almost) anywhere [Org mode], chat on IRC, build multi-language code notebooks with ease [Org babel]. All the above provide me significant advantages in speed and efficiency which still have plenty of potential to improve.\nSure, I certainly appear closer to my goal today.. however, I did not know if it was a pipe dream when I started out. It was often extremely frustrating, right from memorizing the \u0026lsquo;crazy\u0026rsquo; keybindings in Emacs, to struggling with getting a lisp snippet to work as expected.\nChoosing Emacs had unexpected rewards as well. For example, the need of synchronizing my notes and Emacs configuration with multiple machines led me to Git. Magit\u0026rsquo;s easily accessible commands and relatively visual interface has been a massive help in getting things done with Git, despite not having any deep technical knowledge of how Git works.\nMy journey with Emacs is testament that an incremental, compounding improvement over time can ultimately result in significant gains. It is also important to acknowledge that I am standing on the shoulder of giants and the awesome Scimax is a cornerstone in my toolkit.\n","date":1547951580,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547951594,"objectID":"fdccb9e1e5640af8c82669cf55387060","permalink":"https://shrysr.github.io/post/32266f09-c9b9-48ff-9c48-e2348eeda33d/","publishdate":"2019-01-19T19:33:00-07:00","relpermalink":"/post/32266f09-c9b9-48ff-9c48-e2348eeda33d/","section":"post","summary":"While reading the book Atomic Habits by James Clear, I was reflecting that my choice of embracing Emacs and progressively gaining mastery over it was intimately connected with the philosophy preached in the book.\nMy efforts initially started out with a craving for a system to quantify and manage my tasks, habits, notes, blog writing, job applications and projects in a custom environment, and to be able to build toolkits of code to perform repetitive tasks.","tags":["Emacs","Org-mode"],"title":"Incremental improvements can lead to significant gains","type":"post"},{"authors":null,"categories":["Data-Science"],"content":"A slide deck from Netflix, mentions using Nteract as their programming notebook, and prompted a mini exploration.\nThis blog post by Safia Abdalla, (a maintainer/ developer of Nteract) introduces Nteract as an open source, desktop-based, interactive computing application that was designed to overcome a bunch of limitations in Jupyter Notebook\u0026rsquo;s design philosophy. One key difference (among many others) is the ability to execute code in a variety of languages within a single notebook, and it also appears that that the electron based desktop app should make it easier for beginners to start coding.\nAlong similar lines, this blog post is a nice primer to the evolution of Ipython, Jupyter Notebooks and Nteract, from the plain vanilla Python console, which was the starting point. Beyond the illuminating definition that the Jupyter notebook is an \u0026lsquo;establishment of well-defined protocols and formats\u0026rsquo;, and is not just a console or a programming notebook, the blog post provides a deeper insight into how these protocols are implemented and communicate with interpreters or Jupyter kernels.\nThis reddit discussion has a few interesting pros and cons regarding using nteract.\nWhile I can see the value of computing notebooks like Jupyter and Nteract, I do think that these do not come close to the functionality and ease that can be achieved with Org mode and Emacs, which have been in existence a lot longer. I was able to intuitively transition to using multiple language code \u0026lsquo;notebooks\u0026rsquo; using Org mode. This reddit thread and blog post elucidate the advantages of using Babel and Org mode over Jupyter notebooks.\n","date":1547951400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547951445,"objectID":"8055a28ad7391e622d83f47dfbac9ed6","permalink":"https://shrysr.github.io/post/a642fab6-6704-4e57-9f97-43e7dd8d9caa/","publishdate":"2019-01-19T19:30:00-07:00","relpermalink":"/post/a642fab6-6704-4e57-9f97-43e7dd8d9caa/","section":"post","summary":"A slide deck from Netflix, mentions using Nteract as their programming notebook, and prompted a mini exploration.\nThis blog post by Safia Abdalla, (a maintainer/ developer of Nteract) introduces Nteract as an open source, desktop-based, interactive computing application that was designed to overcome a bunch of limitations in Jupyter Notebook\u0026rsquo;s design philosophy. One key difference (among many others) is the ability to execute code in a variety of languages within a single notebook, and it also appears that that the electron based desktop app should make it easier for beginners to start coding.","tags":["datascience","Emacs"],"title":"Nteract : An interactive computing environment","type":"post"},{"authors":null,"categories":["Emacs","Data-Science"],"content":"Matt Dancho\u0026rsquo;s course DSB-101-R is an awesome course to step into ROI driven business analytics fueled by Data Science. In this course, among many other things - he teaches methods to understand and use cheatsheets to gain rapid level-ups, especially to find information connecting various packages and functions and workflows. I have been hooked to this approach and needed a way to quickly refer to the different cheatsheets as needed.\nFavio Vazquez\u0026rsquo;s ds-cheatsheets repo, akin to the One Ring to Rule them All (with respect to Cheatsheets of course), combined with Emacs (Projectile + Helm packages) make it almost a breeze to find a specific cheatsheet quickly, by just typing in a few words.\u0026nbsp;1\nThe built-in Hydras in Scimax make it very easy to do the above with a few key presses. All I do is F12 \u0026gt;\u0026gt; p \u0026gt;\u0026gt; ww, start typing in \u0026ldquo;ds-\u0026rdquo; and choose the project and then start typing in the name of the PDF file I\u0026rsquo;m looking for. Check out the animation below.\n Rapidly switching to a cheatsheet PDF   The above concept applies to switching to any file in any git based project that is added to Projectile\u0026rsquo;s lists.\nThe next aspect to consider was switching between maximized buffer of the opened cheatsheet PDF and the current code buffer. As it goes in Emacs, \u0026ldquo;there\u0026rsquo;s probably a package for that..\u0026rdquo; ! My solution was to use one of the various frame/window configuration packages in Emacs to save the position and orientation of the buffers and rapidly switch between the maximised PDF frame and the split code and interpreter frames.\nFacilitating the above was in fact already available in Scimax, where a frame or window configuration can be saved into a register that is valid for that session. Persistent saving of window configuration across sessions (i.e Emacs restarts) is a little more complex, but it is still possible with some tweaking. Winner-mode is also an interesting option to switch rapidly between window configurations.\n To some extent, it is also possible that launchers like the Alfred app could be set or programmed to search in particular locations. This is a less hacky and still a functional option for Mac users.\r^   ","date":1549128240,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549128255,"objectID":"497cec360d5bd8f945e2a1734e1a243a","permalink":"https://shrysr.github.io/post/e86e171e-cc0d-4957-b587-ed2bbf36a8cf/","publishdate":"2019-02-02T10:24:00-07:00","relpermalink":"/post/e86e171e-cc0d-4957-b587-ed2bbf36a8cf/","section":"post","summary":"Matt Dancho\u0026rsquo;s course DSB-101-R is an awesome course to step into ROI driven business analytics fueled by Data Science. In this course, among many other things - he teaches methods to understand and use cheatsheets to gain rapid level-ups, especially to find information connecting various packages and functions and workflows. I have been hooked to this approach and needed a way to quickly refer to the different cheatsheets as needed.","tags":["Emacs"],"title":"Rapidly accessing cheatsheets to learn data science with Emacs","type":"post"},{"authors":null,"categories":["Emacs","Productivity"],"content":"I\u0026rsquo;ve written several posts on different ways and tools available to aid productivity, and probably a lot about Emacs. My background is in computational physics, and not in programming, and yet Emacs has been an indispensable driver of my daily workflow for the past 3 years.\nThe fact is that knowing Emacs (or Vim), or having a custom configuration is not a wildly marketable skill, nor is it mandatory to achieve spectacular results. An Emacs configuration suits personal workflows and style, which may be borderline peculiar to another person. Such a dependence on customised tools would also drastically reduces your speed while using a new IDE or text editor.\nSo : why add Emacs to the ever-growing to-do list? The question is more pertinent considering that mastery of a \u0026lsquo;text editor\u0026rsquo; is not something you can freely talk about and frequently expect empathetic responses or even a spark like connection. Emacs would be considered by many to be an esoteric and archaic software with a steep learning curve that is not beginner friendly.\nHowever \u0026hellip;..\nThis article elucidates many points where Emacs can help PHB\u0026rsquo;s (Pointy Haired Boss). The internet abounds with several examples on how org-mode and Emacs have changed lives for the better. Here is another cool article by Howard Abrams on using Emacs as his (only) window manager, in place of a desktop environment.\nWatching an experienced person handle his tools emphasises the potential art form behind it, especially when compared to the bumbling of an amateur. Yes, the amateur may get the job done given enough time, and depending on his capabilities - even match the experienced professional\u0026rsquo;s output (eventually).\nHowever, as experience is gained, the workflows and steps to achieve an optimal result become more lucid. I\u0026rsquo;ve experienced an exponentially increasing and compelling need to implement specific preferences to achieve the required optimized results faster and with fewer mistakes.\nIt is therefore obvious that the workflow and tools used must allow the provision to evolve, customise and automate. This is particularly true with respect to the world of data science and programming. I don\u0026rsquo;t think there is anything better than Emacs with respect to customisation.\nImagine the following:\n having a combination of scripts or snippets in different languages to jumpstart a project, which is available with a few keypresses? (Yasnippet)1 Maintaining a blog with a single document, with articles updated automatically on a status change. (ox-hugo) working with multiple R environments in a single document. (Org-babel, ESS)2 Different Window configurations and processes for different projects that can be called with a few keypresses (hint : keyboard macros) An integrated git porcelain that can actually help you learn git so much faster (magit) Intimately integrating email with tasks, projects, documentation and workflows (mu4e, Org-mode) A customised text editor available right in your terminal (Use Emacsclient launched off a daemon within a terminal) Not requiring to use the mouse for navigation!3  Now : imagine the consolidated effect of having all the above at your disposal, in a reasonably streamlined state. Then, considering the cumulative effect over multiple projects! The above is just a shallow overview of the possibilities with Emacs.\nInvesting in learning Emacs, has the serious potential to spawn exponential results in the long run.\n Articles on using Yasnippet: \u0026mdash; Using Emacs Yasnippet against repetitive boileplate code || Tweaking Emacs Yasnippet || Expanding snippets\r^ Links to using R with Emacs: Using R with Emacs and ESS || Using R with Emacs || Tips from R Coders who use ESS || Why I use Emacs for R programming\r^ See this article of a non-technical user\u0026rsquo;s experiment with not using the mouse, reporting significant gains in speed and productivity. I\u0026rsquo;ve experienced this myself after gaining basic proficiency in moving around Emacs.\r^   ","date":1548453540,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549149432,"objectID":"f2af00e15e37e0cb570a35f65a51345e","permalink":"https://shrysr.github.io/post/11ef85e6-9efc-4af4-b5f3-7648f9ee9308/","publishdate":"2019-01-25T14:59:00-07:00","relpermalink":"/post/11ef85e6-9efc-4af4-b5f3-7648f9ee9308/","section":"post","summary":"I\u0026rsquo;ve written several posts on different ways and tools available to aid productivity, and probably a lot about Emacs. My background is in computational physics, and not in programming, and yet Emacs has been an indispensable driver of my daily workflow for the past 3 years.\nThe fact is that knowing Emacs (or Vim), or having a custom configuration is not a wildly marketable skill, nor is it mandatory to achieve spectacular results.","tags":["Emacs","yasnippet"],"title":"Why bother with Emacs and workflows?","type":"post"},{"authors":null,"categories":["Data-Science"],"content":"Title: Navigating Diverse Data Science Learning: Critical Reflections Towards Future Practice\nAuthor: Yehia Elkhatib\nDownload link\nThis are my notes on the above paper, which mainly deals with detailing the methods explored and implemented to impart a high quality of education in data science. The paper also provides an interesting breakup of the different roles in data science workflows.\n The importance of being able to work in a team is highlighted. Working in isolation for a data scientist almost renders the results meaningless.\n Considering the typically diverse backgrounds of DS practitioners, it is difficult to devise a curriculum that caters to everybody. This factor is certainly critical to consider before taking up any formal university courses. I would not want to spend a great deal of time and money in learning obsolete techniques or technologies.\n There are differences in learning rates based on the background, and past academic environments. In particular, most students do not seem to realize that the best learning takes place in a \u0026lsquo;social\u0026rsquo; manner. Besides addressing the above, several aspects of effective learning and aligning the curriculum and teaching methodology to the typical industrial workflows are explored in this paper.\n The literature references of past studies and research would certainly make interesting reads. However, they are more relevant to those in the teaching line. An interesting approach would be to read between the lines to extract the best practices for students to learn rapidly and effectively. However, there are many direct resources and techniques to approach the latter.\n DS Roles :- Core.\n Janitor  data cleaning, pre-processing  Scout  EDA, early insights  Analyst  identifying patterns, initial hypothesis, evidence of unforeseen narratives)  Decision Builder  automate decision making, ML, DL  Curator  storage formats across interfaces, data governance  Engineer  Manage the interface between development and production products, efficiency and reliability of data interaction.   Auxiliary roles : these roles come into the picture as the DS team grows.\n Domain specialist  data significance, sources of bias  Infrastructure manager  support to build and operate, beyond the data engineer  Communicator  Communicating explanatory and confirmatory analyses, setting up systems to interact with the audiences outside the DS team  Facilitator  A/B experiments, additional support to the communicator.    ","date":1547951400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547951485,"objectID":"423a87faca6f8f66b184e79e3cd9fe88","permalink":"https://shrysr.github.io/post/44d30b28-0de8-4211-afad-18fe22323bf3/","publishdate":"2019-01-19T19:30:00-07:00","relpermalink":"/post/44d30b28-0de8-4211-afad-18fe22323bf3/","section":"post","summary":"Title: Navigating Diverse Data Science Learning: Critical Reflections Towards Future Practice\nAuthor: Yehia Elkhatib\nDownload link\nThis are my notes on the above paper, which mainly deals with detailing the methods explored and implemented to impart a high quality of education in data science. The paper also provides an interesting breakup of the different roles in data science workflows.\n The importance of being able to work in a team is highlighted.","tags":["datascience","Paper-review"],"title":"Technical notes : Research paper on learning/teaching data science","type":"post"},{"authors":null,"categories":["General","Productivity"],"content":" Why use RSS? Off late, I had been relying more on email based content consumption. The phenomenally fast search and filtering capabilities that can be leveraged with mu4e make this easy.\nEven with all these filters, it is quite difficult to keep on top of news and information from different sources. It is actually inconvenient to mix important emails and correspondence with newsletters and the like, which arrive by the dozen(s) everyday.\nThere\u0026rsquo;s also a nagging feeling that relevant and \u0026lsquo;up to date\u0026rsquo; information is better searched through Google, with a fresh search each time. This approach invites distractions. One remedy is to link a google news feed of a search term into your RSS.\nI\u0026rsquo;ve always liked RSS, however, the exploration made me actually realise that a dedicated RSS reader could inspire focused reading and aid in retention of information, and could be a better option than flooding my inbox.\nAn all-in-one solution for reading RSS feeds with a capable in-built browser to view images/webpages/videos would be excellent, along with the ability to sync with multiple services and facilitate capturing notes.\nExploration: Within Emacs - Elfeed (along with Elfeed-goodies) is a good option to read feeds and is strongly integrated with Emacs and org-mode. A single keypress can be programmed to store a link as an org-heading with a note. This would really be my first choice as I\u0026rsquo;ve found it to work rather well. I can use an org file to easily organise my feeds !\nUnfortunately, there seems no easy way to sync completed feeds to my iOS devices, though solutions exist for Android. I do spend a lot of time on my computer, however, it seems I can just read better and faster on my iPad and therefore a sync to mobile devices is still important.\nThough it does not seem to be a mainstream recommendation on reviews like the sweet setup : Vienna is a reliable solution (open source!) to consider using to browse RSS feeds on the Mac OS. This comes with a caveat - some tinkering is required to get it to sync with a service.Vienna has inbuilt share options to share via Buffer or Twitter. Side note: I would recommend using Buffer to manage posts on multiple social media sites in a seamless manner. Buffer\u0026rsquo;s free tier should be sufficient for moderate, personal purposes. I use it to post on Twitter and Linked in simultaneously.\nHarvesting information The next consideration was harvesting notable information of interest from the RSS feeds. If not Emacs, the information has to go to DEVONThink Pro (DTP), which has a handy pull out drawer into which content can be dragged. I was able to just drag and drop the article or text selection into the DTP drawer. This appears as a URL / bookmark in DTP, and can be converted to a formatted note or web archive subsequently. A script could probably accomplish this automatically. That\u0026rsquo;s for a future project.1\n Screenshot - Vienna + DTP drawer   Granted, an application external to Emacs (especially without a customisable keyboard driven flow) is not the desirable way to do things. Most websites usually have an RSS feed or email subscription possibility.\nOpting for Feedly as a susbcription service and RSS app Unfortunately, Vienna had to be abandoned as it felt more sensible to opt for a Feedly subscription to enable a seamless mobile experience. The Feedly app turned out to run surprisingly well on my ancient iPad and I can still drag and drop entire articles into DTP which come out to be formatted RTFD files which could be read and highlighted in leisure. While it may be nice to opt for a standalone app in the Mac for RSS feeds, the Feedly app satisfies my needs and is also available cross-platform. Note: I use the excellent Unread app to read RSS on my newer iPhone.\nBesides the numerous sync options, Feedly provides other interesting features in their pro subscription, like setting up Google keyword searching and organising multiple feeds into \u0026lsquo;boards\u0026rsquo;. This will certainly help in enabling some level of filtering. The method of organising sources and OPML imports in the mac app is a little clunky and not comfortably intuitive, but it is usable.\nThere\u0026rsquo;s no easy way to use Elfeed as a feedly client either.\nHow to cover them all? With numerous sources available on most topics - a technique to read is of even more importance. Besides leveraging custom boards, it seems the best way to consume content is to rapidly sweep through the titles and the short descriptions, and in parallel skim through articles of interest. If the article (even slightly) feels worth recording and reading in detail, I select the entire article and drag it into DTP via the drawer for a future session.\nI try to deploy DTP as my primary reading app, because of the ability to highlight lines (which are generally available across devices). Besides aiding in skimming the article in the future, it helps me know I\u0026rsquo;ve actually read the article. This is in addition to the core ability to use DTP\u0026rsquo;s AI algorithms in searching through my notes and forming connections between ideas. I also use smart groups that show me the articles captured in the last 1 week, 2 weeks, 3 weeks, which helps me re-visit them in a structured method. The latter works rather well as a memory aid.\n Article captured from Feedly into DTP   Future plans? It would be ideal to setup my own server which will process the RSS feeds. Perhaps a Raspberry Pi or something else could be employed. This would be a cost efficient approach for the long term. Such a setup would enable using Elfeed to source articles from the server and thus sync with my mobile devices.\nFor now, I guess I will have to rely on Feedly.\n It is probably worth noting that Feedly pro has several 3rd party integrations available out of the box including Evernote.\r^   ","date":1548514260,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548514283,"objectID":"21d339b95df19c96baf992571086b7e1","permalink":"https://shrysr.github.io/post/c641a230-37c9-46aa-84eb-e78cc00d0c7e/","publishdate":"2019-01-26T07:51:00-07:00","relpermalink":"/post/c641a230-37c9-46aa-84eb-e78cc00d0c7e/","section":"post","summary":"Why use RSS? Off late, I had been relying more on email based content consumption. The phenomenally fast search and filtering capabilities that can be leveraged with mu4e make this easy.\nEven with all these filters, it is quite difficult to keep on top of news and information from different sources. It is actually inconvenient to mix important emails and correspondence with newsletters and the like, which arrive by the dozen(s) everyday.","tags":["Emacs"],"title":"Back to RSS","type":"post"},{"authors":null,"categories":["Emacs"],"content":"Scimax has a convenient feature of immediately creating projects (M-x nb-new). The location of the project directory is defined by the setting (setq nb-notebook-directory \u0026quot;~/my_projects/\u0026quot;), which has to be set in your Emacs config. Once the name of the project is chosen, a Readme.org buffer is immediately opened and one can start right away. It is an awesome, friction-free method to get started with a project.\nThese projects are automatically initialised as git repositories, to which it is trivial to add a new remote using Magit. Therefore individual folders and git repos are automatically created for each project in the specified project directory. This enables the convenient possibility of keeping the data, folder structures, tasks, notes and scripts of each project separate.\nDifferent projects can be switched to using M-x nb-open and typing in a few words that denote the title of the project. Choosing a project automatically provides the option to open the Readme.org files created earlier. Therefore it would be convenient to include relevant links to different locations / scripts and etc in the Readme file.\nUsing the above technique resulted in me creating a huge number of projects over a period of time. Especially while working on multiple computers, it is worth inculcating the discipline of adding a remote on github/bitbucket and regularly pushing to the remote.\nThe advantage of using a separate repo for each project is the alignment with the space constraints imposed by the free tier repos on bitbucket or github. However, it is also useful to have the entire project folder as a git repo. This can be resolved by adding each project as a sub-module. In this way, all the projects are available with a single clone of the project foder, and then specific sub-modules or projects can be initialized as required. Having separate repos for each project also enables more streamlined collaboration or publishing of a particular project, rather than the entire project folder and allowing separate gitignore lists for each project.Using a single file for all the projects will also enable adding notes pertaining to the content of each project, which can be searched before intialising the entire project repo. Scripts for initializing and commit can also be included in this file for convenience.\nOnce the above is done, the org-projectile package can be leveraged to plan the tasks and manage the notes for each project. It is possible to have all the tasks for a project within a separate file within each project, or specify a single file as the task management for all the projects. This file is then appended to the org-agenda files for tasks to show up in the agenda. As mentioned in the Readme of the org-projectile package the settings would look like the following (for a single file pertaining to all the projects):\n;; Setting up org-projectile (require \u0026#39;org-projectile) (setq org-projectile-projects-file \u0026#34;~/my_org/project-tasks.org\u0026#34;) (push (org-projectile-project-todo-entry) org-capture-templates) (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files))) (global-set-key (kbd \u0026#34;C-c n p\u0026#34;) \u0026#39;org-projectile-project-todo-completing-read) The above snippet adds a TODO capture template activated by the letter \u0026lsquo;p\u0026rsquo;, and also adds the project-tasks file to the agenda files. Inside a project, it is then possible to capture using C-cc p and add a task which will create a top level heading linked to the project, and the task or note as a sub-heading.\n org-projectile task capture   ","date":1548452640,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548452689,"objectID":"0bb846017bd18605fbd51deb896bb826","permalink":"https://shrysr.github.io/post/8f702ce2-8bb7-40a3-b44b-a47222c02909/","publishdate":"2019-01-25T14:44:00-07:00","relpermalink":"/post/8f702ce2-8bb7-40a3-b44b-a47222c02909/","section":"post","summary":"Scimax has a convenient feature of immediately creating projects (M-x nb-new). The location of the project directory is defined by the setting (setq nb-notebook-directory \u0026quot;~/my_projects/\u0026quot;), which has to be set in your Emacs config. Once the name of the project is chosen, a Readme.org buffer is immediately opened and one can start right away. It is an awesome, friction-free method to get started with a project.\nThese projects are automatically initialised as git repositories, to which it is trivial to add a new remote using Magit.","tags":["Emacs","Org-mode","productivity"],"title":"Juggling multiple projects and leveraging org-projectile","type":"post"},{"authors":null,"categories":["Emacs","Datascience"],"content":" This post provides a simple example demonstrating how a shell script can be called with appropriate variables from any Org file in Emacs. The script essentially converts a Jupyter notebook to Org source, and Babel is leveraged to call the script with appropriate variables from any Org file. This reddit thread and blog post elucidate the advantages of using Babel and Org mode over Jupyter notebooks.\nDirectly editing code in a Jupyter notebook in a browser is not an attractive long term option and is inconvenient even in the short term. My preference is to have it all in Emacs, leveraging a versatile Org file where it is easy to encapsulate code in notebooks or projects within Org-headings. Thus, projects are integrated with the in-built task management and calendar of Org mode.\nHowever, it may be a frequent necessity to access an external Jupyter notebook for which there is no Org source.\nOne solution is to start up a Jupyter server locally, open the file and then File \u0026gt;\u0026gt; save as a markdown file, which can be converted to an Org file using pandoc. Remarkably, the output code seems similar to the code blocks used in the R-markdown notebooks, rather than pure markdown markup. Therefore this markdown export should work fine in RStudio as well. However, unless the Jupyter server is always running on your machine, this is a relatively slow, multi-step process.\nThis SO discussion provided my answer, which is a 2 step script via the versatile pandoc. A workable solution, as a test conversion revealed. The headings and subheadings and code are converted into Org markup along with Org source blocks.\njupyter nbconvert notebook.ipynb --to markdown pandoc notebook.md -o notebook.org The next consideration was to have the above script or recipe handy for converting any Jupyter notebook to an Org file quickly.1 For the script to be referenced and called from any other location, the source block needs to be defined with a name and the necessary arguments, and also added into the org-babel library.\nIn this example the path to the Jupyter notebook, markdown file and resulting org file are specified as variables or arguments. Note that the absolute path to any file is required. Save the following in an Org file, named appropriately, like my-recipes.org\n#+NAME: jupyter-to-org-current #+HEADER: :var path_ipynb=\u0026#34;/Users/xxx/Jupyter_notebook\u0026#34; #+HEADER: :var path_md = \u0026#34;Jupyter_notebook-markdown\u0026#34; #+HEADER: :var path_org = \u0026#34;Jupyter-notebook-org\u0026#34; #+BEGIN_SRC sh :results verbatim cwd=$(pwd) jupyter nbconvert --to markdown $path_ipynb.ipynb --output $cwd/$path_md.md pandoc $cwd/$path_md.md -o $cwd/$path_org.org cp $path_ipynb.ipynb $cwd ls The path_ipynb variable can be changed as required to point to the Jupyter notebook.2\nAll such blocks above can be stored in Org files and added to the Library of Babel (LOB) by including the following in the Emacs init configuration.\n(org-babel-lob-ingest \u0026#34;/Users/shreyas/my_projects/my-recipes.org\u0026#34;) The named shell script source block can now be called from any Org file, with specified arguments and have the notebook. The script is called using the #+CALL function and using the name and arguments of the source block above.\n#+CALL: jupyter-to-org-current(path_md=\u0026#34;Jup-to-markdown\u0026#34;, path_org=\u0026#34;Markdown-to-org\u0026#34;) Therefore, the snippet above will convert a Jupyter notebook to a markdown file named Jup-to-markdown and then an Org file called Markdown-to-org. If an argument is not specified, the default value of the paths specified in the original source block will be used.\nOf course, the #+CALL function used above is also too lengthy to remember and reproduce without headaches. This is also bound to happen as the number of such named code snippets increase. One solution (though not ideal) is to store the #+CALL as a snippet using M-x yas-new-snippet, and load it when needed using the excellent ivy-yasnippet package (see MELPA), with minimal exertions.\nFurther possibilities It would be nice to improve the options available for modifications on the fly. Python may be an \u0026lsquo;easier\u0026rsquo; option to write up for such activities rather than a shell script. For example, a script with the working directory being an additional /optional argument could be considered.\nAnother desirable factor in the resulting Org file would be iPython blocks in place of python. As a temporary solution, the python blocks could be converted to ipython blocks via a search and replace throughout the document. A lisp macro / source block could run after the above source block to facilitate the search and replace.\u0026nbsp;3\n In Scimax - it is possible to quickly start a new project using M-x nb-new, which creates a sub-folder in the specified projects folder and creates and opens a readme.org file for the project.\r^ The option C-u-cl is a messy way to quickly get the full file name path, the resulting path will need to be modified slightly.\r^ It is worth noting that a bunch of additional HTML blocks and hyperlinks are inserted via the above export procedure. It should be possible to add some hooks to clean up the org file after the export from pandoc.\r^   ","date":1548452640,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548452694,"objectID":"0a062dfc6660944d9e2a163216e27989","permalink":"https://shrysr.github.io/post/0b63f316-6f6b-4ec2-84a4-5ff287ecf7a7/","publishdate":"2019-01-25T14:44:00-07:00","relpermalink":"/post/0b63f316-6f6b-4ec2-84a4-5ff287ecf7a7/","section":"post","summary":"This post provides a simple example demonstrating how a shell script can be called with appropriate variables from any Org file in Emacs. The script essentially converts a Jupyter notebook to Org source, and Babel is leveraged to call the script with appropriate variables from any Org file. This reddit thread and blog post elucidate the advantages of using Babel and Org mode over Jupyter notebooks.\nDirectly editing code in a Jupyter notebook in a browser is not an attractive long term option and is inconvenient even in the short term.","tags":["Emacs","Jupyter","Python","Org-mode"],"title":"Jupyter notebooks to Org source + Tower of Babel","type":"post"},{"authors":null,"categories":["General"],"content":" Whiplash: Wikipedia\nWhiplash is a fascinating movie on many levels regarding a topic that interests me deeply\u0026hellip; How to progressively perform, and strive to become the very best in a chosen field. Personally, I found each step of the movie riveting and would recommend it to anybody who would find the above question even mildly interesting. The movie\u0026rsquo;s climax was immensely interesting, inspiring and supported by great acting. At any rate, the movie induced a blog post !\nThe story revolves around the mind and life of a student who wants to be among the greats in his field, and the way he deals with an abrasive, abusive and unorthodox teacher whose intentions are to bring out the best in a student. No movie is perfect - while some points in Whiplash do appear extreme and therefore relatively unrealistic - the overriding message and theme conveyed certainly rings out clearly, in an engaging plot.\nI could relate to the following pointers from the movie:\nLeverage stress to achieve new levels of insight and performance The belief of the teacher, that the best performance or attributes hidden inside a person can come out only via repeated, unexpected and stressful prodding. I\u0026rsquo;m not sure if this works as shown in the movie, but I have found unexpected insights at times of extreme stress, that have were taken forward to habits that changed my life.\nWeathering criticism The mental conditioning required to weather and beat intense, sharp, depressing criticism along with verbal and physical abuse from a mentor or teacher and use the same as a motive force for self-improvement and eventually superlative performance. Though there are examples of extreme abrasiveness in leaders like Steve Jobs - such an approach would not be tolerated by most people today.\n I know other stories of people working under such mentors, striving to learn and gain their approval and eventually winning the same. These efforts paid off by resulting in skills, thinking patterns and a superior mental conditioning. Finding such a mentor at the formative stage is probably the best thing to happen to anybody.\n An effective strategy to find mentors is to shadow people on Linked in and learn from their profiles and activity. Some of them may be willing to connect and invest time in mentoring.\n Another possibility to find like minded people and mentors would be to join the communities of on-line courses, like Datacamp and Dataquest, who have lively channels in Slack for paid members.\n  Getting back up after a fall Everybody breaks. Just as the promising student in Whiplash breaks. But the champions among us rally, to stage a comeback and performance that make history.\nRegularly surpassing the level of deliberate knowledge of your own performance, and thus improvement by exactly being able to measure your performance and pinpoint mistakes. This point is portrayed in a very interesting manner in Whiplash, where the teacher expects the student to know exactly what mistake is being made.\nBe Great, not Good Rejecting the \u0026lsquo;Good\u0026rsquo; or \u0026lsquo;Good enough\u0026rsquo; feedback from anybody. The goal is to be Great, not good. The goal should be to strive to set the precedent and not just follow a beaten track. The pinpoint focus should be on progressive improvement to become the best, and that entails never being satisfied and to be ruthless in rooting out flaws.\nAchieving Balance : mind + body + surroundings Great performance is about that perfect balance between the body, mind and environment to leverage the best result possible. I view the scene where the student survives a car crash, just to reach a performance and then not being able to perform, as a good example of overreaching, without strengthening the core, and thus inviting instability.\nGo off the beaten track and Lose yourself It was the ending of Whiplash that truly drove me to comprehend the points so far. It is twisted, unexpected and led me to truly enjoy the movie and appreciate that: despite the above points being reasonably discernible - the human mind and nature is exceedingly complex. Stability and reasoning are not the only keystones to the foundation of greatness. There has to be a healthy mix of some form of abnormal obsession thrown in, to make a stellar performance what it is. However, can this be practically repeated on a regular basis?\nLearning velocity and Flow There are several bodies of research work available today that can be studied to get closer to consciously stimulating a great performance. One such example is:\n Unlocking the Talent Code With Dan Coyle on the Unmistakable Creatives podcast provides an insight in line with the points seen above, into what constitute outliers and performers. The interesting concept of \u0026lsquo;Learning velocity\u0026rsquo; is explained by Dan with a lucid example. It is surmised that progress and maximum learning to become better occurs at the boundary line dividing what we know at the moment, and the unknown skills that beckon.  That point sems to be an amalgamation of several factors, that are typically present when someone is in \u0026lsquo;flow\u0026rsquo;. Perhaps this flow can be described as a heightened sense of what is, and what should be and the energy to strive and achieve what should be.. It certainly does feel logical to think that we become better by pushing that boundary.\n","date":1547951820,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547951877,"objectID":"b9f96ac1c15730097b7736a9cb740fee","permalink":"https://shrysr.github.io/post/5fc69e19-e330-4dd9-9317-7280a9c93966/","publishdate":"2019-01-19T19:37:00-07:00","relpermalink":"/post/5fc69e19-e330-4dd9-9317-7280a9c93966/","section":"post","summary":"Whiplash: Wikipedia\nWhiplash is a fascinating movie on many levels regarding a topic that interests me deeply\u0026hellip; How to progressively perform, and strive to become the very best in a chosen field. Personally, I found each step of the movie riveting and would recommend it to anybody who would find the above question even mildly interesting. The movie\u0026rsquo;s climax was immensely interesting, inspiring and supported by great acting. At any rate, the movie induced a blog post !","tags":["Movie-notes","excellence"],"title":"Notes from the movie Whiplash","type":"post"},{"authors":null,"categories":["Emacs"],"content":"I like to have any reading material and my notes side by side1. This is easily done with Emacs by splitting the buffer vertically (C-x 3)2\nFor example: Once a link has been opened via w3m, I hit org-capture (C-c) with a preset template that grabs the URL to the article along with the created date in the properties, with the cursor in position ready to take notes.\n(setq org-capture-templates \u0026#39;((\u0026#34;l\u0026#34; \u0026#34;Link + notes\u0026#34; entry (file+headline \u0026#34;~/my_org/link_database.org\u0026#34; \u0026#34;.UL Unfiled Links\u0026#34;) \u0026#34;** %? %a \u0026#34;))) The snippet above is activated by the command \u0026lsquo;l\u0026rsquo; and is listed with the title Link + notes in the agenda. It captures the link of the file being viewed as the heading and allows further notes to be inserted below. This is stored into the file link_database and under the specified heading .UL Unfiled Links.\nIt is also possible to capture a highlighted chunk of text to be added under the heading mentioned above. That would look something like:\n(setq org-capture-templates \u0026#39;((\u0026#34;e\u0026#34; \u0026#34;Snippet + Notes\u0026#34; entry ;; \u0026#39;w\u0026#39; for \u0026#39;org-protocol\u0026#39; (file+headline \u0026#34;~/my_org/link_database.org\u0026#34; \u0026#34;.UL Unfiled Links\u0026#34;) \u0026#34;*** %a, %T\\n %:initial\u0026#34;))) Now I have the capture buffer and the viewing content side by side, by calling C-c l. I can browse through the article use the mark-paragraph function (conveniently set to M-h) can be used to select and copy (M-w) entire paragraphs or alternately use C-spc to select lines of interest from the article them to the kill ring. The figure below depicts how it looks for me:\n Emacs content capture and buffer split   It is now possible to continue highlighting interesting lines / paragraphs and copy them, which adds them to the kill-ring. Once the article is done with, I switch over to the capture buffer and hit M-x browse-kill-ring, which brings up a pop-up buffer with all the items in the kill-ring3. Once called, I can hit n to move to the next item, and hit \u0026lsquo;i\u0026rsquo; to insert the current item at the cursor location. It is also possible to append / prepend/ edit the item before yanking. All the available shortcuts can be found using \u0026lsquo;?\u0026rsquo;, while in the browse-kill-ring buffer.\nThe above methodology curiously enables me to ensure capturing atleast some details of interest from an article / source, and also serve as a quick revision of the read content before filing it away.\nOne issue with the above workflow is that while reading multiple articles, there is a chance of mixing up the content being captured from different articles. This could be solved by using \u0026lsquo;x\u0026rsquo; in order to pop items out of the kill ring in the selection process above. However, it seems excessive to clear the entire kill ring for each article read. On the other hand, it could promote a focused workflow.\nAdditional possibilities:\n To view pdf files side by side and capture notes is via the Interleave package. The org-web-clipper concept outlined here is also very convenient to rapidly capture entire webpages being browsed in w3m.  Further reading:\n Howard Abrams has some great tips on customising the org-capture mechanism, Bernt Hansen\u0026rsquo;s comprehensive documentation.   Sometimes, this procedure has to be set specifically. Some good discussions on SO : link1, link2. However, at times horizontal splitting is useful. Therefore, I would rather not set a 0 width-threshold enabling only vertical splitting. lisp (setq split-width-threshold 75) (setq split-height-threshold nil)\r^ C-x essentially means Control + x. M-x or Meta-x is Alt + x\r^ The browse-kill-ring package can be installed via MELPA. (M-x install package)\r^   ","date":1548452700,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548452744,"objectID":"98b5e4f4b4998b7115b9f77793c9df2b","permalink":"https://shrysr.github.io/post/2d1b3227-28de-4b30-93c8-ad5cbe276e44/","publishdate":"2019-01-25T14:45:00-07:00","relpermalink":"/post/2d1b3227-28de-4b30-93c8-ad5cbe276e44/","section":"post","summary":"I like to have any reading material and my notes side by side1. This is easily done with Emacs by splitting the buffer vertically (C-x 3)2\nFor example: Once a link has been opened via w3m, I hit org-capture (C-c) with a preset template that grabs the URL to the article along with the created date in the properties, with the cursor in position ready to take notes.\n(setq org-capture-templates \u0026#39;((\u0026#34;l\u0026#34; \u0026#34;Link + notes\u0026#34; entry (file+headline \u0026#34;~/my_org/link_database.","tags":["Emacs"],"title":"Emacs notes: Select paragraph and browse-kill-ring for effective content capture","type":"post"},{"authors":null,"categories":["Emacs","Productivity"],"content":"Before my foray into Emacs, I purchased applications like IAWriter (classic)1, Marked2, Texts (cross platform Mac/Windows), and have also tried almost all the recommended apps for longer form writing. I am a fan of zen writing apps. In particular the font and environment provided by IAWriter are conducive to focused writing. There also exist apps like Hemingway that also help check the quality of your writing.\nZen writing apps are called so because they have a unique combination of fonts, background color, including line spacing and overall text-width - all of which enable a streamlined and focused flow of words onto the screen. Any customisation required towards this end is possible in Emacs.\nThe Texts app has some nifty features (besides being cross platform), but the font and appearance is not as beautiful as IAWriter. Both IAWriter (classic) and Texts have minimal settings for further customisation. See the comparison below:\n Emacs (writeroom-mode + Iosevka font) || Texts (Sepia theme)    Emacs (writeroom-mode, Iosevka font) || IAWriter(Classic)   While everybody\u0026rsquo;s style and approach vary, there are many authors who swear by archaic text editors and tools that enable distraction free writing. One example is Tony Ballantyne\u0026rsquo;s post on writing tools, and several more examples are available in this blog post.\nThe next best thing to a clear retina display on a MacBook Pro, is a beautiful font face to take you through the day, enhancing the viewing pleasure and thus the motivation to work longer.\nIn Emacs, writeroom-mode and Emacs can be customised to mimic IAWriter. In this regard, the font Iosevka, is a great font to try. This old Emacs reddit has many more suggestions. One post described Iosevka as \u0026ldquo;it doesn\u0026rsquo;t look like much, but after a few hours it will be difficult to use any other font.\u0026rdquo; This is exactly what happened to me.\nThere\u0026rsquo;s still a lot of tweaking to be done with writeroom-mode, but this is certainly a workable result. My nascent configuration for writeroom-mode in emacs is as follows (munged off the internet!). It\u0026rsquo;s remarkable how much was achieved with a few lines of code!\n(with-eval-after-load \u0026#39;writeroom-mode (define-key writeroom-mode-map (kbd \u0026#34;C-s-,\u0026#34;) #\u0026#39;writeroom-decrease-width) (define-key writeroom-mode-map (kbd \u0026#34;C-s-.\u0026#34;) #\u0026#39;writeroom-increase-width) (define-key writeroom-mode-map (kbd \u0026#34;C-s-=\u0026#34;) #\u0026#39;writeroom-adjust-width)) (advice-add \u0026#39;text-scale-adjust :after #\u0026#39;visual-fill-column-adjust) The latest version of IAWriter has a truck load of features and advantages over over the Classic version. I did consider purchasing it, but Emacs won the day. Nevertheless, as a plain vanilla writing app - IAWriter offers much right out of the box.\r^   ","date":1547950920,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548452569,"objectID":"4609ad29370e465e8bfca11bdb12ee34","permalink":"https://shrysr.github.io/post/951004ce-add0-4e7e-b6e2-2932e0dee429/","publishdate":"2019-01-19T19:22:00-07:00","relpermalink":"/post/951004ce-add0-4e7e-b6e2-2932e0dee429/","section":"post","summary":"Before my foray into Emacs, I purchased applications like IAWriter (classic)1, Marked2, Texts (cross platform Mac/Windows), and have also tried almost all the recommended apps for longer form writing. I am a fan of zen writing apps. In particular the font and environment provided by IAWriter are conducive to focused writing. There also exist apps like Hemingway that also help check the quality of your writing.\nZen writing apps are called so because they have a unique combination of fonts, background color, including line spacing and overall text-width - all of which enable a streamlined and focused flow of words onto the screen.","tags":["Emacs","writing","font","Linux"],"title":"Iosevka - an awesome font for Emacs","type":"post"},{"authors":null,"categories":["Emacs","Productivity"],"content":"Discovered the glorious awesome lists today on Github. They are available through a simple search on github, and contain curated lists of resources of all kinds on a multitude of topics.\nAs one might expect, there is a lot of common ground between these lists, including topics and links.\nHow could one search for a keyword through all these repositories? I have always wanted search for particular keywords or code snippets in my Emacs configuration files, or in other files in a particular location. This is especially to verify if a bit of code or note is already available, in another location. Something that looks like this ;):\n Searching for \u0026lsquo;datascience\u0026rsquo; with emacs-helm-ag through a bunch of awesome-lists and other local repositories.   An answer had been available in Howard\u0026rsquo;s cool blog post on why one should learn Emacs - in a footnote (!), in which he\u0026rsquo;s mentioned ack and ag (the silver searcher).\u0026nbsp;1. It is even possible to edit in line with each search.\nThe silver searcher github page provides clear examples of how it\u0026rsquo;s significantly faster than ack (and similar tools). Further exploration led me to the emacs-helm-ag package, which is a helm interface to the silver searcher. Implementing emacs-helm-ag was as simple as adding it to my list of packages, and adding a basic setup to my helm configuration.[^fn:2]\nAs of now, I add packages to Scimax using this bit of code that I\u0026rsquo;ve obviously borrowed from the internet, and this case - I\u0026rsquo;m afraid I did not note the source.\n;; Setting up use packages ;; list the packages you want (setq package-list \u0026#39;(diminish org-journal google-this ztree org-gcal w3m org-trello org-web-tools ox-hugo auto-indent-mode ob-sql-mode dash org-super-agenda ox-hugo workgroups2 switch-window ess ess-R-data-view interleave deft org-bookmark-heading writeroom-mode evil evil-leader polymode helm-ag)) ;;fetch the list of packages available (unless package-archive-contents (package-refresh-contents)) ;; install the missing packages (dolist (package package-list) (unless (package-installed-p package) (package-install package))) ;; Remember to start helm-ag. As per the Silver searcher github site, the helm-follow-mode-persistent has to be set before calling helm-ag. (custom-set-variables \u0026#39;(helm-follow-mode-persistent t)) (require \u0026#39;helm-ag) This is how it looks in action \u0026gt;\u0026gt; Sweet !!\n Notice the search across multiple files. So I\u0026rsquo;ve called require org capture perhaps more times than necessary.   [^fn:2]:\n This is my first animated gif in a blog post! It was tricky! I used the free GIPHY capture app on the Mac store.\r^   ","date":1548452280,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548452518,"objectID":"e8f6607cd25cb050be8d81b299f356d9","permalink":"https://shrysr.github.io/post/03133c10-709e-4d06-9f3d-c00ffeae64a7/","publishdate":"2019-01-25T14:38:00-07:00","relpermalink":"/post/03133c10-709e-4d06-9f3d-c00ffeae64a7/","section":"post","summary":"Discovered the glorious awesome lists today on Github. They are available through a simple search on github, and contain curated lists of resources of all kinds on a multitude of topics.\nAs one might expect, there is a lot of common ground between these lists, including topics and links.\nHow could one search for a keyword through all these repositories? I have always wanted search for particular keywords or code snippets in my Emacs configuration files, or in other files in a particular location.","tags":["Emacs"],"title":"Searching the awesome-lists on Github","type":"post"},{"authors":null,"categories":["Emacs","Productivity"],"content":"I\u0026rsquo;m an admirer of Howard Abrams, especially because his posts and videos show the awesome power of doing things in Emacs, and the importance of writing clean and logical code. Watching his videos and reading his posts make me feel like I was born yesterday and I am just getting started. But more importantly, they also fire up my imagination regarding the possibilities out there and the potential to create glorious workflows.\nHoward\u0026rsquo;s tutorial on Literate Programming, combined with his Literate Devops with Emacs video are among the best ways to get started with understanding the power of using Org Mode and Org-Babel to create complex, inter-connected, multi-language programs / documents / research that are of course well documented (this being one basic tenet of literate programming). Essentially, Org Mode and Org-Babel enable a high quality programming environment in a single Org mode buffer or document. The said environment is significantly more feature rich compared to Jupyter notebooks, especially being supported by it\u0026rsquo;s foundation in Emacs.\nThough I\u0026rsquo;ve been using Org files for a while now for all my programming explorations, I\u0026rsquo;ve been bothered about my sub-par workflows. I could not easily reference other code blocks and snippets and recipes for a new document or project. It was inefficient and time consuming to locate the necessary snippet and re-write or re-paste the code in the new source blocks. I was not making much progress plodding through the vast documentation of org-babel.\nTherefore, I was thrilled to discover the Library of Babel through Howard\u0026rsquo;s tutorial, which can be used to add files to a global library that is accessible from anywhere! Did I mention that it involves hitting barely 3 keys, and any number of arguments can be passed to these source blocks? I\u0026rsquo;m not sure such a feature is available with any other IDE.\nIn addition, the above tutorial clearly elucidates how different languages can be combined together, and the video elucidates typical Devops procedures, which are easily taken care of with appropriate arguments and headers to the source code blocks. For example, all the source code blocks could be tangled into appropriately named and located script files using a single argument. These tutorials tied up bits and pieces of info in my head from various sources and was invaluable in enhancing my understanding of using Emacs and Org-Babel\nThe Library of Babel can be made persistent across sessions by loading a specified org-file from which the named source code blocks are automatically read in. It is surprising that the internet does not seem to contain more references and examples using the Library of Babel. Perhaps there are some caveats that I am yet to encounter. One question that arises is whether the Library of Babel is automatically updated when the source code block is updated.\n","date":1547951100,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547951157,"objectID":"24dc122c5526a5e7387e25c70c388d73","permalink":"https://shrysr.github.io/post/6953c104-a8b3-4779-aad3-c33032beb111/","publishdate":"2019-01-19T19:25:00-07:00","relpermalink":"/post/6953c104-a8b3-4779-aad3-c33032beb111/","section":"post","summary":"I\u0026rsquo;m an admirer of Howard Abrams, especially because his posts and videos show the awesome power of doing things in Emacs, and the importance of writing clean and logical code. Watching his videos and reading his posts make me feel like I was born yesterday and I am just getting started. But more importantly, they also fire up my imagination regarding the possibilities out there and the potential to create glorious workflows.","tags":["Emacs"],"title":"Literate Programming - Emacs, Howard Abrams and Library of Babel","type":"post"},{"authors":null,"categories":["Emacs"],"content":" Introduction This is my literate, Org-mode based configuration for Emacs, which are essentially customisations built on top of the starter-kit Scimax. View a nicely rendered version with easy navigation on my website, or if you prefer: on github.\n Scimax - Awesome editing for scientists and engineers. Scimax is an Emacs starterkit for scientists and engineers. It provides a comprehensive configuration of Emacs for scientific programming and publishing.\nJohn Kitchin\n Scimax specific variables have their own heading to make it \u0026lsquo;easier\u0026rsquo; to experiment with other starter-kits.\nThe style of documentation is particularly influenced by the dotemacs config of Mathieu Marques, which I found very engaging to read.\n Note: The configuration posted on my website and github repo are updated from time to time, and may be older than the version I am using everyday.\n This configuration Scimax\u0026rsquo;s init calls the user.el script placed in the user folder. The following snippet is placed in user.el to load this org file and then my encrypted personal configuration. This org file and the tangled emacs-lisp script is also available in a github repo.\n;; Adding some external packages like reveal for presentations (add-to-list \u0026#39;load-path \u0026#34;~/scimax/user/external_packages/\u0026#34;) ;; Loading this file that you are viewing, which I name sr-config.org (org-babel-load-file (expand-file-name \u0026#34;sr-config.org\u0026#34; user-emacs-directory)) ;; Loading secret config containing personal information (org-babel-load-file (expand-file-name \u0026#34;sr-secrets.org.gpg\u0026#34; user-emacs-directory)) (garbage-collect) TODO Using this configuration You may need to set :tangle no in the headers for the code snippets that you do not need, and set the location of directories for org files, org agenda etc.\n Method 1\n Clone Scimax Add the above snippet to user.el in the user directory. Update the file name and paths as required. Place this org file in the user directory. Run the provided script for installing the packages needed for Scimax. Once that is done, user.el will call this org file.   Other literate Emacs configs These references were used for exploration and inspiration.\n Karl Voit Mathieu Marques Lee Hinman Sacha Chua  TODO Tangle org mode config on save  Note taken on [2019-02-14 Thu 13:14]  Need to add a condition of check: tangle if the file does not exist.  Source: https://thewanderingcoder.com/2015/02/literate-emacs-configuration/\nThis is a nice code snippet to automate the tangling on saving the config. This saves time while starting up Emacs\u0026hellip;\n(defun sr/tangle-on-save-emacs-config-org-file() (interactive) (if (string= buffer-file-name (file-truename \u0026#34;~/scimax/user/sr-config.org\u0026#34;)) (org-babel-tangle-file \u0026#34;~/scimax/user/sr-config.org\u0026#34; \u0026#34;~/scimax/user/sr-config.el\u0026#34;) ) ) (defun sr/tangle-if-file-absent () (interactive) (if nil (file-exists-p \u0026#34;~/scimax/user/sr-config.el\u0026#34;) (org-babel-tangle-file \u0026#34;~/scimax/user/sr-config.org\u0026#34; \u0026#34;~/scimax/user/sr-config.el\u0026#34;) ) ) ;; (add-hook \u0026#39;after-save-hook \u0026#39;sr/dotemacs-export) (add-hook \u0026#39;after-save-hook \u0026#39;sr/tangle-on-save-emacs-config-org-file) OS Level variables [0/0] Since I switch between a Linux machine and a Mac frequently, it is better to define variables that can be used to set other variables depending on the OS.\n;; Get current system\u0026#39;s name (defun insert-system-name() (interactive) \u0026#34;Get current system\u0026#39;s name\u0026#34; (insert (format \u0026#34;%s\u0026#34; system-name)) ) ;; Get current system type (defun insert-system-type() (interactive) \u0026#34;Get current system type\u0026#34; (insert (format \u0026#34;%s\u0026#34; system-type)) ) ;; Check if system is Darwin/Mac OS X (defun system-type-is-darwin () (interactive) \u0026#34;Return true if system is darwin-based (Mac OS X)\u0026#34; (string-equal system-type \u0026#34;darwin\u0026#34;) ) ;; Check if system is GNU/Linux (defun system-type-is-gnu () (interactive) \u0026#34;Return true if system is GNU/Linux-based\u0026#34; (string-equal system-type \u0026#34;gnu/linux\u0026#34;) ) (message \u0026#34;Completed OS Level variables load\u0026#34;) Better defaults I need to explore the changed made by this package. For now, it is loaded right in the beginning so that it does not overwrite other customisations down the line.\n(use-package better-defaults :ensure t ) (message \u0026#34;Loaded better-defaults package\u0026#34;) Crypto setup (setq epa-file-encrypt-to \u0026#39;(\u0026#34;shreyas@fastmail.com\u0026#34;)) (require \u0026#39;org-crypt) (add-to-list \u0026#39;org-modules \u0026#39;org-crypt) ; Encrypt all entries before saving (org-crypt-use-before-save-magic) (setq org-tags-exclude-from-inheritance (quote (\u0026#34;crypt\u0026#34;))) ; GPG key to use for encryption. nil for symmetric encryption (setq org-crypt-key nil) (setq org-crypt-disable-auto-save t) (setq org-crypt-tag-matcher \u0026#34;locked\u0026#34;) (message \u0026#34;Loaded crypto setup\u0026#34;) github token access Source: https://emacs.stackexchange.com/questions/40994/using-auth-source-with-magit-and-bitbucket\nFill the out the following details before executing the script.\ncat \u0026gt; ~/.gh.authinfo \u0026lt;\u0026lt; EOF machine shrysr@github.com password ABCD EOF M-x epa-encrypt-file and point towards the above file and choose your key. This will generate the .gpg file.\n(setq auth-sources \u0026#39;((:source \u0026#34;~/.gh.authinfo.gpg\u0026#34;))) (setq magit-process-find-password-functions \u0026#39;(magit-process-password-auth-source)) Emacs General config Remove trailing whitespace at the end of lines (add-hook \u0026#39;before-save-hook \u0026#39;delete-trailing-whitespace) Remove \u0026lsquo;^\u0026rsquo; at the start of ivy commands (setq ivy-initial-inputs-alist nil) Package installation Package list Though the use-package approach is a lot more elegant, I also like to have a list of all my installed packages. In any case, this is more in line with my earlier configurations. As things evolve, I will probably shift to the use-package method.\n(setq package-list \u0026#39;(diminish ztree org-gcal w3m org-trello org-web-tools auto-indent-mode ob-sql-mode dash org-super-agenda workgroups2 switch-window ess ess-R-data-view interleave deft org-bookmark-heading writeroom-mode evil evil-leader polymode poly-R helm-ag writegood-mode artbollocks-mode multiple-cursors ox-reveal better-defaults jedi jedi-core ag ein ein-mumamo ido-vertical-mode company-jedi conda spacemacs-theme elfeed-goodies helpful browse-kill-ring ivy-yasnippet speed-type clojure-mode cider helm-dash org-projectile bash-completion elmacro helm-org-rifle sx define-word)) Fetch and install missing packages ;;fetch the list of packages available (unless package-archive-contents (package-refresh-contents)) ;; install the missing packages (dolist (package package-list) (unless (package-installed-p package) (package-install package))) Switch-window configuration Source link: https://github.com/dimitri/switch-window\n(use-package switch-window :config ;; (require \u0026#39;switch-window) (global-set-key (kbd \u0026#34;C-x o\u0026#34;) \u0026#39;switch-window) (global-set-key (kbd \u0026#34;C-x 1\u0026#34;) \u0026#39;switch-window-then-maximize) (global-set-key (kbd \u0026#34;C-x 2\u0026#34;) \u0026#39;switch-window-then-split-below) (global-set-key (kbd \u0026#34;C-x 3\u0026#34;) \u0026#39;switch-window-then-split-right) (global-set-key (kbd \u0026#34;C-x 0\u0026#34;) \u0026#39;switch-window-then-delete) (global-set-key (kbd \u0026#34;C-x 4 d\u0026#34;) \u0026#39;switch-window-then-dired) (global-set-key (kbd \u0026#34;C-x 4 f\u0026#34;) \u0026#39;switch-window-then-find-file) (global-set-key (kbd \u0026#34;C-x 4 m\u0026#34;) \u0026#39;switch-window-then-compose-mail) (global-set-key (kbd \u0026#34;C-x 4 r\u0026#34;) \u0026#39;switch-window-then-find-file-read-only) (global-set-key (kbd \u0026#34;C-x 4 C-f\u0026#34;) \u0026#39;switch-window-then-find-file) (global-set-key (kbd \u0026#34;C-x 4 C-o\u0026#34;) \u0026#39;switch-window-then-display-buffer) (global-set-key (kbd \u0026#34;C-x 4 0\u0026#34;) \u0026#39;switch-window-then-kill-buffer) ;; selecting minibuffer (setq switch-window-minibuffer-shortcut ?z) ) Create intermediate directories while saving files Source: https://superuser.com/questions/131538/can-i-create-directories-that-dont-exist-while-creating-a-new-file-in-emacs\n(defadvice find-file (before make-directory-maybe (filename \u0026amp;optional wildcards) activate) \u0026#34;Create parent directory if not exists while visiting file.\u0026#34; (unless (file-exists-p filename) (let ((dir (file-name-directory filename))) (unless (file-exists-p dir) (make-directory dir))))) Shorcuts and registers Registers (set-register ?n (cons \u0026#39;file \u0026#34;~/my_org/notes.org\u0026#34;)) (set-register ?l (cons \u0026#39;file \u0026#34;~/application_letters/letter.md\u0026#34;)) (set-register ?k (cons \u0026#39;file \u0026#34;~/application_letters/Cover_letter_Shreyas_R.pdf\u0026#34;)) (set-register ?p (cons \u0026#39;file \u0026#34;~/org_cv/CV_Shreyas_Ragavan.pdf\u0026#34;)) (set-register ?r (cons \u0026#39;file \u0026#34;~/org_cv/CV_Shreyas_Ragavan.org\u0026#34;)) (set-register ?t (cons \u0026#39;file \u0026#34;~/my_org/todo-global.org\u0026#34;)) (set-register ?i (cons \u0026#39;file \u0026#34;~/dotemacs/.emacs.d/new-init.org\u0026#34;)) (set-register ?j (cons \u0026#39;file \u0026#34;~/my_org/mrps_canjs.org\u0026#34;)) (set-register ?f (cons \u0026#39;file \u0026#34;~/scimax/user/sr-cust/\u0026#34;)) (set-register ?d (cons \u0026#39;file \u0026#34;~/my_org/datascience.org\u0026#34;)) (set-register ?m (cons \u0026#39;file \u0026#34;~/my_org/\u0026#34;)) (set-register ?g (cons \u0026#39;file \u0026#34;~/my_gits/\u0026#34;)) Google this (global-set-key (kbd \u0026#34;M-s g\u0026#34;) \u0026#39;google-this-mode-submap) ivy-yasnippet (global-set-key (kbd \u0026#34;M-i\u0026#34;) \u0026#39;ivy-yasnippet) Mu4e related (global-set-key (kbd \u0026#34;M-s u\u0026#34;) \u0026#39;mu4e-update-mail-and-index) (global-set-key (kbd \u0026#34;M-s m\u0026#34;) \u0026#39;mu4e~headers-jump-to-maildir) (global-set-key (kbd \u0026#34;C-x m\u0026#34;) \u0026#39;mu4e-compose-new) Org related (global-set-key (kbd \u0026#34;C-x t\u0026#34;) \u0026#39;org-insert-todo-heading) (global-set-key (kbd \u0026#34;C-c d\u0026#34;) \u0026#39;org-time-stamp) (global-set-key (kbd \u0026#34;M-s s\u0026#34;) \u0026#39;org-save-all-org-buffers) (global-set-key (kbd \u0026#34;M-s j\u0026#34;) \u0026#39;org-journal-new-entry) yanking links in org format Source: sacha chua.\nEnables inserting a URL into an org document as \u0026lsquo;[][link]\u0026rsquo; by tapping F6 after copying the URL. This is useful to reduce clutter with long links, and even include links in headings.\n(defun my/yank-more () (interactive) (insert \u0026#34;[[\u0026#34;) (yank) (insert \u0026#34;][link]]\u0026#34;)) (global-set-key (kbd \u0026#34;\u0026lt;f6\u0026gt;\u0026#34;) \u0026#39;my/yank-more) Export setup (require \u0026#39;ox-org) (require \u0026#39;ox-word) (require \u0026#39;ox-md) Markdown config Setting pandoc as the markdown command for live previews. The default command is markdown, which could be installed as a separate package.\n(setq markdown-command \u0026#34;pandoc\u0026#34;) TEST Export async  Note taken on [2019-02-14 Thu 16:03]  This requires a separate init file to be setup that enables Emacs to launch a separate process to export large files. It would be better as a vanilla emacs file.  (setq org-export-async-init-file (expand-file-name \u0026#34;async-export.el\u0026#34; user-emacs-directory) ) TEST Ob-async  Note taken on [2019-02-14 Thu 16:02]  This should enable evaluating code in org babel source blocks asynchronously. The header in the source block should have the async enabled.  (use-package ob-async :ensure t ) Completed loading message (message \u0026#34;Loaded Emacs general config\u0026#34;) TODO Crux - basic movement Source: https://jamiecollinson.com/blog/my-emacs-config/ Contains functions from Prelude. I should check this out in more detail.\nSet C-a to move to the first non-whitespace character on a line, and then to toggle between that and the beginning of the line.\n(use-package crux :ensure t :bind ((\u0026#34;C-a\u0026#34; . crux-move-beginning-of-line))) Dired Source: https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org\n(use-package dired :ensure nil :delight dired-mode \u0026#34;Dired\u0026#34; :preface (defun me/dired-directories-first () \u0026#34;Sort dired listings with directories first before adding marks.\u0026#34; (save-excursion (let (buffer-read-only) (forward-line 2) (sort-regexp-fields t \u0026#34;^.*$\u0026#34; \u0026#34;[ ]*.\u0026#34; (point) (point-max))) (set-buffer-modified-p nil))) ;:hook ;(dired-mode . dired-hide-details-mode) :config (advice-add \u0026#39;dired-readin :after #\u0026#39;me/dired-directories-first) (setq-default dired-auto-revert-buffer t dired-dwim-target t dired-hide-details-hide-symlink-targets nil dired-listing-switches \u0026#34;-alh\u0026#34; dired-ls-F-marks-symlinks nil dired-recursive-copies \u0026#39;always)) (use-package dired-x :ensure nil :preface (defun me/dired-revert-after-command (command \u0026amp;optional output error) (revert-buffer)) :config (advice-add \u0026#39;dired-smart-shell-command :after #\u0026#39;me/dired-revert-after-command)) (message \u0026#34;Loaded Dired customisation\u0026#34;) Swiper  Note taken on [2019-02-07 Thu 16:50]  I use swiper for a general search. However helm-swoop is awesome.  (global-set-key (kbd \u0026#34;C-s\u0026#34;) \u0026#39;swiper) (setq ivy-display-style \u0026#39;fancy) ;; advise swiper to recenter on exit (defun bjm-swiper-recenter (\u0026amp;rest args) \u0026#34;recenter display after swiper\u0026#34; (recenter) ) (advice-add \u0026#39;swiper :after #\u0026#39;bjm-swiper-recenter) (message \u0026#34;Loaded Swiper customisation\u0026#34;) Easier selection TODO Expand region  Note taken on [2019-02-07 Thu 09:27]  Explore how this works  (use-package expand-region :ensure t :bind (\u0026#34;C-=\u0026#34; . er/expand-region)) (message \u0026#34;Loaded easier selection\u0026#34;) git related TODO Git gutter  Note taken on [2019-02-07 Thu 09:30]  Started using this today. It is actually very convenient to quickly view the changes made in the document. There is a function to pop up the changes at that location. I need to learn more about using this tool effectively.  (use-package git-gutter :ensure t :config (global-git-gutter-mode \u0026#39;t) :diminish git-gutter-mode) magit settings (setq magit-revert-buffers \u0026#39;silent) TODO Time machine for git  Note taken on [2019-02-08 Fri 13:21]  Launched by M-x git-timemachine, this lets you navigate through the commit history with a single key press! This is especially awesome for tracking changes to a particular snippet of code. Note taken on [2019-02-07 Thu 09:30]  Need to evaluate this. The purpose is for stepping through the history of a file recorded in git. This should be very interesting.  (use-package git-timemachine :ensure t) Completed loading message (message \u0026#34;Loaded git related config\u0026#34;) Writeroom customisations The goal is to enable a customised zen writing mode, especially facilitating blog posts and other longer forms of writing. As of now, there are customisations for the width, and calling the art-bollocks mode when writeroom mode is enabled.\n(with-eval-after-load \u0026#39;writeroom-mode (define-key writeroom-mode-map (kbd \u0026#34;C-s-,\u0026#34;) #\u0026#39;writeroom-decrease-width) (define-key writeroom-mode-map (kbd \u0026#34;C-s-.\u0026#34;) #\u0026#39;writeroom-increase-width) (define-key writeroom-mode-map (kbd \u0026#34;C-s-=\u0026#34;) #\u0026#39;writeroom-adjust-width)) (advice-add \u0026#39;text-scale-adjust :after #\u0026#39;visual-fill-column-adjust) ;; loading artbollocks whenever the writeroom mode is called in particular. (autoload \u0026#39;artbollocks-mode \u0026#34;artbollocks-mode\u0026#34;) (add-hook \u0026#39;writeroom-mode-hook \u0026#39;artbollocks-mode) (message \u0026#34;Loaded writeroom customisations\u0026#34;) ESS configuration [/]  Note taken on [2019-02-09 Sat 12:36]  Set this up with use-package and explore further customisations. As of now, I use yasnippet to insert commonly used operators like the assign and pipe operators.  ;; Setting up emacs ess and polymode (require \u0026#39;ess) (require \u0026#39;ess-R-data-view) (setq ess-describe-at-point-method \u0026#39;tooltip) (setq ess-switch-to-end-of-proc-buffer t) (require \u0026#39;ess-rutils) (setq ess-rutils-keys +1) (setq ess-eval-visibly \u0026#39;nowait) (setq ess-use-flymake nil) (setq ess-use-eldoc t) (use-package ess-view :ensure t :config (if (system-type-is-darwin) (setq ess-view--spreadsheet-program \u0026#34;/Applications/Tad.app/Contents/MacOS/Tad\u0026#34;) ) ) (message \u0026#34;Loaded ESS configuration\u0026#34;) TODO Set condition and path for TAD on Linux TODO lintr  Note taken on [2019-02-11 Mon 07:21]  It appears there is no package called lintr. This needs further investigation.  This package is deemed necessary to enable flymake in ESS. Without it, there is significantly more lag while the suggestions / corrections are generated in ESS modes.\n(use-package lintr :ensure nil ) Polymode (require \u0026#39;poly-markdown) (require \u0026#39;poly-R) ;; MARKDOWN (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.md\u0026#34; . poly-markdown-mode)) ;; R modes (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.Snw\u0026#34; . poly-noweb+r-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.Rnw\u0026#34; . poly-noweb+r-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.Rmd\u0026#34; . poly-markdown+r-mode)) (message \u0026#34;Loaded polymode configuration\u0026#34;) Multiple Cursors (use-package multiple-cursors :ensure t :config (global-set-key (kbd \u0026#34;C-S-c C-S-c\u0026#34;) \u0026#39;mc/edit-lines) (global-set-key (kbd \u0026#34;C-\u0026gt;\u0026#34;) \u0026#39;mc/mark-next-like-this) (global-set-key (kbd \u0026#34;C-\u0026lt;\u0026#34;) \u0026#39;mc/mark-previous-like-this) (global-set-key (kbd \u0026#34;C-c C-\u0026lt;\u0026#34;) \u0026#39;mc/mark-all-like-this) ) (message \u0026#34;Loaded MC\u0026#34;) ox-reveal - presentations (use-package ox-reveal :ensure ox-reveal :defer t :config (setq org-reveal-root \u0026#34;http://cdn.jsdelivr.net/reveal.js/3.0.0/\u0026#34;) (setq org-reveal-mathjax t) ) (use-package htmlize :ensure t) (message \u0026#34;Loaded ox-reveal cust\u0026#34;) Org-mode related Default org directory and setting it as the agenda file directory (setq org-directory \u0026#34;~/my_org/\u0026#34; org-agenda-files \u0026#39;(\u0026#34;~/my_org/\u0026#34;) ) Org-notes into log drawer I\u0026rsquo;ve been inserting org notes into the body of the text, since I do not make extensive use of the log book in the agenda and prefer active time stamped notes and the org-journal and org-projectile to take down \u0026lsquo;linked\u0026rsquo; log notes. However, I would like the notes to be inserted after any properties drawers.\n(setq org-log-state-notes-insert-after-drawers t) (setq org-log-redeadline \u0026#39;time) TODO Enabling org capture and org protocol  Note taken on [2019-02-07 Thu 08:55]  Need to actually get org-capture via external browser protocol working. Not sure if I need to require org-capture in scimax.  Source: http://www.diegoberrocal.com/blog/2015/08/19/org-protocol/\n(require \u0026#39;org-capture) (require \u0026#39;org-protocol) TODO Ensuring archive files are also in org mode  Note taken on [2019-02-07 Thu 08:31]  check whether the add-to-list function is sufficient.  (add-hook \u0026#39;find-file-hooks (lambda () (let ((file (buffer-file-name))) (when (and file (equal (file-name-directory file) \u0026#34;~/my_org/archive/\u0026#34;)) (org-mode))))) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.org_archive\\\\\u0026#39;\u0026#34; . org-mode)) Archiving mechanics Archive organised by Top level headings in the original file and with Tag preservation\n(defun my-org-inherited-no-file-tags () (let ((tags (org-entry-get nil \u0026#34;ALLTAGS\u0026#34; \u0026#39;selective)) (ltags (org-entry-get nil \u0026#34;TAGS\u0026#34;))) (mapc (lambda (tag) (setq tags (replace-regexp-in-string (concat tag \u0026#34;:\u0026#34;) \u0026#34;\u0026#34; tags))) (append org-file-tags (when ltags (split-string ltags \u0026#34;:\u0026#34; t)))) (if (string= \u0026#34;:\u0026#34; tags) nil tags))) (defadvice org-archive-subtree (around my-org-archive-subtree-low-level activate) (let ((tags (my-org-inherited-no-file-tags)) (org-archive-location (if (save-excursion (org-back-to-heading) (\u0026gt; (org-outline-level) 1)) (concat (car (split-string org-archive-location \u0026#34;::\u0026#34;)) \u0026#34;::* \u0026#34; (car (org-get-outline-path))) org-archive-location))) ad-do-it (with-current-buffer (find-file-noselect (org-extract-archive-file)) (save-excursion (while (org-up-heading-safe)) (org-set-tags-to tags))))) Org journal (use-package org-journal :ensure t :defer t :custom (org-journal-dir \u0026#34;~/my_org/journal/\u0026#34;) (org-journal-file-format \u0026#34;%Y%m%d\u0026#34;) (org-journal-enable-agenda-integration t) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;.*/[0-9]*$\u0026#34; . org-mode)) ;; (org-journal-date-format \u0026#34;%A, %d %B %Y\u0026#34;) ;; (org-journal-enable-encryption \u0026#39;t) ) TODO Figure out easy encryption approach for org journal Use Org ID for storing objects Using the org id for reference to headings ensures that even if the heading changes, the links will still work.\n(setq org-id-method (quote uuidgen)) TODO Setting custom keywords with fast access  Note taken on [2019-02-12 Tue 12:19]  This requires a complete reload of org to come in effect.  (setq org-todo-keywords \u0026#39;((sequence \u0026#34;TODO(t)\u0026#34; \u0026#34;NEXT(n)\u0026#34; \u0026#34;CANCEL(c)\u0026#34; \u0026#34;POSTPONED(p)\u0026#34; \u0026#34;|\u0026#34; \u0026#34;DONE(d)\u0026#34; \u0026#34;STABLE(s)\u0026#34;) (sequence \u0026#34;TEST(T)\u0026#34; \u0026#34;BUG(b)\u0026#34; \u0026#34;KNOWNCAUSE(k)\u0026#34; \u0026#34;|\u0026#34; \u0026#34;FIXED(f)\u0026#34;) (sequence \u0026#34;|\u0026#34; ))) Cosmetics for org TODO Basic cosmetics. Review \u0026amp; Convert to use-package style  Note taken on [2019-02-07 Thu 08:20]  These settings have to be cleaned up and the code optimised.  (setq org-hide-leading-stars t) ;;(setq org-alphabetical-lists t) (setq org-src-fontify-natively t) ;; you want this to activate coloring in blocks (setq org-src-tab-acts-natively t) ;; you want this to have completion in blocks (setq org-hide-emphasis-markers t) ;; to hide the *,=, or / markers (setq org-pretty-entities t) ;; to have \\alpha, \\to and others display as utf8 http://orgmode.org/manual/Special-symbols.html ;; Highlighting lines in the agenda, where the cursor is placed. (add-hook \u0026#39;org-agenda-mode-hook (lambda () (hl-line-mode 1))) ;; Setting up clean indenting below respective headlines at startup. - from the org mode website (setq org-startup-indented t) ;; use org bullets from emacsist (use-package org-bullets :ensure t :init :config (add-hook \u0026#39;org-mode-hook (lambda () (org-bullets-mode 1)))) Setting font faces for headline level (custom-set-faces \u0026#39;(org-level-1 ((t (:inherit outline-1 :height 1.5)))) \u0026#39;(org-level-2 ((t (:inherit outline-2 :height 1.1)))) \u0026#39;(org-level-3 ((t (:inherit outline-3 :height 1.0)))) \u0026#39;(org-level-4 ((t (:inherit outline-4 :height 1.0)))) \u0026#39;(org-level-5 ((t (:inherit outline-5 :height 1.0)))) ) Striking out Done headlines source: Sacha Chua\n(setq org-fontify-done-headline t) (custom-set-faces \u0026#39;(org-done ((t (:foreground \u0026#34;PaleGreen\u0026#34; :weight normal :strike-through t)))) \u0026#39;(org-headline-done ((((class color) (min-colors 16) (background dark)) (:foreground \u0026#34;LightSalmon\u0026#34; :strike-through t))))) Formatting keywords as boxes with inverted colors Source : SO link ,\n(set-face-attribute \u0026#39;org-todo nil :box \u0026#39;(:line-width 2 :color \u0026#34;black\u0026#34; :style released-button) :inverse-video t ) (set-face-attribute \u0026#39;org-done nil :box \u0026#39;(:line-width 2 :color \u0026#34;black\u0026#34; :style released-button) :inverse-video t ) (set-face-attribute \u0026#39;org-priority nil :inherit font-lock-keyword-face :inverse-video t :box \u0026#39;(:line-width 2 :color \u0026#34;black\u0026#34; :style released-button) ) Refiling settings Refile target level for search (setq org-refile-targets \u0026#39;((nil :maxlevel . 4) (org-agenda-files :maxlevel . 4))) TODO General refile settings  Note taken on [2019-02-07 Thu 08:33]  Needs further review and optimisation  (setq org-refile-use-outline-path \u0026#39;file) (setq org-outline-path-complete-in-steps nil) (setq org-reverse-note-order t) (setq org-refile-allow-creating-parent-nodes \u0026#39;confirm) Also refer Refiling hydra Agenda mechanics Weekday starts on Monday (setq org-agenda-start-on-weekday 1) Display heading tags farther to the right (setq org-agenda-tags-column -150) TODO Agenda customisation  Note taken on [2019-02-07 Thu 08:26]  Need to clear up the search functions, enabling complete search in journal files. Archive and some external directories are included, since they are explictly in org mode.  (setq org-agenda-custom-commands \u0026#39;((\u0026#34;c\u0026#34; \u0026#34;Simple agenda view\u0026#34; ((tags \u0026#34;recurr\u0026#34; ((org-agenda-overriding-header \u0026#34;Recurring Tasks\u0026#34;))) (agenda \u0026#34;\u0026#34;) (todo \u0026#34;\u0026#34;))) (\u0026#34;o\u0026#34; agenda \u0026#34;Office mode\u0026#34; ((org-agenda-tag-filter-preset \u0026#39;(\u0026#34;-course\u0026#34; \u0026#34;-habit\u0026#34; \u0026#34;-someday\u0026#34; \u0026#34;-book\u0026#34; \u0026#34;-emacs\u0026#34;)))) (\u0026#34;qc\u0026#34; tags \u0026#34;+commandment\u0026#34;) (\u0026#34;e\u0026#34; tags \u0026#34;+org\u0026#34;) (\u0026#34;w\u0026#34; agenda \u0026#34;Today\u0026#34; ((org-agenda-tag-filter-preset \u0026#39;(\u0026#34;+work\u0026#34;)))) (\u0026#34;W\u0026#34; todo-tree \u0026#34;WAITING\u0026#34;) (\u0026#34;q\u0026#34; . \u0026#34;Custom queries\u0026#34;) ;; gives label to \u0026#34;q\u0026#34; (\u0026#34;d\u0026#34; . \u0026#34;ds related\u0026#34;)\t;; gives label to \u0026#34;d\u0026#34; (\u0026#34;ds\u0026#34; agenda \u0026#34;Datascience\u0026#34; ((org-agenda-tag-filter-preset \u0026#39;(\u0026#34;+datascience\u0026#34;)))) (\u0026#34;qw\u0026#34; agenda \u0026#34;MRPS\u0026#34; ((org-agenda-tag-filter-preset \u0026#39;(\u0026#34;+canjs\u0026#34;)))) (\u0026#34;qa\u0026#34; \u0026#34;Archive tags search\u0026#34; org-tags-view \u0026#34;\u0026#34; ((org-agenda-files (file-expand-wildcards \u0026#34;~/my_org/*.org*\u0026#34;)))) (\u0026#34;j\u0026#34; \u0026#34;Journal Search\u0026#34; search \u0026#34;\u0026#34; \u0026#39;\u0026#39;((org-agenda-text-search-extra-files (file-expand-wildcards \u0026#34;~/my_org/journal/\u0026#34;)))) (\u0026#34;S\u0026#34; search \u0026#34;\u0026#34; ((org-agenda-files \u0026#39;(\u0026#34;~/my_org/\u0026#34;)) (org-agenda-text-search-extra-files ))) ) ) Expanding search locations (setq org-agenda-text-search-extra-files (apply \u0026#39;append (mapcar (lambda (directory) (directory-files-recursively directory org-agenda-file-regexp)) \u0026#39;(\u0026#34;~/my_org/journal/\u0026#34; \u0026#34;~/my_org/zeeco_archive/\u0026#34; \u0026#34;~/my_projects/\u0026#34; ))))   TODO Adding org archive for text search. Optimise this  :CREATED: \u0026lt;2019-02-07 Thu 08:29\u0026gt;\n(setq org-agenda-text-search-extra-files \u0026#39;(agenda-archives))  Enable default fuzzy search like in google (setq org-agenda-search-view-always-boolean t) Enable sticky agenda Experimenting with this setting.\n(setq org-agenda-sticky t) DONE org-habit  Note taken on [2019-02-12 Tue 13:20]  Adding a require has brought org-habit back on track. Note taken on [2019-02-07 Thu 09:50]  Appears the use-package config for org-habit is not correct and there is some issue in downloading it as a package.  I want to shift the org habit graph in the agenda further out right so as to leave enough room for the headings to be visible.\n(require \u0026#39;org-habit) (setq org-habit-graph-column 90) TODO Capture mechanics  Note taken on [2019-02-07 Thu 08:24]  need to clean this up.  Capture templates (setq org-capture-templates \u0026#39;((\u0026#34;t\u0026#34; \u0026#34;Task entry\u0026#34;) (\u0026#34;tt\u0026#34; \u0026#34;Todo - Fast\u0026#34; entry (file+headline \u0026#34;~/my_org/todo-global.org\u0026#34; \u0026#34;--Inbox\u0026#34;) \u0026#34;** TODO %?\u0026#34;) (\u0026#34;tb\u0026#34; \u0026#34;Todo -BGR\u0026#34; entry (file+headline \u0026#34;~/my_org/bgr.org\u0026#34; \u0026#34;#BGR #Inbox\u0026#34;) \u0026#34;** TODO %?\u0026#34;) (\u0026#34;te\u0026#34; \u0026#34;Todo - Emacs\u0026#34; entry (file+headline \u0026#34;~/my_org/todo-global.org\u0026#34; \u0026#34;;Emacs stuff\u0026#34;) \u0026#34;** TODO %?\u0026#34;) (\u0026#34;tm\u0026#34; \u0026#34;Mail Link Todo\u0026#34; entry (file+headline \u0026#34;~/my_org/todo-global.org\u0026#34; \u0026#34;--Inbox\u0026#34;) \u0026#34;** TODO Mail: %a \u0026#34;) (\u0026#34;l\u0026#34; \u0026#34;Link/Snippet\u0026#34; entry (file+headline \u0026#34;~/my_org/link_database.org\u0026#34; \u0026#34;.UL Unfiled Links\u0026#34;) \u0026#34;** %? %a \u0026#34;) (\u0026#34;e\u0026#34; \u0026#34;Protocol info\u0026#34; entry ;; \u0026#39;w\u0026#39; for \u0026#39;org-protocol\u0026#39; (file+headline \u0026#34;~/my_org/link_database.org\u0026#34; \u0026#34;.UL Unfiled Links\u0026#34;) \u0026#34;*** %a, %T\\n %:initial\u0026#34;) (\u0026#34;n\u0026#34; \u0026#34;Notes\u0026#34;) (\u0026#34;ne\u0026#34; \u0026#34;Emacs note\u0026#34; entry (file+headline \u0026#34;~/my_org/todo-global.org\u0026#34; \u0026#34;;Emacs stuff\u0026#34;) \u0026#34;** %?\u0026#34;) (\u0026#34;nn\u0026#34; \u0026#34;General note\u0026#34; entry (file+headline \u0026#34;~/my_org/notes.org\u0026#34; \u0026#34;.NOTES\u0026#34;) \u0026#34;** %?\u0026#34;) (\u0026#34;n\u0026#34; \u0026#34;Note\u0026#34; entry (file+headline \u0026#34;~/my_org/notes.org\u0026#34; \u0026#34;.NOTES\u0026#34;) \u0026#34;** %?\u0026#34;) (\u0026#34;b\u0026#34; \u0026#34;BGR stuff\u0026#34;) (\u0026#34;bi\u0026#34; \u0026#34;Inventory project\u0026#34;) (\u0026#34;bil\u0026#34; \u0026#34;Daily log\u0026#34; entry (file+olp+datetree \u0026#34;~/my_org/bgr.org\u0026#34; \u0026#34;Inventory management Project\u0026#34;) \u0026#34;** %? %i\u0026#34;) (\u0026#34;C\u0026#34; \u0026#34;Commandment\u0026#34; entry (file+datetree \u0026#34;~/my_org/lifebook.org\u0026#34; \u0026#34;\u0026#34;) \u0026#34;** %? %i %T :commandment:\u0026#34;) (\u0026#34;c\u0026#34; \u0026#34;canjs\u0026#34; entry (file+headline \u0026#34;~/my_org/mrps_canjs.org\u0026#34; \u0026#34;MRPS #CANJS\u0026#34;) \u0026#34;** TODO %? %i %T\u0026#34;) (\u0026#34;r\u0026#34; \u0026#34;Self Reflection\u0026#34; entry (file+datetree \u0026#34;~/my_org/lifebook.org\u0026#34; \u0026#34;\u0026#34;) \u0026#34;b** %? %i %T :self_reflection:\u0026#34;) (\u0026#34;w\u0026#34; \u0026#34;Website\u0026#34; plain (function org-website-clipper) \u0026#34;* %a %T\\n\u0026#34; :immediate-finish t) (\u0026#34;j\u0026#34; \u0026#34;Journal Note\u0026#34; plain (function get-journal-file-today) \u0026#34;* Event: %?\\n\\n %i\\n\\n \u0026#34; :empty-lines 1) (\u0026#34;i\u0026#34; \u0026#34;Whole article capture\u0026#34; entry (file+headline \u0026#34;~/my_org/full_article_archive.org\u0026#34; \u0026#34;\u0026#34; :empty-lines 1) \u0026#34;** %a, %T\\n %:initial\u0026#34; :empty-lines 1) (\u0026#34;d\u0026#34; \u0026#34;Datascience stuff\u0026#34;) (\u0026#34;dt\u0026#34; \u0026#34;Datascience inbox\u0026#34; entry (file+headline \u0026#34;~/my_org/datascience.org\u0026#34; \u0026#34;@Datascience @Inbox\u0026#34;) \u0026#34;** TODO %? %T\u0026#34;) (\u0026#34;dn\u0026#34; \u0026#34;Datascience note\u0026#34; entry (file+headline \u0026#34;~/my_org/datascience.org\u0026#34; \u0026#34;@Datascience @Notes\u0026#34;) \u0026#34;** %? %T\u0026#34;) )) TODO Hooks for capture frame control  Note taken on [2019-02-07 Thu 08:53]  Needs further review.  Source: http://stackoverflow.com/questions/23517372/hook-or-advice-when-aborting-org-capture-before-template-selection\n(defadvice org-capture (after make-full-window-frame activate) \u0026#34;Advise capture to be the only window when used as a popup\u0026#34; (if (equal \u0026#34;emacs-capture\u0026#34; (frame-parameter nil \u0026#39;name)) (delete-other-windows))) (defadvice org-capture-finalize (after delete-capture-frame activate) \u0026#34;Advise capture-finalize to close the frame\u0026#34; (if (equal \u0026#34;emacs-capture\u0026#34; (frame-parameter nil \u0026#39;name)) (delete-frame))) TODO version control and backup of files  Note taken on [2019-02-07 Thu 08:15]  Need to check out how this works and whether this is still necessary, since I am using Git.  (setq delete-old-versions -1) (setq version-control t) Include gpg files in agenda generation Source: https://emacs.stackexchange.com/questions/36542/include-org-gpg-files-in-org-agenda\n(unless (string-match-p \u0026#34;\\\\.gpg\u0026#34; org-agenda-file-regexp) (setq org-agenda-file-regexp (replace-regexp-in-string \u0026#34;\\\\\\\\\\\\.org\u0026#34; \u0026#34;\\\\\\\\.org\\\\\\\\(\\\\\\\\.gpg\\\\\\\\)?\u0026#34; org-agenda-file-regexp))) org-noter  Org-noter’s purpose is to let you create notes that are kept in sync when you scroll through the document, but that are external to it - the notes themselves live in an Org-mode file. As such, this leverages the power of Org-mode (the notes may have outlines, latex fragments, babel, etc…) while acting like notes that are made inside the document. Also, taking notes is very simple: just press i and annotate away!\nGonçalo Santos\n (use-package org-noter :ensure t :defer t :config (setq org-noter-set-auto-save-last-location t) ) TODO Persp-projectile Refer Howard\u0026rsquo;s config snippet to setup a test.\nTODO org-projectile  Note taken on [2019-02-07 Thu 08:42]  need to optimise further and convert to use-package style. Also need a way to capture Notes from projects, in addition to tasks.  Starting off with the basic configuration posted in org-projectile github repo.\n(require \u0026#39;org-projectile) (setq org-projectile-projects-file \u0026#34;~/my_org/project-tasks.org\u0026#34;) (push (org-projectile-project-todo-entry) org-capture-templates) ;; (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files))) ;; Excluding the above since the entire my_org directory is already included in the agenda (global-set-key (kbd \u0026#34;C-c n p\u0026#34;) \u0026#39;org-projectile-project-todo-completing-read) TODO org-gcal customisation TODO Property customisation TODO Add a CREATED property for org heading  Note taken on [2019-02-07 Thu 09:10]  Needs further review and optimisation.  (require \u0026#39;org-expiry) ;; Configure it a bit to my liking (setq org-expiry-created-property-name \u0026#34;CREATED\u0026#34; ; Name of property when an item is created org-expiry-inactive-timestamps nil ; Don\u0026#39;t have everything in the agenda view ) (defun mrb/insert-created-timestamp() \u0026#34;Insert a CREATED property using org-expiry.el for TODO entries\u0026#34; (org-expiry-insert-created) (org-back-to-heading) (org-end-of-line) (insert \u0026#34; \u0026#34;) ) ;; Whenever a TODO entry is created, I want a timestamp ;; Advice org-insert-todo-heading to insert a created timestamp using org-expiry (defadvice org-insert-todo-heading (after mrb/created-timestamp-advice activate) \u0026#34;Insert a CREATED property using org-expiry.el for TODO entries\u0026#34; (mrb/insert-created-timestamp) ) ;; Make it active (ad-activate \u0026#39;org-insert-todo-heading) (require \u0026#39;org-capture) (defadvice org-capture (after mrb/created-timestamp-advice activate) \u0026#34;Insert a CREATED property using org-expiry.el for TODO entries\u0026#34; ; Test if the captured entry is a TODO, if so insert the created ; timestamp property, otherwise ignore (mrb/insert-created-timestamp)) ;; (when (member (org-get-todo-state) org-todo-keywords-1) ;; (mrb/insert-created-timestamp))) (ad-activate \u0026#39;org-capture) Enabling adding tags in the capture window ;; Add feature to allow easy adding of tags in a capture window (defun mrb/add-tags-in-capture() (interactive) \u0026#34;Insert tags in a capture window without losing the point\u0026#34; (save-excursion (org-back-to-heading) (org-set-tags))) ;; Bind this to a reasonable key (define-key org-capture-mode-map \u0026#34;\\C-c\\C-t\u0026#34; \u0026#39;mrb/add-tags-in-capture) TODO org web clipper  Note taken on [2019-02-07 Thu 09:11]  This works fine now. However, it would be nice to find a way to strip the headers and menu columns and other unnecessary information before capture.  Source: http://www.bobnewell.net/publish/35years/webclipper.html\n;; org-eww and org-w3m should be in your org distribution, but see ;; note below on patch level of org-eww. (require \u0026#39;org-eww) (require \u0026#39;org-w3m) (defvar org-website-page-archive-file \u0026#34;~/my_org/full_article_archive.org\u0026#34;) (defun org-website-clipper () \u0026#34;When capturing a website page, go to the right place in capture file, but do sneaky things. Because it\u0026#39;s a w3m or eww page, we go ahead and insert the fixed-up page content, as I don\u0026#39;t see a good way to do that from an org-capture template alone. Requires Emacs 25 and the 2017-02-12 or later patched version of org-eww.el.\u0026#34; (interactive) ;; Check for acceptable major mode (w3m or eww) and set up a couple of ;; browser specific values. Error if unknown mode. (cond ((eq major-mode \u0026#39;w3m-mode) (org-w3m-copy-for-org-mode)) ((eq major-mode \u0026#39;eww-mode) (org-eww-copy-for-org-mode)) (t (error \u0026#34;Not valid -- must be in w3m or eww mode\u0026#34;))) ;; Check if we have a full path to the archive file. ;; Create any missing directories. (unless (file-exists-p org-website-page-archive-file) (let ((dir (file-name-directory org-website-page-archive-file))) (unless (file-exists-p dir) (make-directory dir)))) ;; Open the archive file and yank in the content. ;; Headers are fixed up later by org-capture. (find-file org-website-page-archive-file) (goto-char (point-max)) ;; Leave a blank line for org-capture to fill in ;; with a timestamp, URL, etc. (insert \u0026#34;\\n\\n\u0026#34;) ;; Insert the web content but keep our place. (save-excursion (yank)) ;; Don\u0026#39;t keep the page info on the kill ring. ;; Also fix the yank pointer. (setq kill-ring (cdr kill-ring)) (setq kill-ring-yank-pointer kill-ring) ;; Final repositioning. (forward-line -1) ) Org-babel Loading language base (org-babel-do-load-languages \u0026#39;org-babel-load-languages \u0026#39;((clojure . t) (scheme . t)) ) Clojure and cider (require \u0026#39;cider) (setq org-babel-clojure-backend \u0026#39;cider) TODO Org-trello Loading completed (message \u0026#34;Loaded org customisations\u0026#34;) Helm Setting Helm to be used for specific functions I prefer using Helm for specific functions like M-x, find files and bookmarks and switching buffers.\n;; Setting Helm as preferred package to use (global-set-key (kbd \u0026#34;M-x\u0026#34;) #\u0026#39;helm-M-x) (global-set-key (kbd \u0026#34;C-x r b\u0026#34;) #\u0026#39;helm-filtered-bookmarks) (global-set-key (kbd \u0026#34;C-x C-f\u0026#34;) #\u0026#39;helm-find-files) (global-set-key (kbd \u0026#34;C-x b\u0026#34;) #\u0026#39;helm-mini) TODO Persistent follow mode for Helm  Note taken on [2019-02-07 Thu 07:46]  Need to find exactly what this does  (custom-set-variables \u0026#39;(helm-follow-mode-persistent t)) TODO Setting sources for helm  Note taken on [2019-02-12 Tue 14:55]  This is still causing issues: the recentf list has to be cleared via helm-mini first. Note taken on [2019-02-07 Thu 16:28]  This was needed as it seems helm was not sourcing from recentf file lists. With this source list defined, it provides options to choose from recent files, bookmarks, open buffers.  (setq helm-mini-default-sources \u0026#39;(helm-source-buffers-list helm-source-recentf helm-source-bookmarks helm-source-bookmark-set helm-source-buffer-not-found)) (setq helm-buffers-list-default-sources \u0026#39;(helm-source-buffers-list helm-source-recentf helm-source-bookmarks helm-source-bookmark-set helm-source-buffer-not-found)) helm-ag and helm-org-rifle (require \u0026#39;helm-ag) (require \u0026#39;helm-org-rifle) helm-swoop  Note taken on [2019-02-07 Thu 16:53]  This is an awesome find. Helm swoop changes the search pattern depending on the location of the cursor. Therefore, while placed on an org headline, calling helm-swoop will preset the search pattern to have headings. The same is true for source code blocks! Fantastic.  Source: https://writequit.org/org/#orgheadline92\n(use-package helm-swoop :ensure t :bind ((\u0026#34;M-i\u0026#34; . helm-swoop) (\u0026#34;M-I\u0026#34; . helm-swoop-back-to-last-point) (\u0026#34;C-c M-i\u0026#34; . helm-multi-swoop)) :config ;; When doing isearch, hand the word over to helm-swoop (define-key isearch-mode-map (kbd \u0026#34;M-i\u0026#34;) \u0026#39;helm-swoop-from-isearch) ;; From helm-swoop to helm-multi-swoop-all (define-key helm-swoop-map (kbd \u0026#34;M-i\u0026#34;) \u0026#39;helm-multi-swoop-all-from-helm-swoop) ;; Save buffer when helm-multi-swoop-edit complete (setq helm-multi-swoop-edit-save t ;; If this value is t, split window inside the current window helm-swoop-split-with-multiple-windows t ;; Split direcion. \u0026#39;split-window-vertically or \u0026#39;split-window-horizontally helm-swoop-split-direction \u0026#39;split-window-vertically ;; If nil, you can slightly boost invoke speed in exchange for text color helm-swoop-speed-or-color nil)) Loading completed (message \u0026#34;Loaded Helm customisations\u0026#34;) Flycheck Source: https://writequit.org/org/\nBasic config  Note taken on [2019-02-09 Sat 11:51]  disabling flycheck for the moment and enabling flymake  (use-package flycheck :defer 5 :bind ((\u0026#34;M-g M-n\u0026#34; . flycheck-next-error) (\u0026#34;M-g M-p\u0026#34; . flycheck-previous-error) (\u0026#34;M-g M-=\u0026#34; . flycheck-list-errors)) :init (global-flycheck-mode) :diminish flycheck-mode :config (progn (setq-default flycheck-disabled-checkers \u0026#39;(emacs-lisp-checkdoc json-jsonlint json-python-json ess iess)) (use-package flycheck-pos-tip :init (flycheck-pos-tip-mode)) (use-package helm-flycheck :init (define-key flycheck-mode-map (kbd \u0026#34;C-c ! h\u0026#34;) \u0026#39;helm-flycheck)) (use-package flycheck-haskell :init (add-hook \u0026#39;flycheck-mode-hook #\u0026#39;flycheck-haskell-setup)))) Replacing flycheck with flymake This is especially for python modules at the moment.\n(when (require \u0026#39;flycheck nil t) (setq elpy-modules (delq \u0026#39;elpy-module-flymake elpy-modules)) (add-hook \u0026#39;elpy-mode-hook \u0026#39;flycheck-mode)) Scheme setup  References  http://praveen.kumar.in/2011/03/06/gnu-emacs-and-mit-scheme-on-mac-os-x/   (setq scheme-program-name \u0026#34;/Applications/MIT-GNU-Scheme.app/Contents/Resources/mit-scheme\u0026#34;) (require \u0026#39;xscheme) (message \u0026#34;Loaded scheme setup\u0026#34;) Hydras and some custom functions Refiling Adapted from https://emacs.stackexchange.com/questions/8045/org-refile-to-a-known-fixed-location\nsource: https://gist.github.com/mm--/60e0790bcbf8447160cc87a66dc949ab\n(defun my/refile (file headline \u0026amp;optional arg) \u0026#34;Refile to a specific location. With a \u0026#39;C-u\u0026#39; ARG argument, we jump to that location (see `org-refile\u0026#39;). Use `org-agenda-refile\u0026#39;in `org-agenda\u0026#39;mode.\u0026#34; (let* ((pos (with-current-buffer (or (get-buffer file) ;Is the file open in a buffer already? (find-file-noselect file)) ;Otherwise, try to find the file by name (Note, default-directory matters here if it isn\u0026#39;t absolute) (or (org-find-exact-headline-in-buffer headline) (error \u0026#34;Can\u0026#39;t find headline `%s\u0026#39;\u0026#34; headline)))) (filepath (buffer-file-name (marker-buffer pos))) ;If we\u0026#39;re given a relative name, find absolute path (rfloc (list headline filepath nil pos))) (if (and (eq major-mode \u0026#39;org-agenda-mode) (not (and arg (listp arg)))) ;Don\u0026#39;t use org-agenda-refile if we\u0026#39;re just jumping (org-agenda-refile nil rfloc) (org-refile arg nil rfloc)))) (defun josh/refile (file headline \u0026amp;optional arg) \u0026#34;Refile to HEADLINE in FILE. Clean up org-capture if it\u0026#39;s activated. With a `C-u` ARG, just jump to the headline.\u0026#34; (interactive \u0026#34;P\u0026#34;) (let ((is-capturing (and (boundp \u0026#39;org-capture-mode) org-capture-mode))) (cond ((and arg (listp arg))\t;Are we jumping? (my/refile file headline arg)) ;; Are we in org-capture-mode? (is-capturing ;Minor mode variable that\u0026#39;s defined when capturing (josh/org-capture-refile-but-with-args file headline arg)) (t (my/refile file headline arg))) (when (or arg is-capturing) (setq hydra-deactivate t)))) (defun josh/org-capture-refile-but-with-args (file headline \u0026amp;optional arg) \u0026#34;Copied from `org-capture-refile\u0026#39;since it doesn\u0026#39;t allow passing arguments. This does.\u0026#34; (unless (eq (org-capture-get :type \u0026#39;local) \u0026#39;entry) (error \u0026#34;Refiling from a capture buffer makes only sense for `entry\u0026#39;-type templates\u0026#34;)) (let ((pos (point)) (base (buffer-base-buffer (current-buffer))) (org-capture-is-refiling t) (kill-buffer (org-capture-get :kill-buffer \u0026#39;local))) (org-capture-put :kill-buffer nil) (org-capture-finalize) (save-window-excursion (with-current-buffer (or base (current-buffer)) (org-with-wide-buffer (goto-char pos) (my/refile file headline arg)))) (when kill-buffer (kill-buffer base)))) (defmacro josh/make-org-refile-hydra (hydraname file keyandheadline) \u0026#34;Make a hydra named HYDRANAME with refile targets to FILE. KEYANDHEADLINE should be a list of cons cells of the form (\\\u0026#34;key\\\u0026#34; . \\\u0026#34;headline\\\u0026#34;)\u0026#34; `(defhydra ,hydraname (:color blue :after-exit (unless (or hydra-deactivate current-prefix-arg) ;If we\u0026#39;re just jumping to a location, quit the hydra (josh/org-refile-hydra/body))) ,file ,@(cl-loop for kv in keyandheadline collect (list (car kv) (list \u0026#39;josh/refile file (cdr kv) \u0026#39;current-prefix-arg) (cdr kv))) (\u0026#34;q\u0026#34; nil \u0026#34;cancel\u0026#34;))) ;;;;;;;;;; ;; Here we\u0026#39;ll define our refile headlines ;;;;;;;;;; (josh/make-org-refile-hydra josh/org-refile-hydra-file-ds \u0026#34;~/my_org/datascience.org\u0026#34; ((\u0026#34;1\u0026#34; . \u0026#34;@Datascience @Inbox\u0026#34;) (\u0026#34;2\u0026#34; . \u0026#34;@Datascience @Notes\u0026#34;))) (josh/make-org-refile-hydra josh/org-refile-hydra-file-bgr \u0026#34;~/my_org/bgr.org\u0026#34; ((\u0026#34;1\u0026#34; . \u0026#34;#BGR #Inbox\u0026#34;) (\u0026#34;2\u0026#34; . \u0026#34;#questions @ BGR\u0026#34;) (\u0026#34;3\u0026#34; . \u0026#34;Inventory management Project\u0026#34;))) (josh/make-org-refile-hydra josh/org-refile-hydra-file-todoglobal \u0026#34;todo-global.org\u0026#34; ((\u0026#34;1\u0026#34; . \u0026#34;;Emacs Stuff\u0026#34;) (\u0026#34;2\u0026#34; . \u0026#34;;someday\u0026#34;))) (defhydra josh/org-refile-hydra (:foreign-keys run) \u0026#34;Refile\u0026#34; (\u0026#34;a\u0026#34; josh/org-refile-hydra-file-ds/body \u0026#34;File A\u0026#34; :exit t) (\u0026#34;b\u0026#34; josh/org-refile-hydra-file-bgr/body \u0026#34;File B\u0026#34; :exit t) (\u0026#34;c\u0026#34; josh/org-refile-hydra-file-todoglobal/body \u0026#34;File C\u0026#34; :exit t) (\u0026#34;j\u0026#34; org-refile-goto-last-stored \u0026#34;Jump to last refile\u0026#34; :exit t) (\u0026#34;q\u0026#34; nil \u0026#34;cancel\u0026#34;)) (global-set-key (kbd \u0026#34;\u0026lt;f8\u0026gt; r\u0026#34;) \u0026#39;josh/org-refile-hydra/body) Window manipulation Source : Hydra documentation\n;; Hydras for window configuration. Using the deluxe (defhydra hydra-window () \u0026#34; Movement^^ ^Split^ ^Switch^\t^Resize^ ---------------------------------------------------------------- _h_ ← _v_ertical _b_uffer\t_q_ X← _j_ ↓ _x_ horizontal\t_f_ind files\t_w_ X↓ _k_ ↑ _z_ undo _a_ce 1\t_e_ X↑ _l_ → _Z_ reset _s_wap\t_r_ X→ _F_ollow\t_D_lt Other _S_ave\tmax_i_mize _SPC_ cancel\t_o_nly this _d_elete \u0026#34; (\u0026#34;h\u0026#34; windmove-left ) (\u0026#34;j\u0026#34; windmove-down ) (\u0026#34;k\u0026#34; windmove-up ) (\u0026#34;l\u0026#34; windmove-right ) (\u0026#34;q\u0026#34; hydra-move-splitter-left) (\u0026#34;w\u0026#34; hydra-move-splitter-down) (\u0026#34;e\u0026#34; hydra-move-splitter-up) (\u0026#34;r\u0026#34; hydra-move-splitter-right) (\u0026#34;b\u0026#34; helm-mini) (\u0026#34;f\u0026#34; helm-find-files) (\u0026#34;F\u0026#34; follow-mode) (\u0026#34;a\u0026#34; (lambda () (interactive) (ace-window 1) (add-hook \u0026#39;ace-window-end-once-hook \u0026#39;hydra-window/body)) ) (\u0026#34;v\u0026#34; (lambda () (interactive) (split-window-right) (windmove-right)) ) (\u0026#34;x\u0026#34; (lambda () (interactive) (split-window-below) (windmove-down)) ) (\u0026#34;s\u0026#34; (lambda () (interactive) (ace-window 4) (add-hook \u0026#39;ace-window-end-once-hook \u0026#39;hydra-window/body))) (\u0026#34;S\u0026#34; save-buffer) (\u0026#34;d\u0026#34; delete-window) (\u0026#34;D\u0026#34; (lambda () (interactive) (ace-window 16) (add-hook \u0026#39;ace-window-end-once-hook \u0026#39;hydra-window/body)) ) (\u0026#34;o\u0026#34; delete-other-windows) (\u0026#34;i\u0026#34; ace-maximize-window) (\u0026#34;z\u0026#34; (progn (winner-undo) (setq this-command \u0026#39;winner-undo)) ) (\u0026#34;Z\u0026#34; winner-redo) (\u0026#34;SPC\u0026#34; nil) ) (global-set-key (kbd \u0026#34;\u0026lt;f8\u0026gt; w\u0026#34;) \u0026#39;hydra-window/body) helm-do-ag in specific locations Reference: https://emacs.stackexchange.com/questions/44128/function-to-do-helm-do-ag-for-a-specific-project\nIn project directory (defun helm-do-ag-projects () \u0026#34;Grep string in Project directory\u0026#34; (interactive) (let ((rootdir (concat \u0026#34;~/my_projects/\u0026#34;))) (let ((helm-ag-command-option (concat helm-ag-command-option \u0026#34;\u0026#34;))) (helm-do-ag rootdir)))) Scimax config directory (defun helm-do-ag-emacs-config () \u0026#34;Grep string in Emacs custom code\u0026#34; (interactive) (let ((rootdir (concat \u0026#34;~/scimax/user/sr-cust/\u0026#34;))) (let ((helm-ag-command-option (concat helm-ag-command-option \u0026#34;\u0026#34;))) (helm-do-ag rootdir)))) Journal directory (defun helm-do-ag-journal () \u0026#34;Grep string in journal\u0026#34; (interactive) (let ((specfile (concat \u0026#34;~/my_org/journal/\u0026#34;))) (let ((helm-ag-command-option (concat helm-ag-command-option \u0026#34;\u0026#34;))) (helm-ag-this-file rootdir)))) BGR file (defun helm-do-ag-bgr () \u0026#34;Grep string in BGR file\u0026#34; (interactive) (let ((specfile (concat \u0026#34;~/my_org/bgr.org\u0026#34;))) (let ((helm-ag-command-option (concat helm-ag-command-option \u0026#34;\u0026#34;))) (helm-do-ag-this-file specfile)))) Defining hydra (defhydra shrysr/hydra-helm-ag-do-menu () \u0026#34; Helm-do-ag in specified locations ^location^ ^command^ ---------------------------------------------------------- e: emacs custom config b: bgr file o: org files j: journal search \u0026#34; (\u0026#34;e\u0026#34; helm-do-ag-emacs-config) (\u0026#34;j\u0026#34; helm-do-ag-journal :color blue) (\u0026#34;p\u0026#34; helm-do-ag-projects) (\u0026#34;o\u0026#34; helm-do-ag-org) (\u0026#34;q\u0026#34; quit-window \u0026#34;quit\u0026#34; :color red)) (global-set-key (kbd \u0026#34;\u0026lt;f8\u0026gt; h\u0026#34;) \u0026#39;shrysr/hydra-helm-ag-do-menu/body) Frame configurations fo magit and project launch Scimax - magit and windows ;; scimax directory magit status (defun sr/windows-magit-scimax () (interactive) (ace-delete-other-windows) (dired \u0026#34;~/scimax/user/\u0026#34;) (switch-window-then-split-right nil) (magit-status \u0026#34;~/scimax/\u0026#34;) (switch-window) (split-window-vertically) (dired-up-directory) (windmove-right) ) Org files - magit and windows ;; my_org magit status (defun sr/windows-magit-org () (interactive) (ace-delete-other-windows) (magit-status \u0026#34;~/my_org/\u0026#34;) ) Project directory - magit and windows ;; magit status (defun sr/windows-magit-projects () (interactive) (ace-delete-other-windows) (switch-window-then-split-right nil) (magit-status \u0026#34;~/my_projects/\u0026#34;) (switch-window) (dired \u0026#34;~/my_projects/\u0026#34;) (switch-window) ) TODO Project: Switch and windows  Note taken on [2019-02-10 Sun 07:09]  Experiment with helm-swoop functions to target only top level headings  (defun sr/windows-projects () (interactive) (ace-delete-other-windows) (switch-window-then-split-right nil) (projectile-switch-project) (switch-window) (find-file \u0026#34;~/my_org/project-tasks.org\u0026#34;) (widen) (helm-org-rifle-current-buffer) (org-narrow-to-subtree) (outline-show-children) ) Defining Hydra (defhydra sr/process-window-keys () \u0026#34; Key^^ ^Workflow^ -------------------- o org magit s scimax magit p projects magit w select project and set window config SPC exit \u0026#34; (\u0026#34;o\u0026#34; sr/windows-magit-org ) (\u0026#34;p\u0026#34; sr/windows-magit-projects ) (\u0026#34;s\u0026#34; sr/windows-magit-scimax ) (\u0026#34;w\u0026#34; sr/windows-projects) (\u0026#34;SPC\u0026#34; nil) ) (global-set-key (kbd \u0026#34;\u0026lt;f8\u0026gt; m\u0026#34;) \u0026#39;sr/process-window-keys/body) Loading completed (message \u0026#34;Loaded Hydras\u0026#34;) Elfeed customisation Elfeed-org setup [/] Using an org source is the easiest way to organise my RSS feeds for reading with Elfeed.\n;; use an org file to organise feeds (use-package elfeed-org :ensure t :config (elfeed-org) (setq rmh-elfeed-org-files (list \u0026#34;~/my_org/elfeed.org\u0026#34;)) ) TODO Consider storing the Feed sources here in org format Loading completed (message \u0026#34;Loaded Elfeed customisations\u0026#34;) w3m customisation A few snippets were sourced from: http://beatofthegeek.com/2014/02/my-setup-for-using-emacs-as-web-browser.html\n(setq browse-url-browser-function \u0026#39;w3m-goto-url-new-session) (setq w3m-default-display-inline-images t) TODO Appending HTTP to web addresses entered by hand  Note taken on [2019-02-07 Thu 07:40]  Check whether this is necessary  ;;when I want to enter the web address all by hand (defun w3m-open-site (site) \u0026#34;Opens site in new w3m session with \u0026#39;http://\u0026#39; appended\u0026#34; (interactive (list (read-string \u0026#34;Enter website address(default: w3m-home):\u0026#34; nil nil w3m-home-page nil ))) (w3m-goto-url-new-session (concat \u0026#34;http://\u0026#34; site))) Changing w3m shortcuts for better tabbed browsing Source: Sacha Chua : http://sachachua.com/blog/2008/09/emacs-and-w3m-making-tabbed-browsing-easier/\n(eval-after-load \u0026#39;w3m \u0026#39;(progn (define-key w3m-mode-map \u0026#34;q\u0026#34; \u0026#39;w3m-previous-buffer) (define-key w3m-mode-map \u0026#34;w\u0026#34; \u0026#39;w3m-next-buffer) (define-key w3m-mode-map \u0026#34;x\u0026#34; \u0026#39;w3m-close-window))) TODO Default external browser settings  Note taken on [2019-02-07 Thu 07:37]  Need to have this change depending whether the OS is Linux or Mac OS  (defun wicked/w3m-open-current-page-in-firefox () \u0026#34;Open the current URL in Mozilla Firefox.\u0026#34; (interactive) (browse-url-default-macosx-browser w3m-current-url)) ;; (1) (defun wicked/w3m-open-link-or-image-in-firefox () \u0026#34;Open the current link or image in Firefox.\u0026#34; (interactive) (browse-url-default-macosx-browser (or (w3m-anchor) ;; (2) (w3m-image)))) ;; (3) (eval-after-load \u0026#39;w3m \u0026#39;(progn (define-key w3m-mode-map \u0026#34;o\u0026#34; \u0026#39;wicked/w3m-open-current-page-in-firefox) (define-key w3m-mode-map \u0026#34;O\u0026#34; \u0026#39;wicked/w3m-open-link-or-image-in-firefox))) Wikipedia search (defun wikipedia-search (search-term) \u0026#34;Search for SEARCH-TERM on wikipedia\u0026#34; (interactive (let ((term (if mark-active (buffer-substring (region-beginning) (region-end)) (word-at-point)))) (list (read-string (format \u0026#34;Wikipedia (%s):\u0026#34; term) nil nil term))) ) (browse-url (concat \u0026#34;http://en.m.wikipedia.org/w/index.php?search=\u0026#34; search-term )) ) Access Hacker News (defun hn () (interactive) (browse-url \u0026#34;http://news.ycombinator.com\u0026#34;)) ediff I have to diff between org files pretty often, and need the headings to be unfolded.\nSource: http://emacs.stackexchange.com/questions/21335/prevent-folding-org-files-opened-by-ediff\n;; Check for org mode and existence of buffer (defun f-ediff-org-showhide (buf command \u0026amp;rest cmdargs) \u0026#34;If buffer exists and is orgmode then execute command\u0026#34; (when buf (when (eq (buffer-local-value \u0026#39;major-mode (get-buffer buf)) \u0026#39;org-mode) (save-excursion (set-buffer buf) (apply command cmdargs))))) (defun f-ediff-org-unfold-tree-element () \u0026#34;Unfold tree at diff location\u0026#34; (f-ediff-org-showhide ediff-buffer-A \u0026#39;org-reveal) (f-ediff-org-showhide ediff-buffer-B \u0026#39;org-reveal) (f-ediff-org-showhide ediff-buffer-C \u0026#39;org-reveal)) (defun f-ediff-org-fold-tree () \u0026#34;Fold tree back to top level\u0026#34; (f-ediff-org-showhide ediff-buffer-A \u0026#39;hide-sublevels 1) (f-ediff-org-showhide ediff-buffer-B \u0026#39;hide-sublevels 1) (f-ediff-org-showhide ediff-buffer-C \u0026#39;hide-sublevels 1)) (add-hook \u0026#39;ediff-select-hook \u0026#39;f-ediff-org-unfold-tree-element) (add-hook \u0026#39;ediff-unselect-hook \u0026#39;f-ediff-org-fold-tree) Theme and visuals Emacsclient or frame specific settings Since I run emacs as a daemon and call the emacsclient, the background has to be set for new frames. Additionally, I\u0026rsquo;d like the frames to launch full screen.\n(setq default-frame-alist \u0026#39;((background-color . \u0026#34;light grey\u0026#34;) (foreground-color . \u0026#34;black\u0026#34;) (fullscreen . maximized) )) Custom Safe themes and Background change to light grey (setq custom-safe-themes t) (set-background-color \u0026#34;light gray\u0026#34;) Font Customisation based on OS The same font is named differently in Antergos (Linux) and in the Mac OS.\n;; For Linux (if (system-type-is-gnu) (set-face-attribute \u0026#39;default nil :family \u0026#34;ttf-iosevka\u0026#34; :height 140)) ;; For Mac OS (if (system-type-is-darwin) (set-face-attribute \u0026#39;default nil :family \u0026#34;Iosevka Type\u0026#34; :height 150)) visual-fill-column Source: https://github.com/wasamasa/dotemacs/blob/master/init.org\nAdding a hook to enable visual fill column mode once visual line mode is called did not work for me. The issue is that this is called\n(setq global-visual-line-mode 1 fill-column 80) Hugo Function to create specific properties for a blog post Modified this function from:\nTODO Defining content directory  Note taken on [2019-02-07 Thu 08:06]  Need to check if this is still required since I have switche to ox-hugo  (defvar hugo-content-dir \u0026#34;~/my_gits/hugo-sr/content/post/\u0026#34; \u0026#34;Path to Hugo\u0026#39;s content directory\u0026#34;) Ensuring properties exist and creating if they dont exist (defun hugo-ensure-property (property) \u0026#34;Make sure that a property exists. If not, it will be created. Returns the property name if the property has been created, otherwise nil.\u0026#34; (org-id-get-create) (if (org-entry-get nil property) nil (progn (org-entry-put nil property \u0026#34;\u0026#34;) property))) (defun hugo-ensure-properties () (require \u0026#39;dash) (let ((current-time (format-time-string (org-time-stamp-format t t) (org-current-time))) first) (save-excursion (setq first (--first it (mapcar #\u0026#39;hugo-ensure-property \u0026#39;(\u0026#34;HUGO_TAGS\u0026#34; \u0026#34;HUGO_CATEGORIES\u0026#34;)))) (unless (org-entry-get nil \u0026#34;HUGO_DATE\u0026#34;) (org-entry-put nil \u0026#34;EXPORT_DATE\u0026#34; current-time))) (org-entry-put nil \u0026#34;EXPORT_FILE_NAME\u0026#34; (org-id-get-create)) (org-entry-put nil \u0026#34;EXPORT_HUGO_CUSTOM_FRONT_MATTER\u0026#34; \u0026#34;:profile false\u0026#34;) (when first (goto-char (org-entry-beginning-position)) ;; The following opens the drawer (forward-line 1) (beginning-of-line 1) (when (looking-at org-drawer-regexp) (org-flag-drawer nil)) ;; And now move to the drawer property (search-forward (concat \u0026#34;:\u0026#34; first \u0026#34;:\u0026#34;)) (end-of-line)) first)) Hugo function calling the above (defun hugo () (interactive) (unless (hugo-ensure-properties) (let* ((type (concat \u0026#34;type = \\\u0026#34;\u0026#34; (org-entry-get nil \u0026#34;HUGO_TYPE\u0026#34;) \u0026#34;\\\u0026#34;\\n\u0026#34;)) (date (concat \u0026#34;date = \\\u0026#34;\u0026#34; (format-time-string \u0026#34;%Y-%m-%d\u0026#34; (apply \u0026#39;encode-time (org-parse-time-string (org-entry-get nil \u0026#34;HUGO_DATE\u0026#34;))) t) \u0026#34;\\\u0026#34;\\n\u0026#34;)) (tags (concat \u0026#34;tags = [ \\\u0026#34;\u0026#34; (mapconcat \u0026#39;identity (split-string (org-entry-get nil \u0026#34;HUGO_TAGS\u0026#34;) \u0026#34;\\\\( *, *\\\\)\u0026#34; t) \u0026#34;\\\u0026#34;, \\\u0026#34;\u0026#34;) \u0026#34;\\\u0026#34; ]\\n\u0026#34;)) (fm (concat \u0026#34;+++\\n\u0026#34; title type date tags topics \u0026#34;+++\\n\\n\u0026#34;)) (coding-system-for-write buffer-file-coding-system) (backend \u0026#39;md) (blog)) ;; try to load org-mode/contrib/lisp/ox-gfm.el and use it as backend (if (require \u0026#39;ox-gfm nil t) (setq backend \u0026#39;gfm) (require \u0026#39;ox-md)) (setq blog (org-export-as backend t)) ;; Normalize save file path (unless (string-match \u0026#34;^[/~]\u0026#34; file) (setq file (concat hugo-content-dir file)) (unless (string-match \u0026#34;\\\\.md$\u0026#34; file) (setq file (concat file \u0026#34;.md\u0026#34;))) ;; save markdown (with-temp-buffer (insert fm) (insert blog) (untabify (point-min) (point-max)) (write-file file) (message \u0026#34;Exported to %s\u0026#34; file)))))) ox-hugo setup (use-package ox-hugo :ensure t :defer t :custom (org-hugo--tag-processing-fn-replace-with-hyphens-maybe t) ) Scimax customisations These are settings which custmise scimax specific variables. These are separated out here so that it becomes easier to try out Emacs configurations that are outside scimax.\nDefining Hotspots (defun hotspots () \u0026#34;helm interface to my hotspots, which includes my locations, org-files and bookmarks\u0026#34; (interactive) (helm :sources `(((name . \u0026#34;Mail and News\u0026#34;) (candidates . ((\u0026#34;Agenda All\u0026#34; . (lambda () (org-agenda \u0026#34;\u0026#34; \u0026#34;a\u0026#34;))) (\u0026#34;Agenda Office\u0026#34; . (lambda () (org-agenda \u0026#34;\u0026#34; \u0026#34;o\u0026#34;))) (\u0026#34;Mail\u0026#34; . (lambda () (if (get-buffer \u0026#34;*mu4e-headers*\u0026#34;) (progn (switch-to-buffer \u0026#34;*mu4e-headers*\u0026#34;) (delete-other-windows)) (mu4e)))) (\u0026#34;Calendar\u0026#34; . (lambda () (browse-url \u0026#34;https://www.google.com/calendar/render\u0026#34;))) (\u0026#34;RSS\u0026#34; . elfeed))) (action . ((\u0026#34;Open\u0026#34; . (lambda (x) (funcall x)))))) ((name . \u0026#34;My Locations\u0026#34;) (candidates . ((\u0026#34;CV Org\u0026#34; . \u0026#34;~/org_cv/CV_Shreyas_Ragavan.org\u0026#34;) (\u0026#34;scd - scimax dir\u0026#34; . \u0026#34;~/scimax/\u0026#34; ) (\u0026#34;scu - scimax user dir\u0026#34; . \u0026#34;~/scimax/user/\u0026#34;) ( \u0026#34;sco - scimax org conf\u0026#34;. \u0026#34;~/scimax/user/sr-config.org\u0026#34;) (\u0026#34;blog\u0026#34; . \u0026#34;~/my_org/blog-book.org\u0026#34;) (\u0026#34;github\u0026#34; . \u0026#34;~/my_gits/\u0026#34;) (\u0026#34;project\u0026#34; . \u0026#34;~/my_projects/\u0026#34;) (\u0026#34;cheatsheet\u0026#34; . \u0026#34;~/my_cheatsheets/\u0026#34;) (\u0026#34;passwords\u0026#34; . \u0026#34;~/my_org/secrets.org.gpg\u0026#34;) (\u0026#34;references\u0026#34; . \u0026#34;~/Dropbox/bibliography/references.bib\u0026#34;) )) (action . ((\u0026#34;Open\u0026#34; . (lambda (x) (find-file x)))))) ((name . \u0026#34;My org files\u0026#34;) (candidates . ,(f-entries \u0026#34;~/my_org\u0026#34;)) (action . ((\u0026#34;Open\u0026#34; . (lambda (x) (find-file x)))))) helm-source-recentf helm-source-bookmarks helm-source-bookmark-set))) Scimax Notebook directory (setq nb-notebook-directory \u0026#34;~/my_projects/\u0026#34;) Scimax notebook (global-set-key (kbd \u0026#34;M-s n\u0026#34;) \u0026#39;nb-open) TODO Scimax Python (require \u0026#39;scimax-org-babel-python) (require \u0026#39;scimax-ob) (require \u0026#39;scimax-org-babel-ipython-upstream) (setq ob-ipython-exception-results nil) (scimax-ob-ipython-turn-on-eldoc) TODO Bibliography settings and customisation This was setup a long time ago to convert past technical repots into org mode, with references made in correct technical style. This project is on hold.\n(require \u0026#39;doi-utils) (require \u0026#39;org-ref-wos) (require \u0026#39;org-ref-pubmed) (require \u0026#39;org-ref-arxiv) (require \u0026#39;org-ref-bibtex) (require \u0026#39;org-ref-pdf) (require \u0026#39;org-ref-url-utils) (require \u0026#39;org-ref-helm) ;; note and bib location (setq org-ref-bibliography-notes \u0026#34;~/my_org/references/references.org\u0026#34; org-ref-bibliography-notes \u0026#34;~/my_org/references/research_notes.org\u0026#34; org-ref-default-bibliography \u0026#39;(\u0026#34;~/my_org/references/references.bib\u0026#34;) org-ref-pdf-directory \u0026#34;~/my_org/references/pdfs/\u0026#34;) ;; setting up helm-bibtex (setq helm-bibtex-bibliography \u0026#34;~/my_org/references/references.bib\u0026#34; helm-bibtex-library-path \u0026#34;~/my_org/org/references/pdfs\u0026#34; helm-bibtex-notes-path \u0026#34;~/my_org/references/research_notes.org\u0026#34;) Python [0/4] Using miniconda NEXT setup virtual environment approach NEXT setup conda, especially for auto complete General config  Note taken on [2019-02-12 Tue 14:52]  This is to take care of the annoying indentation message that always pops up.  (setq python-indent-guess-indent-offset nil) NEXT Autocomplete for python blocks (add-to-list \u0026#39;company-backends \u0026#39;company-ob-ipython) (company-mode) POSTPONED Emacs-jupyter  Note taken on [2019-02-12 Tue 14:48]  Since I am more familiar with ob-ipython and there are a bunch of interesting features already implemented in it like the automatic setting of a kernel and file names for graphic outputs and so on - I will explore jupyter-emacs at a later date.  (use-package jupyter :ensure t :defer t :config (org-babel-load-languages \u0026#39;(jupyter .t)) (setq org-babel-default-header-args:jupyter-python \u0026#39;((:async . \u0026#34;yes\u0026#34;) (:session . \u0026#34;jipython\u0026#34;) (:kernel . \u0026#34;python3\u0026#34;))) ) Test for jupyter-python import pandas as pd TODO Project publishing setup [0/2] This is under construction and was initially started with the idea of having custom publishing settings for different projects. I was initially looking at this for publishing my hugo blog. However, the need has been negated with the excellent ox-hugo package.\nTODO Exporting org projects ( setq org-publish-project-alist \u0026#39;( (\u0026#34;org-repo\u0026#34; :base-directory \u0026#34;./\u0026#34; :base-extension \u0026#34;org\u0026#34; :publishing-directory \u0026#34;/Users/shreyas/my_projects/dotemacs\u0026#34; :EXPORT_FILE_NAME \u0026#34;README.org\u0026#34; :recursive f :publishing-function org-html-publish-to-html ;; :html-head \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://dakrone.github.io/org2.css\u0026#34; type=\u0026#34;text/css\u0026#34; /\u0026gt;\u0026#34; ) (\u0026#34;md\u0026#34; :base-directory \u0026#34;./\u0026#34; :base-extension \u0026#34;org\u0026#34; :publishing-directory \u0026#34;./export/\u0026#34; :recursive t :publishing-function org-md-export-to-markdown ) (\u0026#34;Documentation - html + md\u0026#34; :components (\u0026#34;html-static\u0026#34; \u0026#34;md\u0026#34; ) ))) TODO Function for exporting dotemacs config [1\u0026frasl;3] Note taken on [2019-02-14 Thu 14:05]  Save the filename as variables. Note taken on [2019-02-14 Thu 13:30]  Add a condition to check if the directory exists. Note taken on [2019-02-10 Sun 07:16]  Add a line to revert target export files if they are open. Prefer exporting the org file rather than copying.  This is the beginning of a function to perform 3 exports:\n Export to my hugo website as a part of my documentation (ox-hugo) Copy the org file to my github repo. Tangle the copied org file to the above github repository to have the script ready.  Maintaining the documentation on my website does not make it easy to others to view the changes in the configuration and fork or download the same as an org file or emacs-lisp script. Therefore the config that I publish should be maintained in it\u0026rsquo;s own repository.\nAs of now, I\u0026rsquo;m calling this function from my Emacs config file, and need to improve the above workflow.\n(defun sr/dotemacs-export() (interactive) \u0026#34;If directories exist - exporting Org config to Hugo blog, and to Github repository org file and lisp\u0026#34; (if (file-directory-p \u0026#34;~/my_projects/dotemacs\u0026#34;) (progn (copy-file \u0026#34;~/scimax/user/sr-config.org\u0026#34; \u0026#34;~/my_projects/dotemacs/README.org\u0026#34; \u0026#34;OK-IF-ALREADY-EXISTS\u0026#34;) (copy-file \u0026#34;~/scimax/user/sr-config.el\u0026#34; \u0026#34;~/my_projects/dotemacs/config.el\u0026#34; \u0026#34;OK-IF-ALREADY-EXISTS\u0026#34;) ;; (org-babel-tangle-file \u0026#34;~/my_projects/dotemacs/README.org\u0026#34; \u0026#34;~/my_projects/dotemacs/config.el\u0026#34;) ) ) (if (file-directory-p \u0026#34;~/my_gits/hugo-sr\u0026#34;) (progn (org-hugo-export-to-md) ) ) ) TODO mu4e  Note taken on [2019-02-12 Tue 14:53]  The use-package documentation specifies a method to do this via use-package itself, without enclosing the whole snippet within a if clause. Note taken on [2019-02-07 Thu 20:43]  The mu4e config has to be broken down and the send email with htmlize has to be evaluated. Note taken on [2019-02-07 Thu 09:04]  As of now, I do not acess my email on different computers via Emacs. The end goal is to setup a mail server via VPS and store my email online, which can then be searched via Emacs and mu4e from any location.  (if (system-type-is-darwin) (progn (use-package mu4e :ensure nil :config (require \u0026#39;mu4e) (require \u0026#39;mu4e-contrib) (require \u0026#39;org-mu4e) (setq mue4e-headers-skip-duplicates t mu4e-view-show-images t mu4e-view-show-addresses \u0026#39;t mu4e-compose-format-flowed nil mu4e-update-interval 200 message-ignored-cited-headers \u0026#39;nil mu4e-date-format \u0026#34;%y/%m/%d\u0026#34; mu4e-headers-date-format \u0026#34;%Y/%m/%d\u0026#34; mu4e-change-filenames-when-moving t mu4e-attachments-dir \u0026#34;~/Downloads/Mail-Attachments/\u0026#34; mu4e-maildir (expand-file-name \u0026#34;~/my_mail/fmail\u0026#34;) ) ;; mu4e email refiling loations (setq mu4e-refile-folder \u0026#34;/Archive\u0026#34; mu4e-trash-folder \u0026#34;/Trash\u0026#34; mu4e-sent-folder \u0026#34;/Sent\u0026#34; mu4e-drafts-folder \u0026#34;/Drafts\u0026#34; ) ;; setup some handy shortcuts (setq mu4e-maildir-shortcuts \u0026#39;((\u0026#34;/INBOX\u0026#34; . ?i) (\u0026#34;/Sent\u0026#34; . ?s) (\u0026#34;/Archive\u0026#34; . ?a) (\u0026#34;/Trash\u0026#34; . ?t))) ;;store link to message if in header view, not to header query (setq org-mu4e-link-query-in-headers-mode nil org-mu4e-convert-to-html t) ;; org -\u0026gt; html ;; Enabling view in browser for HTML heavy emails that don\u0026#39;t render well (add-to-list \u0026#39;mu4e-view-actions \u0026#39;(\u0026#34;ViewInBrowser\u0026#34; . mu4e-action-view-in-browser) t) (autoload \u0026#39;mu4e \u0026#34;mu4e\u0026#34; \u0026#34;mu for Emacs.\u0026#34; t) ;; Config for sending email (setq message-send-mail-function \u0026#39;message-send-mail-with-sendmail send-mail-function \u0026#39;sendmail-send-it message-kill-buffer-on-exit t ) ;; allow for updating mail using \u0026#39;U\u0026#39; in the main view: (setq mu4e-get-mail-command \u0026#34;mbsync -a -q\u0026#34;) ;; Don\u0026#39;t keep asking for confirmation for every action (defun my-mu4e-mark-execute-all-no-confirm () \u0026#34;Execute all marks without confirmation.\u0026#34; (interactive) (mu4e-mark-execute-all \u0026#39;no-confirm)) ;; mapping x to above function (define-key mu4e-headers-mode-map \u0026#34;x\u0026#34; #\u0026#39;my-mu4e-mark-execute-all-no-confirm) ) ;; source: http://matt.hackinghistory.ca/2016/11/18/sending-html-mail-with-mu4e/ ;; this is stolen from John but it didn\u0026#39;t work for me until I ;; made those changes to mu4e-compose.el (defun htmlize-and-send () \u0026#34;When in an org-mu4e-compose-org-mode message, htmlize and send it.\u0026#34; (interactive) (when (member \u0026#39;org~mu4e-mime-switch-headers-or-body post-command-hook) (org-mime-htmlize) (org-mu4e-compose-org-mode) (mu4e-compose-mode) (message-send-and-exit))) ;; This overloads the amazing C-c C-c commands in org-mode with one more function ;; namely the htmlize-and-send, above. (add-hook \u0026#39;org-ctrl-c-ctrl-c-hook \u0026#39;htmlize-and-send t) ) )","date":1550416275,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550416275,"objectID":"c65676284286527aff7ae2f7eccfc28f","permalink":"https://shrysr.github.io/docs/sr-config/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/sr-config/","section":"docs","summary":"Introduction This is my literate, Org-mode based configuration for Emacs, which are essentially customisations built on top of the starter-kit Scimax. View a nicely rendered version with easy navigation on my website, or if you prefer: on github.\n Scimax - Awesome editing for scientists and engineers. Scimax is an Emacs starterkit for scientists and engineers. It provides a comprehensive configuration of Emacs for scientific programming and publishing.\nJohn Kitchin","tags":["Emacs"],"title":"My Emacs / Scimax configuration.","type":"docs"},{"authors":null,"categories":null,"content":"It\u0026rsquo;s a well known trick that installing a SSD in place of the conventional Hard disk can breathe new life into very old machines. My mid 2010 Macbook Pro is one such example, being over 8 years old.\nIn particular, within Emacs - mu4e responds much more quickly and there is significantly less lag in searching / accessing emails and HTML rendering.\nThe other advantage of using a Mac over Linux is that installation and setup instructions are more often available out the box for the Mac OS (though this is changing). I have access to dedicated apps including Evernote, Dash, Spotify, Whatsap, Slack etc on my Mac. This is in addition to several other high quality apps on the App store.\nI do love using Arch Linux and Antergos and the packing management and rolling OS upgrades are totally cool. However, a little bit of elegance in the user interface and hardware (being available out of the box) does ease up the mind and progress. It takes quite a bit of effort to achieve that unless you are at the level of purely using Emacs as window manager.\nOn the Mac, it is easy to move around virtual desktops and use the magic track pad to rapidly switch between applications as well. I\u0026rsquo;m sure many of these \u0026lsquo;gimmicks\u0026rsquo; may be setup with diligence and due time on Linux through solutions with varying levels of quality.\nHowever, as of today : it\u0026rsquo;s likely I would have struggled with some aspects on Linux that are readily available on other systems. Evernote is an example. After hours of searching for an alternate (and acceptable) solution for software packages that are not yet ported to Linux, I would quite possibly end up making a compromise. Typically, the compromises would mean using Electron or Web based versions of apps, which are often not as powerful as the desktop app, not to mention inconvenient. A prime example would be Evernote, on Arch Linux. Some other examples are apps like Word, Pages, Outlook and Excel and so on, which are more critical.\nUltimately, my preference would be to use a Mac as my daily driver and play around with Linux on a back up computer. In any case, multiple Linux distros can be run on Virtual Box within the Mac.\n","date":1531180800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531180800,"objectID":"fd316138721b75ebc19db9ed43b7e613","permalink":"https://shrysr.github.io/post/01252410-853f-4570-858f-f3d609f5def5/","publishdate":"2018-07-10T00:00:00Z","relpermalink":"/post/01252410-853f-4570-858f-f3d609f5def5/","section":"post","summary":"It\u0026rsquo;s a well known trick that installing a SSD in place of the conventional Hard disk can breathe new life into very old machines. My mid 2010 Macbook Pro is one such example, being over 8 years old.\nIn particular, within Emacs - mu4e responds much more quickly and there is significantly less lag in searching / accessing emails and HTML rendering.\nThe other advantage of using a Mac over Linux is that installation and setup instructions are more often available out the box for the Mac OS (though this is changing).","tags":["Emacs","productivity","Mac","Linux"],"title":"An SSD can breathe life into old computers","type":"post"},{"authors":null,"categories":null,"content":" I\u0026rsquo;ve used Evernote since 2014, with over 3k notes of all kinds stored in it. Though I did try to capture everything of interest - the procedure was never fast or streamlined enough for me. The Evernote app runs ridiculously slower on older phones. In particular, being used to the speed of Emacs and Org mode - I was mostly displeased with the Evernote Mac / Windows apps as well. I ended up using the drafts app for writing on iOS devices.\nHowever, using Evernote was still worth due to the availability of an excellent catch-all bucket for multiple kinds of information, that can be searched on demand. I could literally whip up important receipts or scanned copies of a document and it felt wonderful to have that kind of control over your information. This foray was also fueled by the deficiencies of Emacs in mobile apps and the ability to store and refer to rich content and several file types.\nSwitching to DEVONthink Pro (DTP) I\u0026rsquo;ve recently converted to DEVONthink Pro (DTP). Though DTP is Mac / iOS only, I would personally prefer DTP over Evernote. Some advantages of DTP:\n blazing fast application response + search on both iOS and Mac. leverages AI to provide interesting connections between notes and ideas. Users have leveraged these connections to help generate new ideas from unforeseen connections. There\u0026rsquo;s more information here.  so far, my experience is that the notes have to be in a particular format,I.e one article or principal idea per note to enable a sensible matching with other relevant articles. There are several incorrect connections also made.  Better control over content organisation.  Project and folder creation, including separate databases for different kinds of work.  One time payment for a major version of the software, along with discounted upgrades. Ability to index local folders. using multiple \u0026lsquo;databases\u0026rsquo; customised to any workflow, along with the provision of password protection and syncing to multiple sources. ability to confidently store private information based on the encryption and custom syncing options available. Ability to store web archives of Linked in posts (or any content). This was not always possible with Evernote. The iOS share option of clipping to the DEVONthink to go app as a web archive works rather well most of the time. The Evernote plug-in for Chrome/ Firefox works relatively slower. connection with DEVONAgent Pro (a fascinating tool dedicated to customised and deep web search. More on this on another blog post) Deploy scripts on databases / notes and thus allowing custom workflows with particular note categories. DTP can import all your Evernote notes and tags as they are. This worked for me in a single attempt.  It\u0026rsquo;s actually hard to quantify the benefits of using DTP. There are a myriad of features within, including the ability to index locations and script automated workflows.\nFor most of the part, I found the speed and response of Evernote to be frustrating. It hindered a streamlined workflow. There are also additional irritations with respect to the .enex format and being able to encrypt information.\nNo doubt, the ubiquity of Evernote in almost all the platforms (except Linux1) works in its favor. However, the search response with DTP is incredibly rapid and the note viewing experience of DTP is extremely smooth. This is on an ancient mid 2010 macbook pro!\nIt\u0026rsquo;s also worth noting that unlike Evernote - I was actually intrigued enough to correspond with the technical support team of DTP to understand features like indexing a folder, and their responses have been prompt and helpful.\nThe best place to find up to date information is on the DEVONtechnologies forum. Even a deep search on the internet does not lead to many articles about the DEVONthink technologies products.\nSome caveats of DTP  DTP does offer all the flexibility above. However the quality of the Evernote webclipper\u0026rsquo;s output is better in several cases. The uncluttered text grab is not automated well enough. I\u0026rsquo;m yet to discover the best pattern. Several apps offer Evernote integration as a premium feature. Evernote offers a more \u0026lsquo;polished\u0026rsquo; and simpler interface and is mainstream and available on multiple platforms. The note taking editors and capture mechanism is more user friendly.  DEVONagent Pro (DAP) DAP is an intriguing bit of software that facilitates deep searches of the web and developing automated workflows including report development. Their algorithm filters searches from any number of databases / engines / websites to provide the best matches.\nOne could use this to monitor the website of a competitor for news announcements. Or crawl Hackernews for the keyword Datascience. It appears to be a tool that can provide exactly the information that we seek by processing the information out there in the web.\nThis includes generation of mind-map esque graphs connecting keywords in all the search results. I\u0026rsquo;m yet to explore more, but it is very interesting so far, especially to gain an overview of the subject.\nSome Conclusions Exploring DTP in conjunction with DEVONagent Pro is absolutely a worthwhile exercise for those relying a lot on information from the internet for their jobs and work, and those working in an apple eco-system. It has a steep(er) learning curve, but will transform your information management. DAP is also a worthy option to explore to deep search the web on focused topics.\nYes, it is mac only software. I have not been able to find any equivalent apps on windows. Another reason to stick to the Apple-verse.\nThe system is addictive and once a good workflow has been built up, it would be difficult to use anything else.\nArchiving interesting Linked in posts: One of the most killer features of using the DEVON 2 GO app is the ability to capture Linked in posts as web archives. Though not optimal, in terms of the format - it is still extremely useful to rapidly build up a reference database of web resources.\nFootnotes 1 Nixnote is one solution. I\u0026rsquo;ve seen it in action and it is useful, and probably even closer to DEVONthink. However, I could never get it working in Arch Linux reliably.\n","date":1531180800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531180800,"objectID":"12fba69aa9b6ae945723d2f4de10e064","permalink":"https://shrysr.github.io/post/ec354a8e-a276-4c89-8560-ce82b1693744/","publishdate":"2018-07-10T00:00:00Z","relpermalink":"/post/ec354a8e-a276-4c89-8560-ce82b1693744/","section":"post","summary":"I\u0026rsquo;ve used Evernote since 2014, with over 3k notes of all kinds stored in it. Though I did try to capture everything of interest - the procedure was never fast or streamlined enough for me. The Evernote app runs ridiculously slower on older phones. In particular, being used to the speed of Emacs and Org mode - I was mostly displeased with the Evernote Mac / Windows apps as well.","tags":["Evernote","note-taking","productivity"],"title":"Switching from Evernote to DEVONtechnologies products","type":"post"},{"authors":null,"categories":null,"content":"Links to certificates of courses completed on Dataquest\n Data Analyst Path in R\n Git \u0026amp; Version control\n SQL Fundamentals\n  ","date":1529020800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1529020800,"objectID":"0bd20db75065382052597e837c59721a","permalink":"https://shrysr.github.io/project/courses-dataquest/course-dataquest-datascience/","publishdate":"2018-06-15T00:00:00Z","relpermalink":"/project/courses-dataquest/course-dataquest-datascience/","section":"project","summary":"Course competition certificates from Dataquest.","tags":["python","R","Data Science","code","Course","SQL","Certificate","git"],"title":"Courses @ Dataquest","type":"project"},{"authors":null,"categories":null,"content":" The course covered an introduction to using R to extract, manipulate and thus analyse data. It basically lays the foundations to using R in data science.\nVerified EdX Certificate of Achievement  Course exercises are linked with a Datacamp course.  Data Science R basics   Course Notes and code This Jupyter notebook contains code written while following along with the course, which was expanded to illustrate concepts and notes.\n","date":1522195200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1522195200,"objectID":"537971b4baef6deb642d5020b7287ea8","permalink":"https://shrysr.github.io/project/course-edx-harvard-r/","publishdate":"2018-03-28T00:00:00Z","relpermalink":"/project/course-edx-harvard-r/","section":"project","summary":"The course covered an introduction to using `R` to extract, manipulate and thus analyse data. It basically lays the foundations to using `R` in data science.","tags":["R","Code","Course","Certificate"],"title":"EdX HarvardX PH125.1x: Data Science: R Basics","type":"project"},{"authors":null,"categories":null,"content":" Introduction To integrate tasks, reminders, notes, coding workflow into a single framework is no easy challenge. Org mode and Emacs help you do just that.\nAfter trying out several tools, IMHO : Todoist offers the best bang for your buck, especially with it\u0026rsquo;s natural language parsing ability, smooth and reliable sync as well as its multi-platform availability. Many describe Omnifocus to be the king of task management tools, with dedicated apps for different purposes and probably well integrated.\nMy journey veered away from Omnifocus since it is limited to the Apple platform and this is obviously a serious handicap for people (like me) who are often forced to use multiple operating systems and devices distributed between personal and work environments.\nI\u0026rsquo;d religiously managed my tasks on Todoist for over a year via the Chrome extensions/add-ins, the stand alone apps on Windows and the Mac, and on Android as well as iOS.\nHowever, there was something missing in terms of being able to truly capture it all. This led me to Emacs. My search is summarised in this article.\nNeeds versus the software development The real problem surfaced when my needs evolved at a pace and specificity that a general software\u0026rsquo;s development could not cater to. The problem is characterized by an endless wait for seemingly simple features that could make a phenomenal difference to personal workflow and productivity. This feature may range from a small tweak or bugfix to a rewiring of the basic behavior of the program itself.\nAdditionally, the proprietary format of tasks/notes and entries in Todoist or even Evernote is not a comforting aspect. On the other hand, using a simple text file with lists of work or notes is too simplistic to address a complex problem.\nHowever, the issue could be resolved when the simple and ubiquitous Text file is parsed by a system like Org mode with in built and novel routines to filter and present the data in the text file in a very useful. Ultimately the key factor is that the workflow and output can be completely customised as required.\nThings I\u0026rsquo;d like from a task management tool:  Rapid and seamless Task/Note taking ability - could be generic, or specific to a particular project/task. Quick capturing of links and snippets from websites and emails Consistent experience across multiple platforms and very fast sync. Ability to manage personal or work related projects A date management system with atleast reasonably good understanding of natural language Refiling tasks/notes very easily across main tasks or categories or projects Customisable Views of the task summary along with the deadlines Task and Note search and filtering at every level possible Ability to easily export notes to multiple formats and write in some form of markup language so as to take care of formatting on the go. Preferably an all-in-one tool for managing notes, all kinds of writing, research, tasks, recurring reminders, maintaining an activity log/journal, project summaries .. etc. Includes \u0026lsquo;clocking\u0026rsquo; abilities for tasks. Fast keyboard based shortcuts and \u0026lsquo;bookmarks\u0026rsquo; to do all that is required. Recording tasks or notes from the phone, while on the go. Should have the lightest footprint possible in terms of time spent on the tool, as well as system resources with no compromise in benefits derived.  Can it be achieved? Short answer: Yes. Through Emacs.\nSure, several of the above points can be done in Todoist and other tools, in one way or via combining different services.\nHowever, a holistic consideration of the above points indicate a system that is a cross between Todoist and Evernote, capable of being utilised for a multitude of purposes : a customised GTD workflow plus an organiser for notes or writings. Point no 9, could serve to be a concise but incomplete statement of Orgmode\u0026rsquo;s capabilities, and is a stark reminder of Todoist\u0026rsquo;s specific expertise in only task management. Additionally, the above points can be done in orgmode, very, very quickly. Evernote has a great system, but is not as fast, because it indexes a huge variety of content. 1\nExamples of workflows Lets say that while typing up a project summary, I remember an additional task for another project or perhaps need to note down a snippet of generic information. To compensate for the lack of a photographic memory without breaking my on-going workflow - I need to be able to store the task/note/idea in a place that I can easily look up for further processing.\nSuch an activity is not at all streamlined with Todoist, and definitely not so with Evernote. With Org mode its just a C-c c, or Control + c and hit c again. Optionally, a C-cw for refiling the note on the spot if desired. When I hit refile - I can search through my org headings or projects and place the newly captured item exactly where it should be.\nOnce accustomed to the speed of recording stuff with Org-capture, along with the myriad possibilities of auto-save, backups, moving the cursor to the last location you were at, switching to another document/heading at lightning speed and etc - it will be hard to find another system that is truly competitive.\nProject management via Emacs using the excellent projectile package can enable you to find information at a speed that is very pleasing. I have often needed to deal with several customers of different kinds, thoroughly understand their requirements, resolve technical and commercial ambiguities and be able to refer to earlier jobs where something was agreed upon. I\u0026rsquo;ve often worked in projects with a bewildering number of aspects to take care of, along with sporadic infusions of information which could be clarifications or even new information altogether.\nIncluded in project / productivity /relationship management are several subsets of activities like Minutes of Meetings (MOM\u0026rsquo;s), summaries of travel/visits to the customer, telephonic discussions, indications of future projects as well as generic or specific problems.\nUsing Org mode, it is possible create customised workflows and templates to manage all the above aspects, more than any other note taking system, including only handwritten notes. An excellent, comprehensive overview can be found in Bert Hansen\u0026rsquo;s article.\nEverybody\u0026rsquo;s needs are unique Eventually, I guess we all come to realise the fact that each human being is truly unique. Each one of us have our own ways of thinking, being and approaching problems.\nWhile Todoist worked very well for me - I was still bothered by being constrained by it\u0026rsquo;s proprietary format and the lack of a lifetime membership with a one time payment. Money spent should give me a tool that brings supreme value and satisfaction with it. It was also tiresome to take detailed notes on tasks and rely on a separate Simplenote/Evernote system via Sublime Text for this purpose. You may have a different viewpoint. You may want a great GUI design and app that works well on your phone in addition to other environments. 2\nOrgmode is more aligned to people who prefer to get most of their work done on their computers, who are or atleast don\u0026rsquo;t mind being keyboard shortcut freaks and those who would like to take the effort to learn a souped up text editor like Emacs that can evolve to cover a lot of needs efficiently. It\u0026rsquo;s not going to work well for people who need a reminder to pop up on their phones, with a fancy GUI and those who expect a software to work extremely well right out of the box. However, this is Org mode and Emacs\u0026#x2026;. there are ways to sync your iOS / outlook calendar with orgmode\u0026rsquo;s calendar, or with wunderlist or Toodledo. Anything is possible, but it just won\u0026rsquo;t be via some classy GUI..\nConcluding points While it may seem daunting at first - the feeling of being able to search through existing notes to know whether you have met this particular thought/aspect before, can be extremely valuable and very satisfying. There are people like Sacha Chua and Bert Hansen, who\u0026rsquo;ve built complex, efficient, and beautiful workflows through which a great deal of achievement has been made possible using the resulting streamlined tool. As Cal Newport often reiterates in his blog and exploration on productivity - it is important to be able to accurately quantify the time being spent on different things. The awesome-emacs list on github offers several worthy resources, along with the excellent Planet Emacsen.\nThe organiser tool by itself should have the lightest possible footprint in terms of the time taken to enter in stuff. Certainly - most people spend a lifetime in customising emacs and that may seem contrary to the previous point. However, it is possible to quickly reach a certain point that results in a marked improvement in productivity and workflow. Beyond this, leisure time can always be spent in fine-tuning the basic setup and understanding the code better.\nThe customisation options with Emacs and Org mode are literally endless and constrained only by programming skills, or Googling skills to find the code snippet that can get your work done, not to mention social skills in getting help via online communities. This is actually a lot easier than it sounds. While a bunch of people would call this a weakness, there are a large number of people who see the value in a customised tool which will evolve to facilitate a very fast and efficient workflow.\nDeliberate practise towards improvement is certainly boosted when one is able to work consistently in a environment customised to needs and workflows. Using Org mode and Emacs is a firm step in this direction.\nFootnotes 1 While Org mode is optimised for text, it is possible to attach any kind of file to a \u0026lsquo;heading\u0026rsquo;, and use interleave and other techniques to browse and annotate PDF\u0026rsquo;s. The possibilities are too numerous to be covered in a blog post or a single google search.\n2 On iOS - I\u0026rsquo;ve found Drafts is a great app for writing fast and appending the notes to an org file, which can be refiled later, using emacs. One problem I\u0026rsquo;m yet to resolve is that appending to an org file in dropbox, requires a network/internet connection. There should be a way to deal with situations without handy internet available.\n","date":1491177600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1491177600,"objectID":"293b8d3f1f538b83ae47bfa2c9adfbc3","permalink":"https://shrysr.github.io/post/2b0b2c79-3f6e-4079-a07d-9e382fda8954/","publishdate":"2017-04-03T00:00:00Z","relpermalink":"/post/2b0b2c79-3f6e-4079-a07d-9e382fda8954/","section":"post","summary":"Introduction To integrate tasks, reminders, notes, coding workflow into a single framework is no easy challenge. Org mode and Emacs help you do just that.\nAfter trying out several tools, IMHO : Todoist offers the best bang for your buck, especially with it\u0026rsquo;s natural language parsing ability, smooth and reliable sync as well as its multi-platform availability. Many describe Omnifocus to be the king of task management tools, with dedicated apps for different purposes and probably well integrated.","tags":["Org mode","Emacs","writing","productivity"],"title":"Getting productive - an exploration into holistic task management","type":"post"},{"authors":null,"categories":null,"content":"Links to certificates of courses completed on Datacamp\n Intro to SQL\n Data Science R basics.\n Completed as a part of EdX HarvardX PH125.1x: Data Science: R Basics  Introduction to Tidyverse\n Introduction to R for Finance\n  ","date":1487116800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1487116800,"objectID":"1888ca1999f4b7bbf3f58f7563e3c324","permalink":"https://shrysr.github.io/project/courses-datacamp/courses-datacamp/","publishdate":"2017-02-15T00:00:00Z","relpermalink":"/project/courses-datacamp/courses-datacamp/","section":"project","summary":"Data Science related courses completed on Datacamp.","tags":["python","R","Data Science","code","Course","Certificate","git","finance"],"title":"Courses @ Datacamp","type":"project"},{"authors":null,"categories":null,"content":"Embed your slides or video here using shortcodes. Further details can easily be added using Markdown and $\\rm \\LaTeX$ math code.\n","date":1483254000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483254000,"objectID":"cd6d9d084287506b4668ad90c6aff50a","permalink":"https://shrysr.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00-07:00","relpermalink":"/talk/example-talk/","section":"talk","summary":"Embed your slides or video here using shortcodes. Further details can easily be added using Markdown and $\\rm \\LaTeX$ math code.","tags":null,"title":"Example Talk","type":"talk"},{"authors":null,"categories":null,"content":" It is possible (and prevalent) to create templates to post process CFD Simulation results in ANSYS CFD Post using session (.cse) files. Using Shell scripts, it would then be simple to apply these session files on multiple result files and extract the output dictated by the session file.\nThis python script that enables the user to set the location of: - the session file (.cse) - the CFD result files (.res) - create a BAT script with sequential lines, each calling ANSYS CFD Post with the necessary arguments - run the session script on all the result files available in a particular location. - gracefully exit, removing all the temporary script files.\nCode On Github\nHow it helped  While these operations could be done directly in python, it is easier and simpler to control ANSYS CFD post using a BASH script. Therefore the python program creates a BASH script.   Python script \u0026quot;\u0026quot;\u0026quot; Created on Thu Dec 18 16:10:49 2014 @author: shrysr \u0026quot;\u0026quot;\u0026quot; # Description: # This is a simple program that is designed to apply am ANSYS CFD post macro on all the results available at a particular location, one after the other. There are 3 strings required to be set as input by the user. # 1. The location of the ANSYS CFD Post executable # 2. THe path to the macro file (.cst/.cse) # 3. The folder location where the result files are located. # Note : the \u0026gt;quit command can be written in the post macro to optionally execute the post macro on one file after the other automatically. Otherwise CFD Post has to be quit manually by the user after the macro is applied on each file. ###---------- USER INPUT -------------### # Setting the paths to various locations. CFDPost_loc=r'\u0026quot;C:\\Program Files\\ANSYS Inc\\v145\\CFD-Post\\bin\\cfdpost\u0026quot;' #Setting the path to the ANSYS CFD Post executable. Post_template_loc=r'\u0026quot;C:\\\\example_location\\post_macro.cse\u0026quot;' #Path to the .cse/.cst post macro to be applied. Res_loc=r\u0026quot;Q:\\Queueing_sys\\Completed\\Archive\\Shreyas\u0026quot; #Folder location of the result file path ###---x---x--x-- USER INPUT -x---x---x---x--### #importing required libraries import os import glob import subprocess as sp #Creating BAT script for extracting the list of res files in the current working folder - sorted Date wise def res_list_syn(Res_loc): \u0026quot;\u0026quot;\u0026quot; Grabs all the CFX res files in the chosen location (Res_loc) and stores them in the variable (array) A1. The variableA1 is passed onto another function which uses the array contents Example: \u0026gt;\u0026gt;\u0026gt; Res_loc=r\u0026quot;Q:\\Queueing_sys\\Completed\\Archive\u0026quot; \u0026gt;\u0026gt;\u0026gt; post_syn(Res_loc) \u0026gt;\u0026gt;\u0026gt; return variableA1 \u0026quot;\u0026quot;\u0026quot; print \u0026quot;\u0026quot; print \u0026quot;Grabbing all res files from chosen location.\u0026quot; os.chdir(Res_loc) reslist=glob.glob('*.res') print \u0026quot;Passing the list of res files to the Post_Syn function\u0026quot; post_syn(reslist) def post_syn(variable): print \u0026quot; \u0026quot; print \u0026quot;Listing grabbed res files and creating Post BAT file in chosen location...\u0026quot; print \u0026quot;\u0026quot; post_batname='Post_bat_runner.BAT' post_bat_loc=os.path.join(Res_loc,post_batname) PC=open(post_bat_loc,'w') PC.write('cd /d \u0026quot;%s\u0026quot;\\n'%Res_loc) i=0 while i\u0026lt;len(variable): print \u0026quot;%d --%s\u0026quot; %(i,variable[i]) PC.write('%s -s %s %s\\n' %(CFDPost_loc,Post_template_loc,variable[i])) i+=1 PC.close() print \u0026quot;Running post macro on all the listed Res Files....\u0026quot; print '' sp.call(post_bat_loc) t.sleep(5) print 'Killing temp files...' t.sleep(5) File_killer(Res_loc,'BAT') #Function for deleting temp Files. Prevents Clutter. def File_killer(folder_location, type_of_extension): for variable in glob.glob('%s/*.%s'%(folder_location,type_of_extension)): if os.path.isfile(variable): os.remove(variable) #Starting Program. Geting current working directory print \u0026quot;Hello. Program Launch...--\u0026gt;\u0026quot; print \u0026quot;\u0026quot; print \u0026quot;The chosen result location to be scanned is: %s\u0026quot;%Res_loc print \u0026quot;\u0026quot; print \u0026quot;Starting scan\u0026quot; res_list_syn(Res_loc)  ","date":1369612800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1369612800,"objectID":"ab64ac7d1072546b098562ba5c309e1d","permalink":"https://shrysr.github.io/project/cfd-post-processing-python/","publishdate":"2013-05-27T00:00:00Z","relpermalink":"/project/cfd-post-processing-python/","section":"project","summary":"`python` script to help automate post processing of simulations, by applying an extraction macro on multiple result files.","tags":["python","code","automation","CFD"],"title":"CFD Post Processing automation","type":"project"},{"authors":null,"categories":null,"content":" View : CFD-Online Wiki page.\nMotivation During my initial foray into open source CFD and especially getting started with Linux - there was a lot of information that I had to collate from different sources in order to figure out each step. In addition, there were perspectives on performance that could be gained only through experience. Therefore, I plugged back the knowledge gained to the CFD-Online wiki with the idea that it would help any newbie get started a little quicker.\nIn the last few years, the number of courses and the material available on-line on CFD, Linux and applying Numerical techniques has increased substantially. This is somewhat supported by the increasing trend of page views shown on the CFD-Online Wiki. Nevertheless, this document still serves as a useful overview and getting started guide.\nThe documentation explores the idea of Open Source software, and the basic techniques to get started with the exploration. Eg: the different options of running Linux on your current machine as well as the pros and cons of each approach, and the software options available, as well as links to useful and high quality information and tutorials.\n","date":1369612800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1369612800,"objectID":"cf8665ab01bfa0ff109cdd1e591b9126","permalink":"https://shrysr.github.io/project/cfd-on-line-wiki/cfd-online-wiki/","publishdate":"2013-05-27T00:00:00Z","relpermalink":"/project/cfd-on-line-wiki/cfd-online-wiki/","section":"project","summary":"Documentation (based on actual exploration) to the popular CFD-Online wiki related to getting started with Open Source CFD.","tags":["documentation","CFD","open-source","Linux"],"title":"Contributions to the CFD-Online Wiki","type":"project"},{"authors":null,"categories":null,"content":"This project utilized MATLAB, Solidworks to research and design a human finger and calculate the range of it\u0026rsquo;s motion. SIMULINK is also utilised to design a PID controller for the wrist.\n","date":1369612800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1369612800,"objectID":"efee832f269676d0c1e59ab8b0460559","permalink":"https://shrysr.github.io/project/kinematic-finger-design/kinematic-design-finger/","publishdate":"2013-05-27T00:00:00Z","relpermalink":"/project/kinematic-finger-design/kinematic-design-finger/","section":"project","summary":"This project utilized MATLAB, Solidworks to research and design a human finger and calculate the range of it's motion. SIMULINK is also utilised to design a PID controller for the wrist.","tags":["CAD","code","MATLAB","SIMULINK","Solidworks","Design","Research"],"title":"Design of an Electro-mechanical prosthetic finger, and a PID controller for the wrist.","type":"project"},{"authors":null,"categories":null,"content":"  Scheduler Psuedo-Algorithm   Introduction Code On Github\nPresentation\nWiki on Github\nThis is a Python script for a portable, scalable job scheduler with multiple priorities - for ANSYS CFX simulations. The script was designed to be called every minute by an external scheduler program.\n In the practical case, the free version of the software System Scheduler was used to deploy the script successfully, for over 3 years, managing 2 computing clusters.  Once called, the program basically loops through pre designated folders and lists .def files based on the last modified date available in Windows. The system interaction is via BASH scripts created via the Python code, as well as the python OS library. There are several in-built flags to support priority, pausing a particular cluster, logging data and troubleshooting.\nThe idea behind the project was to create a multi-platform job scheduler for ANSYS CFX that has a balance between sophistication and ease of deployment (and management). Typically job schedulers and load balancing programs are relatively very sophisticated and complex to setup with several pre-requisites and constraints. Such complexity dictates expensive commercial support and licensing considerations.\nProblem Statement A job scheduler or simulation management system was required to address the following:\n Optimum and continuous simulation solver license utilisation by all members of the team in a First-In-First-Out (FIFO) basis, Provision for dynamic or urgent priority jobs, as well as an interface to submit simulations or view job history. Optimisation and management of workload of simulation jobs facilitating overall project management and planning.  What the program accomplished  Allowed users to submit simulations by simply placing the input files in a particular folder location, which also served as a particular priority basket. Removed the need of creating manual scripts to submit multiple simulations and resolved inefficient license utilisation approaches. Facilitated a optimised approach to certain design cases, thus resulting in a 75% reduction in simulation time Enabled the use of consistent solver and memory utilisation parameters and settings, allowing efficient deployment and reducing inefficiencies due to errors. Allowed optimal or perfect utilisation of available licensing scheme, resulting in a significant increase in team output and productivity.  Tools used and links  Written with Python 2.7, using portable python, Spyder, Notepad ++ and Sublime Text 3. System Scheduler  ","date":1369612800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1369612800,"objectID":"9b66bd9a3584e45f66245e79bf55b0a5","permalink":"https://shrysr.github.io/project/cfd-cfx-simulation-scheduler/cfd-cfx-job-scheduler/","publishdate":"2013-05-27T00:00:00Z","relpermalink":"/project/cfd-cfx-simulation-scheduler/cfd-cfx-job-scheduler/","section":"project","summary":"`python` script to manage and schedule ANSYS CFX simulations on designated computing clusters.","tags":["python","code","automation","CFD"],"title":"Simulation job scheduler","type":"project"},{"authors":null,"categories":null,"content":"This project undertakes a technology study and survey covering the methods to controlling harmful emission from Diesel engines in particular and the efficacy different technologies. It explores current emission norms and the contradicting formation conditions of NOx and CO.\n","date":1297728000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1297728000,"objectID":"b064dc5eb623115eb0997aa2ffb161be","permalink":"https://shrysr.github.io/project/emission-technology-ic/emission-technology/","publishdate":"2011-02-15T00:00:00Z","relpermalink":"/project/emission-technology-ic/emission-technology/","section":"project","summary":"This project undertakes a technology study and survey covering the methods to controlling harmful emission from Diesel engines in particular and the efficacy different technologies. It explores current emission norms and the contradicting formation conditions of NOx and CO","tags":["Combustion","Design","Research","IC Engines","Emission"],"title":"Current Trends of Emission Reduction Technology in Vehicular Diesel Engines.","type":"project"},{"authors":["Shreyas Ragavan"],"categories":null,"content":"","date":1293840000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1293840000,"objectID":"0f49ea72dfcdd6b8f374348cbf7c82dd","permalink":"https://shrysr.github.io/publication/emission-study/","publishdate":"2011-01-01T00:00:00Z","relpermalink":"/publication/emission-study/","section":"publication","summary":"Combustion is the primary source of vehicular pollution,[1]. The Euro countries recently agreed on the goal that would reduce current vehicular emission , in particular carbon emissions by 85% by 2050. This would mean a 95% reduction in the carbonisation of the transportation sector, which is one of the accepted prolific contributors to pollution,[10]. As will be seen, de-carbonisation is a key issue with vehicular light duty diesel engine emissions, [9],along with reduction in NOx, with the latter being highlighted[3,4]. Two constituents of diesel emissions, Particulate Matter (PM) and NOx are contradictory in the conditions of their formation and hence require a combination of technologies to solve the problem satisfactorily. Consequently, emission reduction technologies are of extreme importance. The most stringent norms are those of Super Ultra Low Emission Vehicles (SULEV) formed by the Environmental Protection Agency (EPA) and the Euro 6 has been proposed and awaiting approval. The author’s opinion of a balanced solution being a combination of several technologies is established. The logical path to this conclusion is presented, duly referenced.","tags":null,"title":"Current Trends of Emission Reduction Technology in Vehicular Diesel Engines","type":"publication"},{"authors":["Shreyas Ragavan"],"categories":null,"content":"","date":1292371200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1292371200,"objectID":"b84a9c47d8fe4565fdfcdafd32eb51b2","permalink":"https://shrysr.github.io/publication/kinematic-design-finger/","publishdate":"2010-12-15T00:00:00Z","relpermalink":"/publication/kinematic-design-finger/","section":"publication","summary":"The design of the finger to be attached to a modular prosthetic hand and a controller solution for the wrist are explored in this effort. A novel design of a sliding body has been proposed using a Solidworks model where the outershell, providing form to the finger can be slid in or out off a of a light weight chassis and tightened with a screw. In addition to this the end effector is removabl. This provides an easy method to inspect the mechanism especially as the wiring and the motors are embedded inside.The report deals with key aspects such as the using the forward kinematics (Denavit-Hartenberg equations (DHE)) to component selection for building the model. The wrist is treated as as separate design issue and a Proportional Integral Derivative (PID) controller has been designed and manually tuned to control the rotation of the wrist, using Simulink. Though these continuous equations applied, are assuming ideal conditions, a saturation of the output provides realistic limits and conditions and a more realistic view of what occurs. The results obtained and the tuning process are explained and the conclusions are reached.","tags":null,"title":"Design of an Electro-mechanical Anthropometric finger, and a PID controller for the wrist for applications in Prosthetics","type":"publication"}]