<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overview | Shreyas Ragavan</title>
    <link>https://shreyas.ragavan.co/docs/</link>
      <atom:link href="https://shreyas.ragavan.co/docs/index.xml" rel="self" type="application/rss+xml" />
    <description>Overview</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 20 Dec 2018 00:00:00 -0700</lastBuildDate>
    <image>
      <url>https://shreyas.ragavan.co/img/icon-192.png</url>
      <title>Overview</title>
      <link>https://shreyas.ragavan.co/docs/</link>
    </image>
    
    <item>
      <title>Using ESS for Data Science</title>
      <link>https://shreyas.ragavan.co/docs/ess-datascience-r/</link>
      <pubDate>Fri, 15 Mar 2019 11:43:00 -0600</pubDate>
      <guid>https://shreyas.ragavan.co/docs/ess-datascience-r/</guid>
      <description>

&lt;p&gt;RStudio is a formidable IDE to work with and offers an environment to seamlessly work with multiple languages beyond R. It is especially convenient for tasks involving frequent visualisation of data frames and plots, and for use with Shiny app development.&lt;/p&gt;

&lt;p&gt;However, the text (i.e code) editing capabalities are still significantly lacking compared to the likes of Emacs and Vim. Besides this, it does not offer a seamless interface integrating task, time management and multi-language programming environments to the extent available within Org-mode via Emacs. Enter ESS !&lt;/p&gt;

&lt;p&gt;This is an evolving document of how I use ESS  and will be a useful guide to anybody starting out with ESS especially for R based workflows. My ESS configuration is mostly available in my Dotemacs documentation. However this is a deeper dive into ESS workflows for data science projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Emacs Speaks Statistics (ESS) is an add-on package for GNU Emacs. It is designed to support editing of scripts and interaction with various statistical analysis programs such as R, S-Plus, SAS, Stata and OpenBUGS/JAGS. Although all users of these statistical analysis programs are welcome to apply ESS, advanced users or professionals who regularly work with text-based statistical analysis scripts, with various statistical languages/programs, or with different operating systems might benefit from it the most.&lt;/p&gt;

&lt;p&gt;The rationale for developing ESS is that most statistical analysis systems provide a more or less sophisticated graphical user interface (GUI). However, their full power is only available using their scripting language. Furthermore, complex statistical analysis projects require a high degree of automation and documentation which can only be handled by creating statistical analysis scripts. Unfortunately, many statistics packages provide only weak text editor functionality and show major differences between them. Without a unified text editor user interface additional effort is required from the user to cope with limited functionality and with text editor differences.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ess.r-project.org/&#34; target=&#34;_blank&#34;&gt;ESS website&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://ess.r-project.org/index.php?Section=documentation&amp;amp;subSection=manuals&#34; target=&#34;_blank&#34;&gt;Different versions of the ESS manual&lt;/a&gt; are available online and it is worth a frequent read to aid familiarisation with the commands and features available. The ESS mailing list is also worth subscribing to.&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;While it seems that ESS is reasonably popular, it was surprising to find relatively few examples of configurations on the web. The &lt;a href=&#34;https://www.emacswiki.org/emacs/EmacsSpeaksStatistics&#34; target=&#34;_blank&#34;&gt;Emacs ESS wikipage&lt;/a&gt; and &lt;a href=&#34;https://emacs.readthedocs.io/en/latest/ess%5F%5Femacs%5Fspeaks%5Fstatistics.html&#34; target=&#34;_blank&#34;&gt;Yi Tang&amp;rsquo;s Emacs configuration&lt;/a&gt; are among the few useful resources I&amp;rsquo;ve been able to find.&lt;/p&gt;

&lt;h2 id=&#34;starting-a-new-project&#34;&gt;Starting a new project&lt;/h2&gt;

&lt;p&gt;Typically, I start with a fresh Org-mode document for a new project in a repository of its own. This is as easy as &lt;code&gt;M-x nb-new&lt;/code&gt; in Scimax. This initialises a new git repository in the designated projects folder. Currently, I have each such project as a submodule of the main project repo.&lt;/p&gt;

&lt;p&gt;It may seem convenient to include libraries and a variety of other customisations in the .Rrofile startup. However, as mentioned in the initial comments of this &lt;a href=&#34;https://stackoverflow.com/questions/1189759/expert-r-users-whats-in-your-rprofile&#34; target=&#34;_blank&#34;&gt;SO Discussion&lt;/a&gt;, in the interest of reproducibility - it is better to have a script run commands at the beginning of each session. Alternately, one could use a package like YASnippet to insert snippets of frequently used code.&lt;/p&gt;

&lt;h2 id=&#34;org-documents-for-literate-programming&#34;&gt;Org documents for literate programming&lt;/h2&gt;

&lt;p&gt;Being a fan of literate programming, my code is usually embedded into Org-babel source blocks in line with the explanations or analysis.&lt;/p&gt;

&lt;p&gt;For longer projects, I often define a Yasnippet extension for the source code blocks specifying a unique session name to cater to that project. This prevents mixing up of variables and environments between projects as I switch, and I can search and insert snippets with the handy &lt;code&gt;ivy-yasnippet&lt;/code&gt; package that allows previews of snippets before insertion.&lt;/p&gt;

&lt;p&gt;Typically, I enter the major mode from the Org-Babel source block (&lt;code&gt;C-c &#39;&lt;/code&gt; inside a source block) to enable access to mode specific features like command completion, variable access and so on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is worth noting that when entering a major mode from a source block, the correct or desired ESS process has to be attached, especially if you are simultaneously using multiple sessions. This can be done with the &lt;code&gt;C-c C-s&lt;/code&gt; command after entering the major mode buffer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;frequently-used-ess-commands&#34;&gt;Frequently used ESS commands&lt;/h2&gt;

&lt;p&gt;Though there are many commands available - the ones listed below are worth noting. Going through the ESS manual is definitely worth the effort to understand detailed descriptions of these commands. Another simple way to search for commands within ESS is using the &lt;code&gt;M-x&lt;/code&gt; command and type in &amp;lsquo;ess&amp;rsquo; to view the commands available.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;M-p&lt;/code&gt;, &lt;code&gt;M-n&lt;/code&gt; : Previous and next command in comint input history.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-r&lt;/code&gt;      : Regex search of input history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-x&lt;/code&gt;  : List of objects in the environment. Prepend &lt;code&gt;C-u&lt;/code&gt; to print to console. Note that it is possible to list commands of libraries by prepending numbers to &lt;code&gt;C-c C-x&lt;/code&gt;. The default prefix is the global environment, which is a prefix of 1, i.e &lt;code&gt;C-1 C-c C-x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-v&lt;/code&gt;  : Help at point.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-q&lt;/code&gt;  : Ess-quit. This is important to use when exiting an R session. Using this makes sure that temporary buffers are quit. Such buffers can pile up very easily as you use the help documentation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-z&lt;/code&gt;  : Switch between the R script and the process buffer. This is a nifty feature especially when when using&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-M-x&lt;/code&gt;    : Sends the current selected region or function or paragraph.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-d v&lt;/code&gt;: (ess-display-vignettes) this is a handy method to browse all the available vignettes. This opens up a buffer, which contains links to vignettes in multiple formats (PDF, Rmd, Rnw). Note that the vignettes of a newsly installed package is loaded only after being loaded with the library function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-e w&lt;/code&gt; : Resizing the display to adapt to a buffer that has changed dimension. i.e if I split the R terminal buffer which changes it&amp;rsquo;s size - this command will enable the output to be better adjusted to the buffer size and thus enable better readability.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;window-configuration&#34;&gt;Window configuration&lt;/h2&gt;

&lt;p&gt;The ESS manual has a helpful snippet if you prefer your window arrangement similar to Rstudio&amp;rsquo;s, which is quite sensible as such. The width values can be modified as required.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq display-buffer-alist
      `((&amp;quot;*R Dired&amp;quot;
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (slot . -1)
         (window-width . 0.33)
         (reusable-frames . nil))
        (&amp;quot;*R&amp;quot;
         (display-buffer-reuse-window display-buffer-at-bottom)
         (window-width . 0.35)
         (reusable-frames . nil))
        (&amp;quot;*Help&amp;quot;
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (slot . 1)
         (window-width . 0.33)
         (reusable-frames . nil))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rmarkdown-polymode&#34;&gt;Rmarkdown : Polymode&lt;/h2&gt;

&lt;p&gt;Polymode makes it easy to work with Rmd, Rnw, Snw format documents within Emacs. The only configuration necessary for this Is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;poly-markdown)
(require &#39;poly-R)

;; MARKDOWN
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.md&amp;quot; . poly-markdown-mode))

;; R modes
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.Snw&amp;quot; . poly-noweb+r-mode))
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.Rnw&amp;quot; . poly-noweb+r-mode))
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.Rmd&amp;quot; . poly-markdown+r-mode))

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exporting&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Exporting&lt;/h2&gt;

&lt;p&gt;When sharing documents, it is necessary to convert to a format non-Emacs users can user. My current approach is to use &lt;code&gt;ox-ipynb&lt;/code&gt; package to export to as a jupyter notebook, and then the excellent jupytext package to convert to Rmd.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Emacs &#43; Scimax configuration</title>
      <link>https://shreyas.ragavan.co/docs/sr-config/</link>
      <pubDate>Sun, 03 Nov 2019 07:04:34 -0700</pubDate>
      <guid>https://shreyas.ragavan.co/docs/sr-config/</guid>
      <description>

&lt;h2 id=&#34;introduction-and-preamble&#34;&gt;Introduction and preamble&lt;/h2&gt;

&lt;p&gt;This is my literate, Org-mode based configuration for Emacs, which are essentially customisations built on top of the starter-kit Scimax. View a nicely rendered version with easy navigation &lt;a href=&#34;https://shrysr.github.io/docs/sr-config/&#34; target=&#34;_blank&#34;&gt;on my website&lt;/a&gt;, or if you prefer: &lt;a href=&#34;https://github.com/shrysr/dotemacs&#34; target=&#34;_blank&#34;&gt;on github&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scimax - Awesome editing for scientists and engineers. Scimax is an Emacs starterkit for scientists and engineers. It provides a comprehensive configuration of Emacs for scientific programming and publishing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jkitchin&#34; target=&#34;_blank&#34;&gt;John Kitchin&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Scimax specific variables have their own heading to make it &amp;lsquo;easier&amp;rsquo; to experiment with other starter-kits.&lt;/p&gt;

&lt;p&gt;The style of documentation is particularly influenced by the &lt;a href=&#34;https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org&#34; target=&#34;_blank&#34;&gt;dotemacs config&lt;/a&gt; of &lt;a href=&#34;https://github.com/angrybacon&#34; target=&#34;_blank&#34;&gt;Mathieu Marques&lt;/a&gt;, which I found very engaging to read.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The configuration posted on my website and github repo are updated from time to time, and may be older than the version I am using everyday.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;this-configuration&#34;&gt;This configuration&lt;/h3&gt;

&lt;p&gt;Scimax&amp;rsquo;s init calls the &lt;code&gt;user.el&lt;/code&gt; script placed in the user folder. The following snippet is placed in &lt;code&gt;user.el&lt;/code&gt; to load this org file and then my encrypted personal configuration. This org file and the tangled emacs-lisp script is also available in a &lt;a href=&#34;https://github.com/shrysr/dotemacs&#34; target=&#34;_blank&#34;&gt;github repo&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Loading this file that you are viewing, which I name sr-config.org
(org-babel-load-file (expand-file-name &amp;quot;sr-config.org&amp;quot; user-emacs-directory))

;; Loading secret config containing personal information
(org-babel-load-file (expand-file-name &amp;quot;sr-secrets.org.gpg&amp;quot; user-emacs-directory))

(garbage-collect)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Using this configuration&lt;/p&gt;

&lt;p&gt;While using the Org file - you may need to set &lt;code&gt;:tangle no&lt;/code&gt; in the headers for the code snippets that you do not need, and set the location of directories for org files, org agenda etc.&lt;/p&gt;

&lt;p&gt;A bunch these scripts are not tangled and kept for testing or reference purposes. The tangled &lt;code&gt;config.el&lt;/code&gt; contains the actual configuration that is used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Method 1&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone Scimax&lt;/li&gt;
&lt;li&gt;Add the above snippet to &lt;code&gt;user.el&lt;/code&gt; in the user directory. Update the file name and paths as required.&lt;/li&gt;
&lt;li&gt;Place this org file in the user directory.&lt;/li&gt;
&lt;li&gt;Run the provided script for installing the packages needed for Scimax. Once that is done, &lt;code&gt;user.el&lt;/code&gt; will call this org file.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Method 2&lt;/p&gt;

&lt;p&gt;Pick up snippets that you like from the &lt;code&gt;config.el&lt;/code&gt; file, which is tangled from this org file, and only includes the snippets that I actually use.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Overall Tasks and Areas of Improvement &lt;code&gt;[0/5]&lt;/code&gt;&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Remove packages that are no longer used&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Switch to the use-package approach everywhere.&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Improve the documentation to make it more user friendly.&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Improve instructions to use this configuration&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Figure out how external packages can be installed.&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Script to create symlinks of configuration in scimax/user directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ln -s ~/scimax-personal/preload.el ~/scimax/user/
ln -s ~/scimax-personal/user.el ~/scimax/user/
ln -s ~/scimax-personal/sr-config.org ~/scimax/user/
ln -s ~/scimax-personal/user.el ~/scimax/user/
rm -rf ~/scimax/user/snippets
ln -s ~/scimax-personal/snippets ~/scimax/user/
ln -s ~/scimax-personal/sr-secrets.org.gpg ~/scimax/user/
ln -s ~/scimax-personal/archive ~/scimax/user/
ln -s ~/scimax-personal/external_packages ~/scimax/user/
ln -s ~/scimax-personal/preload.el ~/scimax/user/
ln -s ~/scimax-personal/mail/.mbsyncrc ~/.mbsyncrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using sudo for fastmail certification&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ln -s ~/scimax-personal/mail/fmail.crt /etc/postfix/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other-literate-emacs-configs&#34;&gt;Other literate Emacs configs&lt;/h3&gt;

&lt;p&gt;These references were used for exploration and inspiration. Other resources and references are included with the code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://karl-voit.at/2017/06/03/emacs-org/&#34; target=&#34;_blank&#34;&gt;Karl Voit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org&#34; target=&#34;_blank&#34;&gt;Mathieu Marques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://writequit.org/org/&#34; target=&#34;_blank&#34;&gt;Lee Hinman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pages.sachachua.com/.emacs.d/Sacha.html&#34; target=&#34;_blank&#34;&gt;Sacha Chua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Bernt Hansen&amp;rsquo;s very detailed Org-mode config&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;stable-core&#34;&gt;Stable Core&lt;/h2&gt;

&lt;p&gt;These are packages and functions that I know to be working as expected, and settings that I use on a daily basis.&lt;/p&gt;

&lt;h3 id=&#34;os-level-variables&#34;&gt;OS Level variables &lt;code&gt;[0/0]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Since I switch between a Linux machine and a Mac frequently, it is better to define variables that can be used to set other variables depending on the OS.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Get current system&#39;s name
(defun insert-system-name()
  (interactive)
  &amp;quot;Get current system&#39;s name&amp;quot;
  (insert (format &amp;quot;%s&amp;quot; system-name))
  )

;; Get current system type
(defun insert-system-type()
  (interactive)
  &amp;quot;Get current system type&amp;quot;
  (insert (format &amp;quot;%s&amp;quot; system-type))
  )

;; Check if system is Darwin/Mac OS X
(defun system-type-is-darwin ()
  (interactive)
  &amp;quot;Return true if system is darwin-based (Mac OS X)&amp;quot;
  (string-equal system-type &amp;quot;darwin&amp;quot;)
  )

;; Check if system is GNU/Linux
(defun system-type-is-gnu ()
  (interactive)
  &amp;quot;Return true if system is GNU/Linux-based&amp;quot;
  (string-equal system-type &amp;quot;gnu/linux&amp;quot;)
  )
(message &amp;quot;Completed OS Level variables load&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;browse-kill-ring&#34;&gt;Browse kill ring&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package browse-kill-ring
  :ensure t
  :defer nil
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;remove-trailing-whitespace-at-the-end-of-lines&#34;&gt;Remove trailing whitespace at the end of lines&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;before-save-hook &#39;delete-trailing-whitespace)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;remove-at-the-start-of-ivy-commands&#34;&gt;Remove &amp;lsquo;^&amp;rsquo; at the start of ivy commands&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq ivy-initial-inputs-alist nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;move-to-the-next-sentence&#34;&gt;Move to the next sentence&lt;/h3&gt;

&lt;p&gt;As mentioned in the reference, by default in Emacs, a double space is set to end a sentence.  This removes that. However, there are tools in scimax to move backwards.
Reference: &lt;a href=&#34;http://pragmaticemacs.com/emacs/move-to-startend-of-line-or-sentence/&#34; target=&#34;_blank&#34;&gt;http://pragmaticemacs.com/emacs/move-to-startend-of-line-or-sentence/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; sentences end with single space
(setq sentence-end-double-space nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;package-installation&#34;&gt;Package installation&lt;/h3&gt;

&lt;h4 id=&#34;package-list&#34;&gt;Package list&lt;/h4&gt;

&lt;p&gt;Though the use-package approach is a lot more elegant, I also like to have a list of all my installed packages. In any case, this is more in line with my earlier configurations. As things evolve, I will probably shift completely to the use-package method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq package-list &#39;(diminish
                     ;; ztree
                     ;; org-gcal
                     w3m
                     ;; org-trello
                     org-web-tools
                     auto-indent-mode
                     ob-sql-mode
                     dash
                     org-super-agenda
		     ;; workgroups2
                     switch-window
                     ess
                     ess-R-data-view
                     ;; interleave
                     deft
                     org-bookmark-heading
                     writeroom-mode
                     ;; evil
                     ;; evil-leader
                     polymode
                     poly-R
                     helm-ag
                     writegood-mode
                     artbollocks-mode
                     multiple-cursors
                     ox-reveal
                     better-defaults
                     jedi jedi-core
                     ag ein
                     ;; ein-mumamo
                     ido-vertical-mode
                     company-jedi
                     conda
                     ;; spacemacs-theme
                     ;; elfeed-goodies
                     helpful
                     browse-kill-ring
                     ivy-yasnippet
                     speed-type
                     clojure-mode
                     cider
                     helm-dash
                     org-projectile
                     bash-completion
                     elmacro
                     helm-org-rifle
                     sx define-word))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;fetch-and-install-missing-packages&#34;&gt;Fetch and install missing packages&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;;fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

;; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;switch-window-configuration&#34;&gt;Switch-window configuration&lt;/h3&gt;

&lt;p&gt;Source link: &lt;a href=&#34;https://github.com/dimitri/switch-window&#34; target=&#34;_blank&#34;&gt;https://github.com/dimitri/switch-window&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package switch-window
  :config
  ;;

  (require &#39;switch-window)

  (global-set-key (kbd &amp;quot;C-x o&amp;quot;) &#39;switch-window)
  (global-set-key (kbd &amp;quot;C-x 1&amp;quot;) &#39;switch-window-then-maximize)
  (global-set-key (kbd &amp;quot;C-x 2&amp;quot;) &#39;switch-window-then-split-below)
  (global-set-key (kbd &amp;quot;C-x 3&amp;quot;) &#39;switch-window-then-split-right)
  (global-set-key (kbd &amp;quot;C-x 0&amp;quot;) &#39;switch-window-then-delete)

  (global-set-key (kbd &amp;quot;C-x 4 d&amp;quot;) &#39;switch-window-then-dired)
  (global-set-key (kbd &amp;quot;C-x 4 f&amp;quot;) &#39;switch-window-then-find-file)
  (global-set-key (kbd &amp;quot;C-x 4 m&amp;quot;) &#39;switch-window-then-compose-mail)
  (global-set-key (kbd &amp;quot;C-x 4 r&amp;quot;) &#39;switch-window-then-find-file-read-only)

  (global-set-key (kbd &amp;quot;C-x 4 C-f&amp;quot;) &#39;switch-window-then-find-file)
  (global-set-key (kbd &amp;quot;C-x 4 C-o&amp;quot;) &#39;switch-window-then-display-buffer)

  (global-set-key (kbd &amp;quot;C-x 4 0&amp;quot;) &#39;switch-window-then-kill-buffer)

  ;; selecting minibuffer
  (setq switch-window-minibuffer-shortcut ?z)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-intermediate-directories-while-saving-files&#34;&gt;Create intermediate directories while saving files&lt;/h3&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://superuser.com/questions/131538/can-i-create-directories-that-dont-exist-while-creating-a-new-file-in-emacs&#34; target=&#34;_blank&#34;&gt;https://superuser.com/questions/131538/can-i-create-directories-that-dont-exist-while-creating-a-new-file-in-emacs&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defadvice find-file (before make-directory-maybe (filename &amp;amp;optional wildcards) activate)
  &amp;quot;Create parent directory if not exists while visiting file.&amp;quot;
  (unless (file-exists-p filename)
    (let ((dir (file-name-directory filename)))
      (unless (file-exists-p dir)
        (make-directory dir)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;shortcuts-and-registers&#34;&gt;Shortcuts and registers&lt;/h3&gt;

&lt;h4 id=&#34;registers&#34;&gt;Registers&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(set-register ?n (cons &#39;file &amp;quot;~/my_org/notes.org&amp;quot;))
(set-register ?l (cons &#39;file &amp;quot;~/application_letters/letter.md&amp;quot;))
(set-register ?k (cons &#39;file &amp;quot;~/application_letters/Cover_letter_Shreyas_R.pdf&amp;quot;))
(set-register ?p (cons &#39;file &amp;quot;~/org_cv/CV_Shreyas_Ragavan.pdf&amp;quot;))
(set-register ?r (cons &#39;file &amp;quot;~/org_cv/CV_Shreyas_Ragavan.org&amp;quot;))
(set-register ?t (cons &#39;file &amp;quot;~/my_org/todo-global.org&amp;quot;))
(set-register ?i (cons &#39;file &amp;quot;~/dotemacs/.emacs.d/new-init.org&amp;quot;))
(set-register ?j (cons &#39;file &amp;quot;~/my_org/mrps_canjs.org&amp;quot;))
(set-register ?f (cons &#39;file &amp;quot;~/scimax/user/sr-cust/&amp;quot;))
(set-register ?d (cons &#39;file &amp;quot;~/my_org/datascience.org&amp;quot;))
(set-register ?m (cons &#39;file &amp;quot;~/my_org/&amp;quot;))
(set-register ?b (cons &#39;file &amp;quot;~/my_org/blog-book.org&amp;quot;))
(set-register ?g (cons &#39;file &amp;quot;~/my_gits/&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;google-this&#34;&gt;Google this&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;M-s g&amp;quot;) &#39;google-this-mode-submap)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;ivy-yasnippet&#34;&gt;ivy-yasnippet&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;M-s i&amp;quot;) &#39;ivy-yasnippet)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;mu4e-related&#34;&gt;Mu4e related&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;M-s u&amp;quot;) &#39;mu4e-update-mail-and-index)
(global-set-key (kbd &amp;quot;M-s m&amp;quot;) &#39;mu4e~headers-jump-to-maildir)
(global-set-key (kbd &amp;quot;C-x m&amp;quot;) &#39;mu4e-compose-new)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-related&#34;&gt;Org related&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;C-x t&amp;quot;) &#39;org-insert-todo-heading)
(global-set-key (kbd &amp;quot;C-c d&amp;quot;) &#39;org-time-stamp)
(global-set-key (kbd &amp;quot;M-s s&amp;quot;) &#39;org-save-all-org-buffers)
;;(global-set-key (kbd &amp;quot;M-s j&amp;quot;) &#39;org-journal-new-entry)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;shortcuts-for-punching-in-and-out&#34;&gt;Shortcuts for punching in and Out&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;C-&amp;lt;f9&amp;gt;&amp;quot;) &#39;sr/punch-in)
(global-set-key (kbd &amp;quot;M-&amp;lt;f9&amp;gt;&amp;quot;) &#39;sr/punch-out)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setting-the-super-and-hyper-key&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Setting the super and hyper Key&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(if system-name-is-darwin
    (progn
      (setq mac-right-command-modifier &#39;hyper)
      (setq mac-right-option-modifier &#39;super)
      )
  )

(if system-name-is-gnu
    (progn
      (setq right-command-)
      )
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;shortcut-for-frog-jump-buffer&#34;&gt;Shortcut for frog-jump-Buffer&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;M-s f&amp;quot;) &#39;frog-jump-buffer)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#+END_SRC&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;frog-jump-buffer
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;yanking-links-in-org-format&#34;&gt;yanking links in org format&lt;/h3&gt;

&lt;p&gt;Source: sacha chua.&lt;/p&gt;

&lt;p&gt;Enables inserting a URL into an org document as &amp;lsquo;[&lt;URL&gt;][link]&amp;rsquo; by tapping F6 after copying the URL. This is useful to reduce clutter with long links, and even include links in headings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun my/yank-more ()
  (interactive)
  (insert &amp;quot;[[&amp;quot;)
  (yank)
  (insert &amp;quot;][link]]&amp;quot;))
(global-set-key (kbd &amp;quot;&amp;lt;f6&amp;gt;&amp;quot;) &#39;my/yank-more)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;export-setup&#34;&gt;Export setup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;ox-org)
(require &#39;ox-word)
(require &#39;ox-md)
(load &amp;quot;~/scimax/ox-ipynb/ox-ipynb.el&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;markdown-config&#34;&gt;Markdown config&lt;/h3&gt;

&lt;p&gt;Setting pandoc as the markdown command for live previews. The default command is &lt;code&gt;markdown&lt;/code&gt;, which could be installed as a separate package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq markdown-command &amp;quot;pandoc&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;slime-and-lisp&#34;&gt;SLIME and lisp&lt;/h3&gt;

&lt;p&gt;Installing the SLIME package&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package slime
  :ensure t
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting the location of the lisp interpreter based on the OS being used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(if (system-type-is-darwin)
    (setq inferior-lisp-program &amp;quot;/usr/local/bin/clisp&amp;quot;)
  )

(if (system-type-is-gnu)
    (setq inferior-lisp-program &amp;quot;/usr/bin/clisp&amp;quot;)
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;expand-region&#34;&gt;Expand region&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:27]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Explore how this works, and customise it.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package expand-region
  :ensure t
  :bind (&amp;quot;C-=&amp;quot; . er/expand-region))

(message &amp;quot;Loaded easier selection&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hippie-expand&#34;&gt;Hippie Expand&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;M-/&amp;quot;) (make-hippie-expand-function
			     &#39;(try-expand-dabbrev-visible
			       try-expand-dabbrev
			       try-expand-dabbrev-all-buffers) t))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;theme-and-visuals&#34;&gt;Theme and visuals&lt;/h3&gt;

&lt;h4 id=&#34;emacsclient-or-frame-specific-settings&#34;&gt;Emacsclient or frame specific settings&lt;/h4&gt;

&lt;p&gt;Since I run emacs as a daemon and call the emacsclient, the background has to be set for new frames. Additionally, I&amp;rsquo;d like the frames to launch full screen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq default-frame-alist
      &#39;(;; (background-color . &amp;quot;whitesmoke&amp;quot;)
        ;; (foreground-color . &amp;quot;black&amp;quot;)
        (fullscreen . maximized)
        ))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;custom-safe-themes-and-background-change-to-light-grey&#34;&gt;Custom Safe themes and Background change to light grey&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq custom-safe-themes t)
(set-background-color &amp;quot;whitesmoke&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;font-customisation-based-on-os&#34;&gt;Font Customisation based on OS&lt;/h4&gt;

&lt;p&gt;The same font is named differently in Antergos (Linux) and in the Mac OS.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; For Linux
(if (system-type-is-gnu)
    (set-face-attribute &#39;default nil :family &amp;quot;ttf-iosevka&amp;quot; :height 130 ))

;; For Mac OS
(if (system-type-is-darwin)
    (set-face-attribute &#39;default nil :family &amp;quot;Iosevka Type&amp;quot; :height 160 ))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;spaceline-modeline-configuration&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Spaceline : modeline configuration&lt;/h4&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://pragmaticemacs.com/emacs/get-that-spacemacs-look-without-spacemacs/&#34; target=&#34;_blank&#34;&gt;http://pragmaticemacs.com/emacs/get-that-spacemacs-look-without-spacemacs/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package spaceline
  :demand t
  :init
  (setq powerline-default-separator &#39;arrow-fade)
  :config
  (disable-theme &#39;smart-mode-line-light)
  (require &#39;spaceline-config)
  (spaceline-emacs-theme)
  (spaceline-toggle-buffer-position-off)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;basic-cosmetics-dot-review-and-convert-to-use-package-style&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Basic cosmetics. Review &amp;amp; Convert to use-package style&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:20]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
These settings have to be cleaned up and the code optimised.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-hide-leading-stars t)
;;(setq org-alphabetical-lists t)
(setq org-src-fontify-natively t)  ;; you want this to activate coloring in blocks
(setq org-src-tab-acts-natively t) ;; you want this to have completion in blocks
(setq org-hide-emphasis-markers t) ;; to hide the *,=, or / markers
(setq org-pretty-entities t)       ;; to have \alpha, \to and others display as utf8 http://orgmode.org/manual/Special-symbols.html

;; Highlighting lines in the agenda, where the cursor is placed.
(add-hook &#39;org-agenda-mode-hook (lambda () (hl-line-mode 1)))

;; Setting up clean indenting below respective headlines at startup. - from the org mode website
(setq org-startup-indented t)

;; ;; use org bullets from emacsist
;; (use-package org-bullets
;;   :ensure t
;;   :init
;;   :config
;;   (add-hook &#39;org-mode-hook (lambda () (org-bullets-mode 1))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;striking-out-done-headlines&#34;&gt;Striking out Done headlines&lt;/h4&gt;

&lt;p&gt;source: Sacha Chua&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-fontify-done-headline t)
(custom-set-faces
 &#39;(org-done ((t (:foreground &amp;quot;DarkGreen&amp;quot;
			     :weight normal
			     :strike-through t))))
 &#39;(org-headline-done
   ((((class color) (min-colors 16) (background dark))
     (:foreground &amp;quot;LightSalmon&amp;quot; :strike-through t)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;formatting-keywords-as-boxes-with-inverted-colors&#34;&gt;Formatting keywords as boxes with inverted colors&lt;/h4&gt;

&lt;p&gt;Source : SO &lt;a href=&#34;https://stackoverflow.com/questions/12707492/add-custom-markers-to-emacs-org-mode&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt; ,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(set-face-attribute &#39;org-todo nil
                    :box &#39;(:line-width 2
                           :color &amp;quot;black&amp;quot;
                           :style released-button)
                    :inverse-video t
                    )
(set-face-attribute &#39;org-done nil
                    :box &#39;(:line-width 2
                           :color &amp;quot;black&amp;quot;
                           :style released-button)
                    :inverse-video t
                    )
(set-face-attribute &#39;org-priority nil
                    :inherit font-lock-keyword-face
                    :inverse-video t
                    :box &#39;(:line-width 2
                           :color &amp;quot;black&amp;quot;
                           :style released-button)
                    )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mu4e&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; mu4e&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 14:53] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The use-package documentation specifies a method to do this via use-package itself, without enclosing the whole snippet within a if clause.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 20:43] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The mu4e config has to be broken down and the send email with htmlize has to be evaluated.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:04] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
As of now, I do not acess my email on different computers via Emacs. The end goal is to setup a mail server via VPS and store my email online, which can then be searched via Emacs and mu4e from any location.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(if (system-type-is-darwin)
    (progn
      (add-to-list &#39;load-path &amp;quot;/usr/local/share/emacs/site-lisp/mu4e&amp;quot;)
      (require &#39;mu4e)
      (require &#39;mu4e-contrib)
      (require &#39;org-mu4e)

      (setq
       mue4e-headers-skip-duplicates  t
       mu4e-view-show-images t
       mu4e-view-show-addresses &#39;t
       mu4e-compose-format-flowed nil
       mu4e-update-interval 200
       message-ignored-cited-headers &#39;nil
       mu4e-date-format &amp;quot;%y/%m/%d&amp;quot;
       mu4e-headers-date-format &amp;quot;%Y/%m/%d&amp;quot;
       mu4e-change-filenames-when-moving t
       mu4e-attachments-dir &amp;quot;~/Downloads/Mail-Attachments/&amp;quot;
       mu4e-maildir (expand-file-name &amp;quot;~/my_mail/fmail&amp;quot;)
       message-citation-line-format &amp;quot;On %Y-%m-%d at %R %Z, %f wrote...&amp;quot;
       )

      ;; mu4e email refiling loations
      (setq
       mu4e-refile-folder &amp;quot;/Archive&amp;quot;
       mu4e-trash-folder  &amp;quot;/Trash&amp;quot;
       mu4e-sent-folder   &amp;quot;/Sent&amp;quot;
       mu4e-drafts-folder &amp;quot;/Drafts&amp;quot;
       )

      ;; setup some handy shortcuts
      (setq mu4e-maildir-shortcuts
            &#39;((&amp;quot;/INBOX&amp;quot;   . ?i)
	      (&amp;quot;/Sent&amp;quot;    . ?s)
	      (&amp;quot;/Archive&amp;quot; . ?a)
	      (&amp;quot;/Trash&amp;quot;   . ?t)))

      ;;store link to message if in header view, not to header query
      (setq org-mu4e-link-query-in-headers-mode nil
            org-mu4e-convert-to-html t) ;; org -&amp;gt; html

      ;; Enabling view in browser for HTML heavy emails that don&#39;t render well
      (add-to-list &#39;mu4e-view-actions
	           &#39;(&amp;quot;ViewInBrowser&amp;quot; . mu4e-action-view-in-browser) t)

      (autoload &#39;mu4e &amp;quot;mu4e&amp;quot; &amp;quot;mu for Emacs.&amp;quot; t)

      ;; Config for sending email
      (setq
       message-send-mail-function &#39;message-send-mail-with-sendmail
       send-mail-function &#39;sendmail-send-it
       message-kill-buffer-on-exit t
       )

      ;; allow for updating mail using &#39;U&#39; in the main view:
      (setq mu4e-get-mail-command  &amp;quot;mbsync -a -q&amp;quot;)

      ;; Don&#39;t keep asking for confirmation for every action
      (defun my-mu4e-mark-execute-all-no-confirm ()
        &amp;quot;Execute all marks without confirmation.&amp;quot;
        (interactive)
        (mu4e-mark-execute-all &#39;no-confirm))
      ;; mapping x to above function
      (define-key mu4e-headers-mode-map &amp;quot;x&amp;quot; #&#39;my-mu4e-mark-execute-all-no-confirm)

      ;; source: http://matt.hackinghistory.ca/2016/11/18/sending-html-mail-with-mu4e/

      ;; this is stolen from John but it didn&#39;t work for me until I
      ;; made those changes to mu4e-compose.el
      (defun htmlize-and-send ()
        &amp;quot;When in an org-mu4e-compose-org-mode message, htmlize and send it.&amp;quot;
        (interactive)
        (when
            (member &#39;org~mu4e-mime-switch-headers-or-body post-command-hook)
          (org-mime-htmlize)
          (org-mu4e-compose-org-mode)
          (mu4e-compose-mode)
          (message-send-and-exit)))

      ;; This overloads the amazing C-c C-c commands in org-mode with one more function
      ;; namely the htmlize-and-send, above.
      (add-hook &#39;org-ctrl-c-ctrl-c-hook &#39;htmlize-and-send t)
      ))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;multiple-cursors&#34;&gt;Multiple Cursors&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package multiple-cursors
  :ensure t
  :config
  (global-set-key (kbd &amp;quot;C-S-c C-S-c&amp;quot;) &#39;mc/edit-lines)
  (global-set-key (kbd &amp;quot;C-&amp;gt;&amp;quot;) &#39;mc/mark-next-like-this)
  (global-set-key (kbd &amp;quot;C-&amp;lt;&amp;quot;) &#39;mc/mark-previous-like-this)
  (global-set-key (kbd &amp;quot;C-c C-&amp;lt;&amp;quot;) &#39;mc/mark-all-like-this)
  )

(message &amp;quot;Loaded MC&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;git-related&#34;&gt;git related&lt;/h3&gt;

&lt;h4 id=&#34;git-gutter&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Git gutter&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:30]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Started using this today. It is actually very convenient to quickly view the changes made in the document. There is a function to pop up the changes at that location. I need to learn more about using this tool effectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package git-gutter
  :ensure t
  :config
  (global-git-gutter-mode &#39;t)
  :diminish git-gutter-mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;magit-settings&#34;&gt;magit settings&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq magit-revert-buffers &#39;silent)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;completed-loading-message&#34;&gt;Completed loading message&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(message &amp;quot;Loaded git related config&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;projectile-behavior&#34;&gt;Projectile behavior&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq projectile-sort-order &#39;recently-active)

;; Change cache file location
(setq projectile-cache-file &amp;quot;~/my_org/emacs_meta/.projectile-cache&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;helm&#34;&gt;Helm&lt;/h3&gt;

&lt;h4 id=&#34;enabling-helm-mode-and-activation-for-basic-functions&#34;&gt;Enabling Helm mode and activation for basic functions&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-05 Fri 11:55] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Adding &lt;code&gt;helm-for-files&lt;/code&gt; as this is not being autoloaded for enabling the hotspot feature in Scimax.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-06 Wed 17:26] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
I tried using Ivy for a period. However, Helm&amp;rsquo;s interface is simply a lot more pleasing and there are actually several additional actions that can be performed via helm itself.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-04 Mon 15:48] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Though I preferred Helm initially for several commands - I realised that scimax has several useful customisations for the ivy and counsel packages. Overall ivy is also lighter than helm and therefore these customisations are being discarded for now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I prefer using Helm for specific functions like M-x, find files and bookmarks and switching buffers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;M-x&amp;quot;) &#39;helm-M-x)
;; Enable fuzzy match for helm-M-x
(setq helm-M-x-fuzzy-match t)

(global-set-key (kbd &amp;quot;C-x C-f&amp;quot;) #&#39;helm-find-files)
(global-set-key (kbd &amp;quot;C-x b&amp;quot;) #&#39;helm-mini)

(require &#39;helm-config)
(require &#39;helm-for-files)
(helm-mode 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;bookmarks-with-helm&#34;&gt;Bookmarks with Helm&lt;/h4&gt;

&lt;p&gt;The default save location in the .emacs folder is not very convenient. I would rather store this with my org files since I commit them Everyday.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq bookmark-default-file &amp;quot;~/my_org/emacs_meta/bookmarks&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default bookmarks list &lt;code&gt;C-x r l&lt;/code&gt; can be accessed using &lt;code&gt;helm-bookmarks&lt;/code&gt;. The location of the file would be a nice addition. Technically, &lt;code&gt;helm-filtered-bookmarks&lt;/code&gt; has almost the same functionality as the list in terms of being able to fuzzy-match a bookmark.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;C-x r b&amp;quot;) #&#39;helm-filtered-bookmarks)
(global-set-key (kbd &amp;quot;C-x r l&amp;quot;) #&#39;helm-bookmarks)
(setq helm-bookmark-show-location t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setting-sources-for-helm&#34;&gt;&lt;span class=&#34;org-todo done STABLE&#34;&gt;STABLE&lt;/span&gt; Setting sources for helm&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-04 Thu 08:08] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Interim issue with bookmarks file becoming corrupted due to a git conflict. The sources work as expected, with helm mini as well as hotspots.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-04-29 Mon 07:43] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
After a package update, setting the sources explicitly is causing issues with helm-mini and with scimax hotspots.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-04 Mon 15:49] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The scimax hotspots can be customised with an improved function that only requires commands locations to be separately defined. This resolved the helm-recentf problem.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 14:55] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This is still causing issues: the recentf list has to be cleared via helm-mini first.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 16:28] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This was needed as it seems helm was not sourcing from recentf file lists. With this source list defined, it provides options to choose from recent files, bookmarks, open buffers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example: setting these sources enables my bookmarks to be available along with my buffers, enabling a jump to either.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq helm-mini-default-sources &#39;(helm-source-buffers-list
                                  helm-source-recentf
                                  helm-source-bookmarks
                                  helm-source-bookmark-set
                                  helm-source-buffer-not-found))

(setq helm-buffers-list-default-sources &#39;(helm-source-buffers-list
                                          helm-source-recentf
                                          helm-source-bookmarks
                                          helm-source-bookmark-set
                                          helm-source-buffer-not-found))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;helm-semantic&#34;&gt;helm-semantic&lt;/h4&gt;

&lt;p&gt;This needs &lt;a href=&#34;#semantic-mode&#34;&gt;Semantic Mode&lt;/a&gt; enabled, and is a really cool function that enables jumping around variables and functions in a script file with fuzzy matching !&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq helm-semantic-fuzzy-match t
      helm-imenu-fuzzy-match t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;persistent-follow-mode-for-helm&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Persistent follow mode for Helm&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 07:46]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to find exactly what this does&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(custom-set-variables
 &#39;(helm-follow-mode-persistent t))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;helm-ag-and-helm-org-rifle-with-refiling-set-to-helm-org-rifle&#34;&gt;&lt;code&gt;helm-ag&lt;/code&gt; and &lt;code&gt;helm-org-rifle&lt;/code&gt;, with refiling set to &lt;code&gt;helm-org-rifle&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package helm-ag
  :ensure t
  :defer nil
  :config
  (require &#39;helm-ag)
)

(use-package helm-org-rifle
  :ensure t
  :defer nil
  :config
  (require &#39;helm-org-rifle)
  (global-set-key (kbd &amp;quot;C-c C-w&amp;quot;) #&#39;helm-org-rifle--refile)
)

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;helm-swoop&#34;&gt;helm-swoop&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 16:53] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This is an awesome find. Helm swoop changes the search pattern depending on the location of the cursor. Therefore, while placed on an org headline, calling helm-swoop will preset the search pattern to have headings. The same is true for source code blocks! Fantastic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://writequit.org/org/#orgheadline92&#34; target=&#34;_blank&#34;&gt;https://writequit.org/org/#orgheadline92&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package helm-swoop
  :ensure t
  :bind ((&amp;quot;M-i&amp;quot; . helm-swoop)
         (&amp;quot;M-I&amp;quot; . helm-swoop-back-to-last-point)
         (&amp;quot;C-c M-i&amp;quot; . helm-multi-swoop))
  :config
  ;; When doing isearch, hand the word over to helm-swoop
  (define-key isearch-mode-map (kbd &amp;quot;M-i&amp;quot;) &#39;helm-swoop-from-isearch)
  ;; From helm-swoop to helm-multi-swoop-all
  (define-key helm-swoop-map (kbd &amp;quot;M-i&amp;quot;) &#39;helm-multi-swoop-all-from-helm-swoop)
  ;; Save buffer when helm-multi-swoop-edit complete
  (setq helm-multi-swoop-edit-save t
        ;; If this value is t, split window inside the current window
        helm-swoop-split-with-multiple-windows t
        ;; Split direcion. &#39;split-window-vertically or &#39;split-window-horizontally
        helm-swoop-split-direction &#39;split-window-vertically
        ;; If nil, you can slightly boost invoke speed in exchange for text color
        helm-swoop-speed-or-color nil))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;helm-loading-completed&#34;&gt;Helm Loading completed&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(message &amp;quot;Loaded Helm customisations&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;org-mode-related&#34;&gt;Org mode related&lt;/h3&gt;

&lt;h4 id=&#34;org-tags-to-be-available-everywhere&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Org tags to be available everywhere&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-complete-tags-always-offer-all-agenda-tags t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;default-org-directory-and-agenda-file-directory&#34;&gt;Default org directory and agenda file directory&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq
 org-directory &amp;quot;~/my_org/&amp;quot;
 org-agenda-files &#39;(&amp;quot;~/my_org/&amp;quot;)
 )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-notes-into-log-drawer&#34;&gt;Org-notes into log drawer&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;ve been inserting org notes into the body of the text, since I do not make extensive use of the log book in the agenda and prefer active time stamped notes and the org-journal and org-projectile to take down &amp;lsquo;linked&amp;rsquo; log notes. However, I would like the notes to be inserted after any properties drawers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-log-state-notes-insert-after-drawers t)
(setq org-log-redeadline &#39;time)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;enabling-org-capture-and-org-protocol&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Enabling org capture and org protocol&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:55]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to actually get org-capture via external browser protocol working. Not sure if I need to require org-capture in scimax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://www.diegoberrocal.com/blog/2015/08/19/org-protocol/&#34; target=&#34;_blank&#34;&gt;http://www.diegoberrocal.com/blog/2015/08/19/org-protocol/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;org-capture)
(require &#39;org-protocol)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;ensuring-archive-files-are-also-in-org-mode&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Ensuring archive files are also in org mode&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:31]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
check whether the add-to-list function is sufficient.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;find-file-hooks
          (lambda ()
            (let ((file (buffer-file-name)))
              (when (and file (equal (file-name-directory file) &amp;quot;~/my_org/archive/&amp;quot;))
                (org-mode)))))

(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.org_archive\\&#39;&amp;quot; . org-mode))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;archiving-mechanics&#34;&gt;Archiving mechanics&lt;/h4&gt;

&lt;p&gt;Archive organised by Top level headings in the original file and with Tag preservation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;
(defun my-org-inherited-no-file-tags ()
  (let ((tags (org-entry-get nil &amp;quot;ALLTAGS&amp;quot; &#39;selective))
        (ltags (org-entry-get nil &amp;quot;TAGS&amp;quot;)))
    (mapc (lambda (tag)
            (setq tags
                  (replace-regexp-in-string (concat tag &amp;quot;:&amp;quot;) &amp;quot;&amp;quot; tags)))
          (append org-file-tags (when ltags (split-string ltags &amp;quot;:&amp;quot; t))))
    (if (string= &amp;quot;:&amp;quot; tags) nil tags)))

(defadvice org-archive-subtree (around my-org-archive-subtree-low-level activate)
  (let ((tags (my-org-inherited-no-file-tags))
        (org-archive-location
         (if (save-excursion (org-back-to-heading)
                             (&amp;gt; (org-outline-level) 1))
             (concat (car (split-string org-archive-location &amp;quot;::&amp;quot;))
                     &amp;quot;::* &amp;quot;
                     (car (org-get-outline-path)))
           org-archive-location)))
    ad-do-it
    (with-current-buffer (find-file-noselect (org-extract-archive-file))
      (save-excursion
        (while (org-up-heading-safe))
        (org-set-tags-to tags)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-wiki&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; org-wiki&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Installation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(let ((url &amp;quot;https://raw.githubusercontent.com/caiorss/org-wiki/master/org-wiki.el&amp;quot;))
      (with-current-buffer (url-retrieve-synchronously url)
    (goto-char (point-min))
    (re-search-forward &amp;quot;^$&amp;quot;)
    (delete-region (point) (point-min))
    (kill-whole-line)
    (package-install-from-buffer)))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Setup&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;org-wiki)
(setq org-wiki-location &amp;quot;~/my_projects/ds-job-search&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;org-id&#34;&gt;org-id&lt;/h4&gt;

&lt;p&gt;Using the org-id for reference to headings ensures that even if the heading changes, the links will still work.&lt;/p&gt;

&lt;p&gt;In addition, I would like an org id to be created every time the capture is used. This facilitates using packages like org-brain which rely extensively on org-id&amp;rsquo;s.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;org-id)
(setq org-id-link-to-org-use-id t)
(org-link-set-parameters &amp;quot;id&amp;quot; :store #&#39;org-id-store-link)
(org-link-set-parameters &amp;quot;nb&amp;quot; :store nil)
;; Update ID file .org-id-locations on startup
;; This adds too much time to startup
;; (org-id-update-id-locations)

(setq org-id-method (quote uuidgen))
(add-hook &#39;org-capture-prepare-finalize-hook &#39;org-id-get-create)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setting-custom-keywords-with-fast-access&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Setting custom keywords with fast access&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 12:19] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This requires a complete reload of org to come in effect.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-todo-keywords
      &#39;((sequence &amp;quot;TODO(t)&amp;quot; &amp;quot;NEXT(n)&amp;quot; &amp;quot;CANCEL(c)&amp;quot; &amp;quot;POSTPONED(p)&amp;quot; &amp;quot;|&amp;quot; &amp;quot;DONE(d)&amp;quot; &amp;quot;STABLE(s)&amp;quot;)
        (sequence &amp;quot;TEST(T)&amp;quot; &amp;quot;BUG(b)&amp;quot; &amp;quot;KNOWNCAUSE(k)&amp;quot; &amp;quot;|&amp;quot; &amp;quot;FIXED(f)&amp;quot;)
        (sequence &amp;quot;|&amp;quot; )))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;refiling-settings&#34;&gt;Refiling settings&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-06 Sat 13:56] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Helm org rifle is mapped to the refile command. See Helm section.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Refile target level for search&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-refile-targets
      &#39;((nil :maxlevel . 4)
        (org-agenda-files :maxlevel . 4)))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  General refile settings&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:33]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Needs further review and optimisation&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-refile-use-outline-path &#39;file)
(setq org-outline-path-complete-in-steps nil)
(setq org-reverse-note-order t)
(setq org-refile-allow-creating-parent-nodes &#39;confirm)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#refiling&#34;&gt;Also refer Refiling hydra&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;agenda-mechanics&#34;&gt;Agenda mechanics&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Weekday starts on Monday&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-agenda-start-on-weekday 1)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Display heading tags farther to the right&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-agenda-tags-column -150)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Agenda customisation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:26]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to clear up the search functions, enabling complete search in journal files. Archive and some external directories are included, since they are explictly in org mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;
(setq org-agenda-custom-commands
      &#39;((&amp;quot;c&amp;quot; &amp;quot;Simple agenda view&amp;quot;
         ((tags &amp;quot;recurr&amp;quot;
        ((org-agenda-overriding-header &amp;quot;Recurring Tasks&amp;quot;)))
          (agenda &amp;quot;&amp;quot;)
          (todo &amp;quot;&amp;quot;)))
        (&amp;quot;o&amp;quot; agenda &amp;quot;Office mode&amp;quot; ((org-agenda-tag-filter-preset &#39;(&amp;quot;-course&amp;quot; &amp;quot;-habit&amp;quot; &amp;quot;-someday&amp;quot; &amp;quot;-book&amp;quot; &amp;quot;-emacs&amp;quot;))))
        (&amp;quot;qc&amp;quot; tags &amp;quot;+commandment&amp;quot;)
    (&amp;quot;e&amp;quot; tags &amp;quot;+org&amp;quot;)
    (&amp;quot;w&amp;quot; agenda &amp;quot;Today&amp;quot; ((org-agenda-tag-filter-preset &#39;(&amp;quot;+work&amp;quot;))))
    (&amp;quot;W&amp;quot; todo-tree &amp;quot;WAITING&amp;quot;)
    (&amp;quot;q&amp;quot; . &amp;quot;Custom queries&amp;quot;) ;; gives label to &amp;quot;q&amp;quot;
    (&amp;quot;d&amp;quot; . &amp;quot;ds related&amp;quot;)     ;; gives label to &amp;quot;d&amp;quot;
    (&amp;quot;ds&amp;quot; agenda &amp;quot;Datascience&amp;quot; ((org-agenda-tag-filter-preset &#39;(&amp;quot;+datascience&amp;quot;))))
    (&amp;quot;qw&amp;quot; agenda &amp;quot;MRPS&amp;quot; ((org-agenda-tag-filter-preset &#39;(&amp;quot;+canjs&amp;quot;))))
    (&amp;quot;qa&amp;quot; &amp;quot;Archive tags search&amp;quot; org-tags-view &amp;quot;&amp;quot;
         ((org-agenda-files (file-expand-wildcards &amp;quot;~/my_org/*.org*&amp;quot;))))
        (&amp;quot;j&amp;quot; &amp;quot;Journal Search&amp;quot; search &amp;quot;&amp;quot;
         &#39;&#39;((org-agenda-text-search-extra-files (file-expand-wildcards &amp;quot;~/my_org/journal/&amp;quot;))))
        (&amp;quot;S&amp;quot; search &amp;quot;&amp;quot;
     ((org-agenda-files &#39;(&amp;quot;~/my_org/&amp;quot;))
      (org-agenda-text-search-extra-files )))
    )
      )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include gpg files in agenda generation&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://emacs.stackexchange.com/questions/36542/include-org-gpg-files-in-org-agenda&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/36542/include-org-gpg-files-in-org-agenda&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; (unless (string-match-p &amp;quot;\\.gpg&amp;quot; org-agenda-file-regexp)
;;   (setq org-agenda-file-regexp
;;         (replace-regexp-in-string &amp;quot;\\\\\\.org&amp;quot; &amp;quot;\\\\.org\\\\(\\\\.gpg\\\\)?&amp;quot;
;;                                   org-agenda-file-regexp)))

(setq org-agenda-file-regexp &amp;quot;\\`\\\([^.].*\\.org\\\|[0-9]\\\{8\\\}\\\(\\.gpg\\\)?\\\)\\&#39;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Expanding search locations&lt;/p&gt;

&lt;p&gt;I initially included my journal location to the agenda search. However it is very slow compared to using grep/rgrep/ag. Therefore, the agenda full text search is now limited to the project directory and the org-brain directory. The snippet below enables searching recursively within folders.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-agenda-text-search-extra-files &#39;(agenda-archives))

(setq org-agenda-text-search-extra-files (apply &#39;append
                        (mapcar
                         (lambda (directory)
                           (directory-files-recursively
                            directory org-agenda-file-regexp))
                         &#39;(&amp;quot;~/my_projects/&amp;quot; &amp;quot;~/my_org/brain/&amp;quot;))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Adding org archive for text search. Optimise this&lt;/dt&gt;
&lt;/dl&gt;

&lt;p&gt;:CREATED:  &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2019-02-07 Thu 08:29&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-agenda-text-search-extra-files &#39;(agenda-archives))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enable default fuzzy search like in google&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-agenda-search-view-always-boolean t)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enable sticky agenda&lt;/p&gt;

&lt;p&gt;Experimenting with this setting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-agenda-sticky t)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt;  org-habit&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 13:20] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Adding a require has brought org-habit back on track.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:50] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Appears the use-package config for org-habit is not correct and there is some issue in downloading it as a package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want to shift the org habit graph in the agenda further out right so as to leave enough room for the headings to be visible.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;org-habit)
(setq org-habit-graph-column 90)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;capture-mechanics&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Capture mechanics&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:24]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
need to clean this up.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Removing timestamp from datetree captures&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-datetree-add-timestamp nil)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Capture templates&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-capture-templates
      &#39;((&amp;quot;t&amp;quot; &amp;quot;Task entry&amp;quot;)
        (&amp;quot;tt&amp;quot; &amp;quot;Todo - Fast&amp;quot; entry (file+headline &amp;quot;~/my_org/todo-global.org&amp;quot; &amp;quot;@Inbox&amp;quot;)
     &amp;quot;** TODO %?&amp;quot;)
        (&amp;quot;tj&amp;quot; &amp;quot;Todo -Job journal&amp;quot; entry (file+olp+datetree &amp;quot;~/my_org/ds-jobs.org&amp;quot; &amp;quot;Job Search Journal&amp;quot;)
     &amp;quot;** TODO %?&amp;quot;)
        (&amp;quot;te&amp;quot; &amp;quot;Todo - Emacs&amp;quot; entry (file+headline &amp;quot;~/my_org/todo-global.org&amp;quot; &amp;quot;@Emacs notes and tasks&amp;quot;)
         &amp;quot;** TODO %?&amp;quot;)
        (&amp;quot;td&amp;quot; &amp;quot;Datascience inbox&amp;quot; entry (file+headline &amp;quot;~/my_org/datascience.org&amp;quot; &amp;quot;@Datascience @Inbox&amp;quot;)
         &amp;quot;** TODO %?&amp;quot;)
    (&amp;quot;tm&amp;quot; &amp;quot;Mail Link Todo&amp;quot; entry (file+headline &amp;quot;~/my_org/todo-global.org&amp;quot; &amp;quot;@Inbox&amp;quot;)
     &amp;quot;** TODO Mail: %a &amp;quot;)
        (&amp;quot;l&amp;quot; &amp;quot;Link/Snippet&amp;quot; entry (file+headline &amp;quot;~/my_org/link_database.org&amp;quot; &amp;quot;.UL Unfiled Links&amp;quot;)
         &amp;quot;** %? %a &amp;quot;)
        (&amp;quot;e&amp;quot; &amp;quot;Protocol info&amp;quot; entry ;; &#39;w&#39; for &#39;org-protocol&#39;
         (file+headline &amp;quot;~/my_org/link_database.org&amp;quot; &amp;quot;.UL Unfiled Links&amp;quot;)
         &amp;quot;*** %a, \n %:initial&amp;quot;)
        (&amp;quot;n&amp;quot; &amp;quot;Notes&amp;quot;)
        (&amp;quot;ne&amp;quot; &amp;quot;Emacs note&amp;quot; entry (file+headline &amp;quot;~/my_org/todo-global.org&amp;quot; &amp;quot;@Emacs notes and tasks&amp;quot;)
         &amp;quot;** %?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;quot;)
        (&amp;quot;nn&amp;quot; &amp;quot;General note&amp;quot; entry (file+headline &amp;quot;~/my_org/notes.org&amp;quot; &amp;quot;@NOTES&amp;quot;)
         &amp;quot;** %?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;quot;)
        (&amp;quot;nd&amp;quot; &amp;quot;Datascience note&amp;quot; entry (file+headline &amp;quot;~/my_org/datascience.org&amp;quot; &amp;quot;@Datascience @Notes&amp;quot;)
         &amp;quot;** %?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;quot;)
        (&amp;quot;g&amp;quot; &amp;quot;BGR stuff&amp;quot;)
        (&amp;quot;gi&amp;quot; &amp;quot;Inventory project&amp;quot;)
        (&amp;quot;gil&amp;quot; &amp;quot;Daily log&amp;quot; entry (file+olp+datetree &amp;quot;~/my_org/bgr.org&amp;quot; &amp;quot;Inventory management Project&amp;quot;) &amp;quot;** %? %i&amp;quot;)
        (&amp;quot;C&amp;quot; &amp;quot;Commandment&amp;quot; entry (file+datetree &amp;quot;~/my_org/lifebook.org&amp;quot; &amp;quot;&amp;quot;)
         &amp;quot;** %? %i :commandment:&amp;quot;)
        (&amp;quot;J&amp;quot; &amp;quot;Job search&amp;quot; entry (file+headline &amp;quot;~/my_org/mrps_canjs.org&amp;quot; &amp;quot;MRPS #CANJS&amp;quot;)
         &amp;quot;** TODO %? %i &amp;quot;)
        (&amp;quot;w&amp;quot; &amp;quot;Website&amp;quot; plain
         (function org-website-clipper)
         &amp;quot;* %a %T\n&amp;quot; :immediate-finish t)
        (&amp;quot;j&amp;quot; &amp;quot;Journal entry&amp;quot; entry (function org-journal-find-location)
         &amp;quot;* %(format-time-string org-journal-time-format) %?&amp;quot;)
        (&amp;quot;i&amp;quot; &amp;quot;Whole article capture&amp;quot; entry
         (file+headline &amp;quot;~/my_org/full_article_archive.org&amp;quot; &amp;quot;&amp;quot; :empty-lines 1)
         &amp;quot;** %a, %T\n %:initial&amp;quot; :empty-lines 1)
        (&amp;quot;c&amp;quot; &amp;quot;Clocking capture&amp;quot;)
        (&amp;quot;ct&amp;quot; &amp;quot;Clock TODO&amp;quot; entry (clock) &amp;quot;** TODO %?&amp;quot;)
        (&amp;quot;cn&amp;quot; &amp;quot;Clock Note&amp;quot; entry (clock) &amp;quot;** %?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;quot;)
        (&amp;quot;r&amp;quot; &amp;quot;Review note&amp;quot; entry (file+weektree &amp;quot;~/my_org/lifebook.org&amp;quot; &amp;quot;#Personal #Reviews&amp;quot;)
         &amp;quot;** %?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;quot;)
         ))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt;  Closing org-capture frame on abort&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-13 Wed 07:35] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This basically ensures a clean exit in case of aborting a capture.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:53]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Needs further review.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://stackoverflow.com/questions/23517372/hook-or-advice-when-aborting-org-capture-before-template-selection&#34; target=&#34;_blank&#34;&gt;http://stackoverflow.com/questions/23517372/hook-or-advice-when-aborting-org-capture-before-template-selection&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defadvice org-capture
    (after make-full-window-frame activate)
  &amp;quot;Advise capture to be the only window when used as a popup&amp;quot;
  (if (equal &amp;quot;emacs-capture&amp;quot; (frame-parameter nil &#39;name))
      (delete-other-windows)))

(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  &amp;quot;Advise capture-finalize to close the frame&amp;quot;
  (if (equal &amp;quot;emacs-capture&amp;quot; (frame-parameter nil &#39;name))))

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Controlling org-capture buffers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-13 Wed 08:01] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This interferes with org-journal&amp;rsquo;s capture format.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I dislike the way org-capture disrupts my current window, and shows me the capture buffer, and the target buffer as well. I would prefer a small pop up window, and then a revert back to the existing windows once the capture is completed or aborted. However this does not seem possible without modifying Org-mode&amp;rsquo;s source code. This is a workaround described at &lt;a href=&#34;https://stackoverflow.com/questions/54192239/open-org-capture-buffer-in-specific-Window&#34; target=&#34;_blank&#34;&gt;https://stackoverflow.com/questions/54192239/open-org-capture-buffer-in-specific-Window&lt;/a&gt; ,which partially resolves the issue by enabling just a single capture buffer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;
(defun my-org-capture-place-template-dont-delete-windows (oldfun args)
  (cl-letf (((symbol-function &#39;delete-other-windows) &#39;ignore))
    (apply oldfun args)))

(with-eval-after-load &amp;quot;org-capture&amp;quot;
  (advice-add &#39;org-capture-place-template :around &#39;my-org-capture-place-template-dont-delete-windows))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;version-control-and-backup-of-files&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; version control and backup of files&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:15]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to check out how this works and whether this is still necessary, since I am using Git.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq delete-old-versions -1)
(setq version-control t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-noter&#34;&gt;org-noter&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Org-noter’s purpose is to let you create notes that are kept in sync when you scroll through the document, but that are external to it - the notes themselves live in an Org-mode file. As such, this leverages the power of Org-mode (the notes may have outlines, latex fragments, babel, etc…) while acting like notes that are made inside the document. Also, taking notes is very simple: just press i and annotate away!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/weirdNox&#34; target=&#34;_blank&#34;&gt;Gonçalo Santos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-noter
  :ensure t
  :defer t
  :config
  (setq org-noter-set-auto-save-last-location t)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-projectile&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; org-projectile&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:42]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
need to optimise further and convert to use-package style. Also need a way to capture Notes from projects, in addition to tasks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting off with the basic configuration posted in org-projectile github repo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-projectile
  :ensure t
  :bind ((&amp;quot;C-c n p&amp;quot; . org-projectile-project-todo-completing-read)
         (&amp;quot;C-c c&amp;quot; . org-capture))
  :config
  (setq org-projectile-projects-file
        &amp;quot;~/my_org/project-tasks.org&amp;quot;)
  ;; (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files))) ;; Not necessary as my task projects are a part of the main org folder
  (push (org-projectile-project-todo-entry) org-capture-templates)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-gcal-customisation&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; org-gcal customisation&lt;/h4&gt;

&lt;h4 id=&#34;property-customisation&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Property customisation&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt;  Optimise CREATED and PLANNED property tags&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:10]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Needs further review and optimisation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using an active date tag on the heading itself makes the org document look ugly, and makes navigation difficult. This is better entered into a property drawer. Two properties should work well - CREATED (inactive date-time tag) and PLANNED (active date-time tag). This will enable me to filter based on property in the future and easily archive older or irrelevant tasks. When the task is shifted or postponed, only the PLANNED property is changed, leaving clear reference of the created date.&lt;/p&gt;

&lt;p&gt;The above is implemented only for tasks with a TODO heading. For now, I want to test using Notes with an inactive date-time tag, which can be individually setup via the capture templates. The attempt is to have a clear separation between tasks and notes.&lt;/p&gt;

&lt;p&gt;This is a modified version of the snippet at &lt;a href=&#34;https://emacs.stackexchange.com/questions/35751/how-to-add-a-created-field-to-any-todo-task&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/35751/how-to-add-a-created-field-to-any-todo-task&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun sr/log-todo-creation-date (&amp;amp;rest ignore)
  &amp;quot;Log TODO creation time in the property drawer under the key &#39;CREATED&#39;.&amp;quot;
  (when (and (org-get-todo-state)
             (not (org-entry-get nil &amp;quot;CREATED&amp;quot;)))
    (org-entry-put nil &amp;quot;CREATED&amp;quot; (format-time-string &amp;quot;[%Y-%m-%d %a]&amp;quot;))
    (org-entry-put nil &amp;quot;PLANNED&amp;quot; (format-time-string (cdr org-time-stamp-formats)))
    ))

(advice-add &#39;org-insert-todo-heading :after #&#39;sr/log-todo-creation-date)
(advice-add &#39;org-insert-todo-heading-respect-content :after #&#39;sr/log-todo-creation-date)
(advice-add &#39;org-insert-todo-subheading :after #&#39;sr/log-todo-creation-date)
(advice-add &#39;org-capture :after #&#39;sr/log-todo-creation-date)
(advice-add &#39;org-projectile-project-todo-completing-read :after #&#39;sr/log-todo-creation-date)

;; (require &#39;org-expiry)
;; ;; Configure it a bit to my liking
;; (setq
;;  org-expiry-created-property-name &amp;quot;CREATED&amp;quot; ; Name of property when an item is created
;;  org-expiry-inactive-timestamps   nil         ; Don&#39;t have everything in the agenda view
;;  )

;; (defun mrb/insert-created-timestamp()
;;   &amp;quot;Insert a CREATED property using org-expiry.el for TODO entries&amp;quot;
;;   (org-expiry-insert-created)
;;   (org-back-to-heading)
;;   (org-end-of-line)
;;   (insert &amp;quot; &amp;quot;)
;;   )

;; ;; Whenever a TODO entry is created, I want a timestamp
;; ;; Advice org-insert-todo-heading to insert a created timestamp using org-expiry
;; (defadvice org-insert-todo-heading (after mrb/created-timestamp-advice activate)
;;   &amp;quot;Insert a CREATED property using org-expiry.el for TODO entries&amp;quot;
;;   (mrb/insert-created-timestamp)
;;   )
;; ;; Make it active
;; (ad-activate &#39;org-insert-todo-heading)

;; (require &#39;org-capture)

;; (defadvice org-capture (after mrb/created-timestamp-advice activate)
;;   &amp;quot;Insert a CREATED property using org-expiry.el for TODO entries&amp;quot;
;;                      ; Test if the captured entry is a TODO, if so insert the created
;;                      ; timestamp property, otherwise ignore
;;   (mrb/insert-created-timestamp))
;; ;;  (when (member (org-get-todo-state) org-todo-keywords-1)
;; ;;    (mrb/insert-created-timestamp)))
;;   (ad-activate &#39;org-capture)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enabling adding tags in the capture window&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Add feature to allow easy adding of tags in a capture window
(defun mrb/add-tags-in-capture()
  (interactive)
  &amp;quot;Insert tags in a capture window without losing the point&amp;quot;
  (save-excursion
    (org-back-to-heading)
    (org-set-tags)))
;; Bind this to a reasonable key
(define-key org-capture-mode-map &amp;quot;\C-c\C-t&amp;quot; &#39;mrb/add-tags-in-capture)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;org-web-clipper&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; org web clipper&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:11]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
This works fine now. However, it would be nice to find a way to strip the headers and menu columns and other unnecessary information before capture.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://www.bobnewell.net/publish/35years/webclipper.html&#34; target=&#34;_blank&#34;&gt;http://www.bobnewell.net/publish/35years/webclipper.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; org-eww and org-w3m should be in your org distribution, but see
;; note below on patch level of org-eww.
(require &#39;org-eww)
(require &#39;org-w3m)
(defvar org-website-page-archive-file &amp;quot;~/my_org/full_article_archive.org&amp;quot;)
(defun org-website-clipper ()
  &amp;quot;When capturing a website page, go to the right place in capture file,
   but do sneaky things. Because it&#39;s a w3m or eww page, we go
   ahead and insert the fixed-up page content, as I don&#39;t see a
   good way to do that from an org-capture template alone. Requires
   Emacs 25 and the 2017-02-12 or later patched version of org-eww.el.&amp;quot;
  (interactive)

  ;; Check for acceptable major mode (w3m or eww) and set up a couple of
  ;; browser specific values. Error if unknown mode.

  (cond
   ((eq major-mode &#39;w3m-mode)
    (org-w3m-copy-for-org-mode))
   ((eq major-mode &#39;eww-mode)
    (org-eww-copy-for-org-mode))
   (t
    (error &amp;quot;Not valid -- must be in w3m or eww mode&amp;quot;)))

  ;; Check if we have a full path to the archive file.
  ;; Create any missing directories.

  (unless (file-exists-p org-website-page-archive-file)
    (let ((dir (file-name-directory org-website-page-archive-file)))
      (unless (file-exists-p dir)
        (make-directory dir))))

  ;; Open the archive file and yank in the content.
  ;; Headers are fixed up later by org-capture.

  (find-file org-website-page-archive-file)
  (goto-char (point-max))
  ;; Leave a blank line for org-capture to fill in
  ;; with a timestamp, URL, etc.
  (insert &amp;quot;\n\n&amp;quot;)
  ;; Insert the web content but keep our place.
  (save-excursion (yank))
  ;; Don&#39;t keep the page info on the kill ring.
  ;; Also fix the yank pointer.
  (setq kill-ring (cdr kill-ring))
  (setq kill-ring-yank-pointer kill-ring)
  ;; Final repositioning.
  (forward-line -1)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-babel&#34;&gt;Org-babel&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Loading language base&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(org-babel-do-load-languages
 &#39;org-babel-load-languages
 &#39;((clojure . t)
   (scheme . t)
   (sqlite . t)
   (R . t)
   (lisp . t)
   (sql .  t)
   ;(jupyter . t)
   )
 )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clojure and cider&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;cider)
(setq org-babel-clojure-backend &#39;cider)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;org-trello&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Org-trello&lt;/h4&gt;

&lt;h4 id=&#34;clock-customisation&#34;&gt;Clock Customisation&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Continuous clocking + punch in/out approach&lt;/p&gt;

&lt;p&gt;This approach and code snippets are adapted (and shamelessly borrowed) from &lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Bernt Hansen&amp;rsquo;s approach&lt;/a&gt;. While Bernt follows a complex approach of clocking into parent tasks - my current workflow favors clocking in directly to set clocking headlines within projects, which are placed in my org-projectile todo task file.&lt;/p&gt;

&lt;p&gt;I have a default continuous clock after punching in (defined by org-id) which will cater to general re-organisation, including capturing notes, refiling , email etc. Other tasks or even mini projects can be directly clocked into when required. These mini-projets are often just located within my org-agenda files and not as a separate git repositoy. Every time I am on my computer, whether on Emacs or not, I would like the automatic clock to capture time, unless it is being clocked to a specific project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Defining default Task&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defvar sr/organization-task-id &amp;quot;a8712a47-a648-477f-bdbf-d6004a0cc70b&amp;quot;)

(defun sr/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find sr/organization-task-id &#39;marker)
    (org-clock-in &#39;(16))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Punch in&lt;/p&gt;

&lt;p&gt;Bernt Hansen shares that he has a default punch in and punch out task that keeps the clock on all day. I think this will work for me as well. Other than work and projects, most of the time I am tinkering with Emacs, or writing a journal note or trying to re-organise my stuff. By using a punch in and out, I can track how much time I am engaged with a computer, other than specific projects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun sr/punch-in (arg)
    (interactive &amp;quot;p&amp;quot;)
  (setq sr/keep-clock-running t)
  (sr/clock-in-organization-task-as-default))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Punch Out&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun sr/punch-out ()
  (interactive)
  (setq sr/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Advising clock Out&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun sr/clock-out-maybe ()
  (when (and sr/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (sr/clock-in-organization-task-as-default)))

(add-hook &#39;org-clock-out-hook &#39;sr/clock-out-maybe &#39;append)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt;  org-mru-clock&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-14 Thu 10:16] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Issue is with the org-mru-select-recent-task command - it doesn&amp;rsquo;t jump to the specified task and always pesudo messes up the format of the headings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a handy package to quickly select past tasks which have been clocked in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-mru-clock
  :ensure t
  :bind ((&amp;quot;M-s 1&amp;quot; . org-mru-clock-in)
          (&amp;quot;C-c C-x C-j&amp;quot; . org-mru-clock-select-recent-task))
  :init
  (setq org-mru-clock-how-many 100
        org-mru-clock-completing-read #&#39;ivy-completing-read))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do not log or consider 0 Clocks&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-clock-out-remove-zero-time-clocks t)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;set idle timer for clocked task&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; setting idle timer to 15 minutes
(setq org-clock-idle-time 15)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Show clocked task history and enable re-clocking&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://writequit.org/denver-emacs/presentations/2017-04-11-time-clocking-with-org.html&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This should enable me to quickly clock back into specific tasks.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Show lot of clocking history so it&#39;s easy to pick items off the `C-c I` list
(setq org-clock-history-length 23)

(defun eos/org-clock-in ()
  (interactive)
  (org-clock-in &#39;(4)))

(global-set-key (kbd &amp;quot;C-c I&amp;quot;) #&#39;eos/org-clock-in)
(global-set-key (kbd &amp;quot;C-c O&amp;quot;) #&#39;org-clock-out)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;org-brain&#34;&gt;Org-Brain &lt;code&gt;[&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;]&lt;/code&gt;&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;org-brain implements a variant of concept mapping in Emacs, using org-mode.&lt;/p&gt;

&lt;p&gt;You can think of org-brain as a combination of a wiki and a mind map, where each wiki page / mind map node is an org-mode file which resides in your org-brain-path, or a headline with an ID property in one of those files. These are called entries. Entries can be linked together, and you can then view the network of links as a mind map, using M-x org-brain-visualize&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Kungsgeten/org-brain&#34; target=&#34;_blank&#34;&gt;org-brain on github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo done STABLE&#34;&gt;STABLE&lt;/span&gt;  Basic setup along with org-id&lt;/p&gt;

&lt;p&gt;Since org-brain requires the org id for a heading to be recognized and displayed, it is convenient to have capture and refile mechanisms that create the org-id if the heading does not have it.&lt;/p&gt;

&lt;p&gt;Further streamlining is necessary as such.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-brain
  :ensure t
  :init
  (setq org-brain-path &amp;quot;~/my_org/brain/&amp;quot;)
  ;; ;; For Evil users
  ;; (with-eval-after-load &#39;evil
  ;;   (evil-set-initial-state &#39;org-brain-visualize-mode &#39;emacs))
  :config
  (setq org-id-track-globally t)
  (setq org-id-locations-file &amp;quot;~/my_org/emacs_meta/.org-id-locations&amp;quot;)
  (push &#39;(&amp;quot;b&amp;quot; &amp;quot;Brain&amp;quot; plain (function org-brain-goto-end)
          &amp;quot;* %i%?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;quot; :empty-lines 1)
        org-capture-templates)
  (setq org-brain-visualize-default-choices &#39;all)
  (setq org-brain-title-max-length 12)
  (add-hook &#39;org-brain-refile &#39;org-id-get-create)
  (global-set-key (kbd &amp;quot;M-s v&amp;quot;) #&#39;org-brain-visualize)
  )

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;org-journal&#34;&gt;Org journal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Base config&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-journal
  :ensure t
  :defer t
  :custom
  (org-journal-dir &amp;quot;~/my_org/journal/&amp;quot;)
  (org-journal-file-format &amp;quot;%Y%m%d&amp;quot;)
  (org-journal-enable-agenda-integration t)
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;setting org-capture template for Journal&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun org-journal-find-location ()
  ;; Open today&#39;s journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  ;; Position point on the journal&#39;s top-level heading so that org-capture
  ;; will add the new entry as a child entry.
  (goto-char (point-min)))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Figure out easy encryption approach for org journal&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;org-sticky-header&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Org sticky Header &lt;code&gt;[0/1]&lt;/code&gt;&lt;/h4&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Explore further options : example full path or customised path to be shown&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This package displays in the header-line the Org heading for the node that’s at the top of the window. This way, if the heading for the text at the top of the window is beyond the top of the window, you don’t forget which heading the text belongs to. The display can be customized to show just the heading, the full outline path, or the full outline path in reverse.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/alphapapa/org-sticky-header/blob/master/README.org&#34; target=&#34;_blank&#34;&gt;org-sticky-header&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is especially useful for free form longer Documentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-sticky-header
  :ensure t
  :config
  (org-sticky-header-mode)
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-wild-notifier&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Org wild Notifier&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-28 Thu 13:48] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This seems to be able to do exactly what I am looking for. However there are unexplained errors while starting up the package.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-wild-notifier
  :ensure t
  :custom
  (require &#39;org-wild-notifier)
  (org-wild-notifier-mode)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-to-rst-exporter&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Org to RST Exporter&lt;/h4&gt;

&lt;p&gt;It is useful to be able to export to the RST format to develop documentation for projects and host with the sphinx or readthedocs platform.&lt;/p&gt;

&lt;p&gt;This platform is actually pleasant to browse through documentation and has good search facilities as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ox-rst
  :ensure t
  :defer t
  :config
  (require &#39;ox-rst)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-to-slack-exporter&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Org to Slack exporter&lt;/h4&gt;

&lt;p&gt;This should prove handy as I write almost all my responses within Org mode and copy this into Slack.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ox-slack
  :ensure t
  :defer
  :config
  (require &#39;ox-slack)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;ox-pandoc&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; ox-pandoc&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ox-pandoc
  :ensure t
  :defer
  :config
  (require &#39;ox-pandoc)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setting-the-columns-for-the-column-view&#34;&gt;Setting the columns for the column view&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-columns-default-format &amp;quot;%50ITEM %TODO %3PRIORITY %10TAGS %17Effort(Estimated Effort){:} %12CLOCKSUM&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-sidebar&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; org-sidebar&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-sidebar
  :ensure t
  :defer nil
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;stable-extras&#34;&gt;Stable Extras&lt;/h2&gt;

&lt;p&gt;These are packages and code snippets that I know to be working fine. Some still have rough edges and these are marked test. However not having these will not break my experience. Over time, some of these may make it to the core stable group.&lt;/p&gt;

&lt;h3 id=&#34;time-machine-for-git&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Time machine for git&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-08 Fri 13:21] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Launched by &lt;code&gt;M-x git-timemachine&lt;/code&gt;, this lets you navigate through the commit history with a single key press! This is especially awesome for tracking changes to a particular snippet of code.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:30]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to evaluate this. The purpose is for stepping through the history of a file recorded in git. This should be very interesting.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package git-timemachine
  :ensure t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;loading-external-packages&#34;&gt;Loading External Packages&lt;/h3&gt;

&lt;p&gt;Loading external packages:  there are some packages which are not avaialble on MELPA and have to be loaded via cloning their git Repositories. This is especially relevant to new packages.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(let ((default-directory  &amp;quot;~/scimax/user/external_packages/&amp;quot;))
  (normal-top-level-add-subdirs-to-load-path))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;memento-mori&#34;&gt;memento mori&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-15 Mon 09:37] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This package requires the birthdate to be specified, therefore it is included in the encrypted section of my personal config. A sample configuration is provided for reference.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a cool little package that displays your age with double decimal digits. A good reminder to get productive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package memento-mori
  :ensure t
  :defer nil
  :config
  (setq memento-mori-birth-date &amp;quot;2018-12-31&amp;quot;)
  (memento-mori-mode 1)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#+END_SRC&lt;/p&gt;

&lt;h3 id=&#34;treemacs-setup&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Treemacs Setup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load &#39;winum
    (define-key winum-keymap (kbd &amp;quot;M-0&amp;quot;) #&#39;treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs
          (if (executable-find &amp;quot;python3&amp;quot;) 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              &amp;quot;&amp;quot;
          treemacs-goto-tag-strategy             &#39;refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            &amp;quot; &amp;quot;
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          ttreemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  &amp;quot;~/my_org/emacs_meta/.treemacs-persist&amp;quot;
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   &#39;always
          treemacs-recenter-after-project-expand &#39;on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       &#39;alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    ;;(treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find &amp;quot;git&amp;quot;)))
                 (not (null (executable-find &amp;quot;python3&amp;quot;))))
      (`(t . t)
       (treemacs-git-mode &#39;deferred))
      (`(t . _)
       (treemacs-git-mode &#39;simple))))
  :bind
  (:map global-map
        (&amp;quot;M-0&amp;quot;       . treemacs-select-window)
        (&amp;quot;M-s t t&amp;quot; . treemacs)
        (&amp;quot;M-s t w&amp;quot; . treemacs-switch-workspace)
        ;; (&amp;quot;C-x t 1&amp;quot;   . treemacs-delete-other-windows)
        ;; (&amp;quot;C-x t t&amp;quot;   . treemacs)
        ;; (&amp;quot;C-x t B&amp;quot;   . treemacs-bookmark)
        ;; (&amp;quot;C-x t C-t&amp;quot; . treemacs-find-file)
        ;; (&amp;quot;C-x t M-t&amp;quot; . treemacs-find-tag)
        )
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; (use-package treemacs-evil
;;   :after treemacs evil
;;   :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scimax-customisations&#34;&gt;Scimax customisations&lt;/h3&gt;

&lt;p&gt;These are settings which custmise scimax specific variables. These are separated out here so that it becomes easier to try out Emacs configurations that are outside scimax.&lt;/p&gt;

&lt;h4 id=&#34;redefining-scimax-apps&#34;&gt;Redefining scimax-apps&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt;  explorer&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun explorer (&amp;amp;optional path)
  &amp;quot;Open Finder or Windows Explorer in the current directory.&amp;quot;
  (interactive (list (if (buffer-file-name)
             (file-name-directory (buffer-file-name))
               (expand-file-name default-directory))))
  (cond
   ((string= system-type &amp;quot;gnu/linux&amp;quot;)
    (shell-command &amp;quot;nautilus&amp;quot;))
   ((string= system-type &amp;quot;darwin&amp;quot;)
    (shell-command (format &amp;quot;open -b com.apple.finder%s&amp;quot;
               (if path (format &amp;quot; \&amp;quot;%s\&amp;quot;&amp;quot;
                        (file-name-directory
                         (expand-file-name path))) &amp;quot;&amp;quot;))))
   ((string= system-type &amp;quot;windows-nt&amp;quot;)
    (shell-command (format &amp;quot;explorer %s&amp;quot;
               (replace-regexp-in-string
                &amp;quot;/&amp;quot; &amp;quot;\\\\&amp;quot;
                path))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;bash&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; (defun sr/bash (args) ...)

(defun sr/bash (&amp;amp;optional path)
  &amp;quot;Open a bash window.
PATH is optional, and defaults to the current directory.
commands (`scimax-user-bash-app&#39;)
&amp;quot;
  (interactive (list (if (buffer-file-name)
             (file-name-directory (buffer-file-name))
               (expand-file-name default-directory))))
  (cond
   ((string= system-type &amp;quot;gnu/linux&amp;quot;)
    (shell-command &amp;quot;xfce4-terminal&amp;quot;))
   ((string= system-type &amp;quot;darwin&amp;quot;)
    (shell-command
     (format &amp;quot;open -b com.apple.iterm2&amp;quot;
         (if path (format &amp;quot; \&amp;quot;%s\&amp;quot;&amp;quot; (expand-file-name path)) &amp;quot;&amp;quot;))))
   ((string= system-type &amp;quot;windows-nt&amp;quot;)
    (shell-command &amp;quot;start \&amp;quot;\&amp;quot; \&amp;quot;%SYSTEMDRIVE%\\Program Files\\Git\\bin\\bash.exe\&amp;quot; --login &amp;amp;&amp;quot;))))

(advice-add &#39;bash :override #&#39;sr/bash)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(advice-remove &#39;bash #&#39;scimax-user-bash-app)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;scimax-autoformat-and-corrections&#34;&gt;Scimax autoformat and corrections&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-07 Thu 16:24] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Changing keyboard shortcut for equation insertion as this interferes with i3wm functioning.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: any expansion can be undone with C-/&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lips&#34;&gt;(add-hook &#39;org-mode-hook &#39;scimax-autoformat-mode)
(scimax-toggle-abbrevs &#39;scimax-month-abbreviations +1)
(scimax-toggle-abbrevs &#39;scimax-transposition-abbreviations +1)
(scimax-toggle-abbrevs &#39;scimax-misc-abbreviations nil)
(scimax-toggle-abbrevs &#39;scimax-weekday-abbreviations +1)
(global-set-key (kbd &amp;quot;s-q&amp;quot;) &#39;org-latex-math-region-or-point)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;scimax-hotspots&#34;&gt;Scimax Hotspots&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq scimax-user-hotspot-commands
      &#39;((&amp;quot;Agenda All&amp;quot; . (lambda () (org-agenda &amp;quot;&amp;quot; &amp;quot;a&amp;quot;)))
        (&amp;quot;Agenda Office&amp;quot; . (lambda () (org-agenda &amp;quot;&amp;quot; &amp;quot;o&amp;quot;)))
	(&amp;quot;Mail&amp;quot; . (lambda ()
                    (if (get-buffer &amp;quot;*mu4e-headers*&amp;quot;)
                        (progn
                          (switch-to-buffer &amp;quot;*mu4e-headers*&amp;quot;)
                          (delete-other-windows))
                      (mu4e))))
        (&amp;quot;Bookmarks&amp;quot; . (lambda () (helm-source-bookmarks)))
        (&amp;quot;Reload custom config - org babel&amp;quot; . (lambda () (org-babel-load-file (expand-file-name &amp;quot;sr-config.org&amp;quot; user-emacs-directory))))
        )
      )

(setq scimax-user-hotspot-locations
      &#39;(
        (&amp;quot;CV Org&amp;quot; . &amp;quot;~/org_cv/CV_Shreyas_Ragavan.org&amp;quot;)
        (&amp;quot;tmrs&amp;quot;  .  &amp;quot;~/my_org/tmsr.org&amp;quot;)
        (&amp;quot;scd - scimax dir&amp;quot; . &amp;quot;~/scimax/&amp;quot; )
        (&amp;quot;scu - scimax user dir&amp;quot; . &amp;quot;~/scimax/user/&amp;quot;)
        ( &amp;quot;sco - scimax org conf&amp;quot; . &amp;quot;~/scimax/user/sr-config.org&amp;quot;)
        (&amp;quot;blog&amp;quot; . &amp;quot;~/my_org/blog-book.org&amp;quot;)
	(&amp;quot;github&amp;quot; . &amp;quot;~/my_gits/&amp;quot;)
        (&amp;quot;project&amp;quot; . &amp;quot;~/my_projects/&amp;quot;)
        (&amp;quot;cheatsheet&amp;quot; . &amp;quot;~/my_projects/ds_cheatsheets/&amp;quot;)
        (&amp;quot;passwords&amp;quot; . &amp;quot;~/my_org/secrets.org.gpg&amp;quot;)
        (&amp;quot;references&amp;quot; . &amp;quot;~/Dropbox/bibliography/references.bib&amp;quot;)
        )
      )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;scimax-elfeed&#34;&gt;Scimax Elfeed&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;scimax-elfeed)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;scimax-notebook-directory&#34;&gt;Scimax Notebook directory&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq nb-notebook-directory &amp;quot;~/my_projects/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;scimax-notebook&#34;&gt;Scimax notebook&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;M-s n&amp;quot;) &#39;nb-open)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;changing-key-for-scimax-body&#34;&gt;Changing key for scimax/body&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;C-\\&amp;quot;) &#39;scimax/body)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;scimax-python&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Scimax Python&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;scimax-org-babel-python)
(require &#39;ob-ipython)
(require &#39;scimax-ob)
(require &#39;scimax-org-babel-ipython-upstream)
(setq ob-ipython-exception-results nil)
(scimax-ob-ipython-turn-on-eldoc)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;message-loaded-scimax-customisations&#34;&gt;Message : loaded scimax Customisations&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(message &amp;quot;Loaded scimax customisations&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;swiper&#34;&gt;Swiper&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-09-24 Tue 10:31] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Swiper and below keybinding is included by default in scimax.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 16:50] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
I use swiper for a general search. However &lt;a href=&#34;#helm-swoop&#34;&gt;helm-swoop&lt;/a&gt; is awesome.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;C-s&amp;quot;) &#39;swiper)
(setq ivy-display-style &#39;fancy)

;; advise swiper to recenter on exit
(defun bjm-swiper-recenter (&amp;amp;rest args)
  &amp;quot;recenter display after swiper&amp;quot;
  (recenter)
  )
(advice-add &#39;swiper :after #&#39;bjm-swiper-recenter)

(message &amp;quot;Loaded Swiper customisation&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;writeroom-customisations&#34;&gt;Writeroom customisations&lt;/h3&gt;

&lt;p&gt;The goal is to enable a customised zen writing mode, especially facilitating blog posts and other longer forms of writing. As of now, there are customisations for the width, and calling the art-bollocks mode when writeroom mode is enabled.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(with-eval-after-load &#39;writeroom-mode
  (define-key writeroom-mode-map (kbd &amp;quot;C-s-,&amp;quot;) #&#39;writeroom-decrease-width)
  (define-key writeroom-mode-map (kbd &amp;quot;C-s-.&amp;quot;) #&#39;writeroom-increase-width)
  (define-key writeroom-mode-map (kbd &amp;quot;C-s-=&amp;quot;) #&#39;writeroom-adjust-width))

(advice-add &#39;text-scale-adjust :after
	    #&#39;visual-fill-column-adjust)

;;  loading artbollocks whenever the writeroom mode is called in particular.
(autoload &#39;artbollocks-mode &amp;quot;artbollocks-mode&amp;quot;)
(add-hook &#39;writeroom-mode-hook &#39;artbollocks-mode)

(message &amp;quot;Loaded writeroom customisations&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ess-configuration&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; ESS configuration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-19 Tue 10:14] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Using the tabviewer application for Antergos.&lt;a href=&#34;https://bbs.archlinux.org/viewtopic.php?id=156295&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-09 Sat 12:36] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Set this up with use-package and explore further customisations. As of now, I use yasnippet to insert commonly used operators like the assign and pipe operators.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note:  I use the TAD application to view CSV files. It is a cross platform application that is a lot faster than launching a spreadsheet based program.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ess
  :ensure t
  :config
  (require &#39;ess)
  (use-package ess-R-data-view)
  (use-package polymode)
  (setq ess-describe-at-point-method nil)
  (setq ess-switch-to-end-of-proc-buffer t)
  (setq ess-rutils-keys +1)
  (setq ess-eval-visibly &#39;nil)
  (setq ess-use-flymake +1)
  (setq ess-use-company t)
  (setq ess-history-file &amp;quot;~/.Rhistory&amp;quot;)
  (setq ess-use-ido t)
  (setq ess-roxy-hide-show-p t)
  ;;(speedbar-add-supported-extension &amp;quot;.R&amp;quot;)
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)
  )

;; The following chunk is taken from: https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Blang/ess/packages.el
;;; Follow Hadley Wickham&#39;s R style guide
(setq ess-first-continued-statement-offset 2
      ess-continued-statement-offset 0
      ess-expression-offset 2
      ess-nuke-trailing-whitespace-p t
      ess-default-style &#39;DEFAULT)


;; Adding Poly-R package

(use-package poly-R
  :ensure t
  )
;; The following chunk is taken from antonio&#39;s answer from https://stackoverflow.com/questions/16172345/how-can-i-use-emacs-ess-mode-with-r-markdown
(defun rmd-mode ()
  &amp;quot;ESS Markdown mode for rmd files.&amp;quot;
  (interactive)
  (require &#39;poly-R)
  (require &#39;poly-markdown)
  (poly-markdown+r-mode))

(use-package ess-view
  :ensure t
  :config
  (require &#39;ess-view)
  (if (system-type-is-darwin)
      (setq ess-view--spreadsheet-program
            &amp;quot;/Applications/Tad.app/Contents/MacOS/Tad&amp;quot;
            )
    )
  (if (system-type-is-gnu)
      (setq ess-view--spreadsheet-program
            &amp;quot;tad&amp;quot;
            )
    )
  )

;; This is taken and slightly modified from the ESS manual
;; The display config is similar to that of Rstudio

(setq display-buffer-alist
      `((&amp;quot;*R Dired&amp;quot;
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (slot . -1)
         (window-width . 0.33)
         (reusable-frames . nil))
        (&amp;quot;*R&amp;quot;
         (display-buffer-reuse-window display-buffer-at-bottom)
         (window-width . 0.35)
         (reusable-frames . nil))
        (&amp;quot;*Help&amp;quot;
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (slot . 1)
         (window-width . 0.33)
         (reusable-frames . nil))))

(message &amp;quot;Loaded ESS configuration&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ox-reveal-presentations&#34;&gt;ox-reveal - presentations&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ox-reveal
  :ensure ox-reveal
  :defer nil
  :config
  (setq org-reveal-root &amp;quot;http://cdn.jsdelivr.net/reveal.js/3.0.0/&amp;quot;)
  (setq org-reveal-mathjax t)
  )

(use-package htmlize
  :ensure t)

(message &amp;quot;Loaded ox-reveal cust&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;deft&#34;&gt;Deft&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Deft is an Emacs mode for quickly browsing, filtering, and editing directories of plain text notes, inspired by Notational Velocity. It was designed for increased productivity when writing and taking notes by making it fast and simple to find the right file at the right time and by automating many of the usual tasks such as creating new files and saving files.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jblevins.org/projects/deft/&#34; target=&#34;_blank&#34;&gt;Deft project&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package deft
  :bind (&amp;quot;&amp;lt;f8&amp;gt; d&amp;quot; . deft)
  :commands (deft)
  :config (setq deft-directory &amp;quot;~/my_org/brain/&amp;quot;
                deft-extensions &#39;(&amp;quot;md&amp;quot; &amp;quot;org&amp;quot; &amp;quot;txt&amp;quot;)
                deft-recursive t
                ))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;w3m-customisation&#34;&gt;w3m customisation&lt;/h3&gt;

&lt;p&gt;w3m is a suprisingly able browser that is able to cater to most websites, except those that are a little too rich with java and etc. Being within Emacs, and launching almost instantly with significantly less overhead in terms of RAM no matter how many tabs are open - it is also easy to customise the behavior as needed and is an excellent method of distraction free browsing.&lt;/p&gt;

&lt;p&gt;However, it pays to have handy shortcuts to open a link in the default browser of the OS. This is especially to cater to heavier websites. The w3m package would need to be installed using the package manager of the OS to use w3m.&lt;/p&gt;

&lt;p&gt;A few snippets were sourced from: &lt;a href=&#34;http://beatofthegeek.com/2014/02/my-setup-for-using-emacs-as-web-browser.html&#34; target=&#34;_blank&#34;&gt;http://beatofthegeek.com/2014/02/my-setup-for-using-emacs-as-web-browser.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;setting-default-browser-to-be-w3m&#34;&gt;Setting default browser to be w3m&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;;(setq browse-url-browser-function &#39;browse-url-default-browser)
(setq browse-url-browser-function &#39;w3m-goto-url-new-session)
(setq w3m-default-display-inline-images t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;appending-http-to-web-addresses-entered-by-hand&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Appending HTTP to web addresses entered by hand&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 07:40]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Check whether this is necessary&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;;when I want to enter the web address all by hand
(defun w3m-open-site (site)
  &amp;quot;Opens site in new w3m session with &#39;http://&#39; appended&amp;quot;
  (interactive
   (list (read-string &amp;quot;Enter website address(default: w3m-home):&amp;quot; nil nil w3m-home-page nil )))
  (w3m-goto-url-new-session
   (concat &amp;quot;http://&amp;quot; site)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;changing-w3m-shortcuts-for-better-tabbed-browsing&#34;&gt;Changing w3m shortcuts for better tabbed browsing&lt;/h4&gt;

&lt;p&gt;Source:  Sacha Chua : &lt;a href=&#34;http://sachachua.com/blog/2008/09/emacs-and-w3m-making-tabbed-browsing-easier/&#34; target=&#34;_blank&#34;&gt;http://sachachua.com/blog/2008/09/emacs-and-w3m-making-tabbed-browsing-easier/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(eval-after-load &#39;w3m
  &#39;(progn
     (define-key w3m-mode-map &amp;quot;q&amp;quot; &#39;w3m-previous-buffer)
     (define-key w3m-mode-map &amp;quot;w&amp;quot; &#39;w3m-next-buffer)
     (define-key w3m-mode-map &amp;quot;x&amp;quot; &#39;w3m-close-window)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;default-external-browser-settings&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Default external browser settings&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 07:37]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to have this change depending whether the OS is Linux or Mac OS&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun wicked/w3m-open-current-page-in-default-browser ()
  &amp;quot;Open the current URL in Mozilla Firefox.&amp;quot;
  (interactive)
  (browse-url-default-browser w3m-current-url)) ;; (1)

(defun wicked/w3m-open-link-or-image-in-default-browser ()
  &amp;quot;Open the current link or image in Firefox.&amp;quot;
  (interactive)
  (browse-url-default-browser (or (w3m-anchor) ;; (2)
                                         (w3m-image)))) ;; (3)

(eval-after-load &#39;w3m
  &#39;(progn
     (define-key w3m-mode-map &amp;quot;o&amp;quot; &#39;wicked/w3m-open-current-page-in-default-browser)
     (define-key w3m-mode-map &amp;quot;O&amp;quot; &#39;wicked/w3m-open-link-or-image-in-default-browser)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;wikipedia-search&#34;&gt;Wikipedia search&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun wikipedia-search (search-term)
  &amp;quot;Search for SEARCH-TERM on wikipedia&amp;quot;
  (interactive
   (let ((term (if mark-active
                   (buffer-substring (region-beginning) (region-end))
                 (word-at-point))))
     (list
      (read-string
       (format &amp;quot;Wikipedia (%s):&amp;quot; term) nil nil term)))
   )
  (browse-url
   (concat
    &amp;quot;http://en.m.wikipedia.org/w/index.php?search=&amp;quot;
    search-term
    ))
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;access-hacker-news&#34;&gt;Access Hacker News&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun hn ()
  (interactive)
  (browse-url &amp;quot;http://news.ycombinator.com&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;open-specific-browser-depending-on-the-url&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Open specific browser depending on the URL&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-07 Thu 11:59] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This is worth setting up. It would be convenient for frequently visited websites like reddit and others, to open in the external browser, especially as they do not render well within w3m.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source : &lt;a href=&#34;http://ergoemacs.org/emacs/emacs%5Fset%5Fdefault%5Fbrowser.Html&#34; target=&#34;_blank&#34;&gt;http://ergoemacs.org/emacs/emacs%5Fset%5Fdefault%5Fbrowser.Html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; use browser depending on url
(setq
 browse-url-browser-function
 &#39;(
  (&amp;quot;wikipedia\\.org&amp;quot; . browse-url-firefox)
  (&amp;quot;github&amp;quot; . browse-url-chromium)
  (&amp;quot;thefreedictionary\\.com&amp;quot; . eww-browse-url)
  (&amp;quot;.&amp;quot; . browse-url-default-browser)
  ))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;frog-jump-buffer&#34;&gt;frog jump buffer&lt;/h3&gt;

&lt;p&gt;This package provides a nifty little pop up containing a list of buffers (that can be filtered), and enables jumping to the specified buffer with just a single key press.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package frog-jump-buffer
  :ensure t
  :defer nil
  :config
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;easy-kill-and-easy-mark&#34;&gt;easy-kill and easy mark&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-04-25 Thu 07:48] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The line selection, &amp;lsquo;e&amp;rsquo;, does not pick up lines separated with a full stop. Instead the entire paragraph is being selected.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Provide commands easy-kill and easy-mark to let users kill or mark things easily.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/leoliu/easy-kill&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This looks like a very handy package. The easiest way to get started is to cycle through the selections and use the help. Activate the command with &lt;code&gt;M-w&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt; for help which provides the list of key bindings. Alternately, use &lt;code&gt;SPC&lt;/code&gt; to cycle through the options available.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package easy-kill
  :config
  (global-set-key [remap kill-ring-save] &#39;easy-kill)
  (global-set-key [remap mark-sexp] &#39;easy-mark)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;eyebrowse&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; eyebrowse&lt;/h3&gt;

&lt;p&gt;This has to be combined with desktop.el or some other method to enable persistence across sessions. However, this does work well for a single session.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package eyebrowse
  :ensure t
  :defer nil
  :config
  (setq eyebrowse-mode-line-separator &amp;quot; &amp;quot;
        eyebrowse-new-workspace t)
  (eyebrowse-mode 1)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hugo&#34;&gt;Hugo&lt;/h3&gt;

&lt;h4 id=&#34;function-to-create-specific-properties-for-a-blog-post&#34;&gt;Function to create specific properties for a blog post&lt;/h4&gt;

&lt;p&gt;Modified this function from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Defining content directory&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:06]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to check if this is still required since I have switche to ox-hugo&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defvar hugo-content-dir &amp;quot;~/my_gits/hugo-sr/content/post/&amp;quot;
  &amp;quot;Path to Hugo&#39;s content directory&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ensuring properties exist and creating if they dont exist&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun hugo-ensure-property (property)
  &amp;quot;Make sure that a property exists. If not, it will be created.
Returns the property name if the property has been created, otherwise nil.&amp;quot;
  (org-id-get-create)
  (if (org-entry-get nil property)
      nil
    (progn (org-entry-put nil property &amp;quot;&amp;quot;)
           property)))

(defun hugo-ensure-properties ()

  (require &#39;dash)
  (let ((current-time (format-time-string
                       (org-time-stamp-format t t) (org-current-time)))
        first)
    (save-excursion
      (setq first (--first it (mapcar #&#39;hugo-ensure-property
                                      &#39;(&amp;quot;HUGO_TAGS&amp;quot; &amp;quot;HUGO_CATEGORIES&amp;quot;))))
      (unless (org-entry-get nil &amp;quot;HUGO_DATE&amp;quot;)
        (org-entry-put nil &amp;quot;EXPORT_DATE&amp;quot; current-time)))
    (org-entry-put nil &amp;quot;EXPORT_FILE_NAME&amp;quot; (org-id-get-create))
    (org-entry-put nil &amp;quot;EXPORT_HUGO_CUSTOM_FRONT_MATTER&amp;quot; &amp;quot;:profile false&amp;quot;)
    (when first
      (goto-char (org-entry-beginning-position))
      ;; The following opens the drawer
      (forward-line 1)
      (beginning-of-line 1)
      (when (looking-at org-drawer-regexp)
        (org-flag-drawer nil))
      ;; And now move to the drawer property
      (search-forward (concat &amp;quot;:&amp;quot; first &amp;quot;:&amp;quot;))
      (end-of-line))
    first))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hugo function calling the above&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun hugo ()
  (interactive)
  (unless (hugo-ensure-properties)
    (let* ((type    (concat &amp;quot;type = \&amp;quot;&amp;quot; (org-entry-get nil &amp;quot;HUGO_TYPE&amp;quot;) &amp;quot;\&amp;quot;\n&amp;quot;))
           (date     (concat &amp;quot;date = \&amp;quot;&amp;quot;
                             (format-time-string &amp;quot;%Y-%m-%d&amp;quot;
                                                 (apply &#39;encode-time
                                                        (org-parse-time-string
                                                         (org-entry-get nil &amp;quot;HUGO_DATE&amp;quot;))) t) &amp;quot;\&amp;quot;\n&amp;quot;))
           (tags     (concat &amp;quot;tags = [ \&amp;quot;&amp;quot;
                             (mapconcat &#39;identity
                                        (split-string
                                         (org-entry-get nil &amp;quot;HUGO_TAGS&amp;quot;)
                                         &amp;quot;\\( *, *\\)&amp;quot; t) &amp;quot;\&amp;quot;, \&amp;quot;&amp;quot;) &amp;quot;\&amp;quot; ]\n&amp;quot;))
           (fm (concat &amp;quot;+++\n&amp;quot;
                       title
               type
                       date
                       tags
                       topics
                       &amp;quot;+++\n\n&amp;quot;))
           (coding-system-for-write buffer-file-coding-system)
           (backend  &#39;md)
           (blog))
      ;; try to load org-mode/contrib/lisp/ox-gfm.el and use it as backend
      (if (require &#39;ox-gfm nil t)
          (setq backend &#39;gfm)
        (require &#39;ox-md))
      (setq blog (org-export-as backend t))
      ;; Normalize save file path
      (unless (string-match &amp;quot;^[/~]&amp;quot; file)
        (setq file (concat hugo-content-dir file))
        (unless (string-match &amp;quot;\\.md$&amp;quot; file)
          (setq file (concat file &amp;quot;.md&amp;quot;)))
        ;; save markdown
        (with-temp-buffer
          (insert fm)
          (insert blog)
          (untabify (point-min) (point-max))
          (write-file file)
          (message &amp;quot;Exported to %s&amp;quot; file))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ox-hugo-setup&#34;&gt;ox-hugo setup&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ox-hugo
  :ensure t
  :defer t
  :after ox
  :custom
  (org-hugo--tag-processing-fn-replace-with-hyphens-maybe t)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;

&lt;p&gt;These are packages and functions that I am exploring, and also ones that I can live without. i.e not having these packages functioning, will not make Emacs useless for me, however, having these snippets working could potentially improve my workflow in general.&lt;/p&gt;

&lt;p&gt;Some of these snippets or packages are enabled and some are not. In the case of troubleshooting, I will disable&lt;/p&gt;

&lt;h3 id=&#34;scimax-cusomisations&#34;&gt;Scimax cusomisations&lt;/h3&gt;

&lt;h4 id=&#34;scimax-journal-settings&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Scimax journal settings&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-09-25 Wed 13:15] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Adding the shortcut to new entry does not work. This has to be refined.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; (setq scimax-journal-root-dir &amp;quot;~/my_org/journal&amp;quot;)
;;(require &#39;calendar)
;;(global-set-key (kbd &amp;quot;M-s j&amp;quot;) &#39;scimax-journal-new-entry)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;bibliography-settings-and-customisation&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Bibliography settings and customisation&lt;/h4&gt;

&lt;p&gt;This was setup a long time ago to convert past technical repots into org mode, with references made in correct technical style. This project is on hold.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;doi-utils)
(require &#39;org-ref-wos)
(require &#39;org-ref-pubmed)
(require &#39;org-ref-arxiv)
(require &#39;org-ref-bibtex)
(require &#39;org-ref-pdf)
(require &#39;org-ref-url-utils)
(require &#39;org-ref-helm)

;; note and bib location

(setq org-ref-bibliography-notes &amp;quot;~/my_org/references/references.org&amp;quot;
      org-ref-bibliography-notes &amp;quot;~/my_org/references/research_notes.org&amp;quot;
      org-ref-default-bibliography &#39;(&amp;quot;~/my_org/references/references.bib&amp;quot;)
      org-ref-pdf-directory &amp;quot;~/my_org/references/pdfs/&amp;quot;)

;; setting up helm-bibtex
(setq helm-bibtex-bibliography &amp;quot;~/my_org/references/references.bib&amp;quot;
      helm-bibtex-library-path &amp;quot;~/my_org/org/references/pdfs&amp;quot;
      helm-bibtex-notes-path &amp;quot;~/my_org/references/research_notes.org&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;adding-actions-to-ivy&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Adding actions to ivy&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(ivy-add-actions
 &#39;projectile-completing-read
 &#39;((&amp;quot;b&amp;quot; (lambda (x)
	  (bash x))  &amp;quot;Open bash here.&amp;quot;)
   (&amp;quot;f&amp;quot; (lambda (x)
	  (finder x))  &amp;quot;Open Finder here.&amp;quot;)
   (&amp;quot;a&amp;quot; (lambda (x)
	  (helm-do-ag x) &amp;quot;helm do ag here.&amp;quot;))))

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setting-hyper-key-for-the-mac&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Setting Hyper key for the mac&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(if (system-name-is-darwin)
    (setq mac-)
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-db&#34;&gt;org-Db&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;`org-db&amp;rsquo; is an org-mode database. When it is active every org-mode file you visit will be indexed into a sqlite database. In each file, each headline with its title, tags and properties are stored, and every link in each file is stored.&lt;/p&gt;

&lt;p&gt;This becomes useful because you can then search all of your org-files and jump to different locations.&lt;/p&gt;

&lt;p&gt;Scimax help documentation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package emacsql-sqlite
  :ensure t
  :config
  (require &#39;org-db)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;tangle-org-mode-config-on-save&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Tangle org mode config on save&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-08-28 Wed 13:44] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Though this is an after-save hook : there is something wrong with the method of tangling. Perhaps an older version of the file is being used. I have changed this to a tangle during the loading of Scimax.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-14 Thu 13:14] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Need to add a condition of check: tangle if the file does not exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://thewanderingcoder.com/2015/02/literate-emacs-configuration/&#34; target=&#34;_blank&#34;&gt;https://thewanderingcoder.com/2015/02/literate-emacs-configuration/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a nice code snippet to automate the tangling on saving the config. This saves time while starting up Emacs&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun sr/tangle-on-save-emacs-config-org-file()
  (interactive)
  (if (string= buffer-file-name (file-truename &amp;quot;~/scimax/user/sr-config.org&amp;quot;))
      (org-babel-tangle-file &amp;quot;~/scimax/user/sr-config.org&amp;quot; &amp;quot;~/scimax/user/sr-config.el&amp;quot;)
    )
  )

(defun sr/tangle-if-file-absent ()
  (interactive)
  (if nil  (file-exists-p &amp;quot;~/scimax/user/sr-config.el&amp;quot;)
    (org-babel-tangle-file  &amp;quot;~/scimax/user/sr-config.org&amp;quot; &amp;quot;~/scimax/user/sr-config.el&amp;quot;)
    )
  )
;; (add-hook &#39;after-save-hook &#39;sr/dotemacs-export)
(add-hook &#39;after-save-hook
          &#39;sr/tangle-on-save-emacs-config-org-file)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;visual-line-and-visual-fill-column&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Visual line and visual fill column&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package visual-fill-column
  :ensure t
  :config
  (setq visual-fill-column-width 80)
  (setq global-visual-fill-column-mode 1)
  (setq global-visual-line-mode 1)
)

;;(add-hook &#39;visual-line-mode-hook #&#39;visual-fill-column-mode)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;marking&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Marking&lt;/h3&gt;

&lt;p&gt;I want a way to efficiently mark a location in a long script and jump around these locations (forward and backwards). The &lt;code&gt;transient-mark-mode&lt;/code&gt; and the different mark-rings need to be leveraged to do accomplish this. First step is to set a mark using &lt;code&gt;C-spc C-spc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Adopting the approach described at &lt;a href=&#34;https://masteringemacs.org/article/fixing-mark-commands-transient-mark-mode&#34; target=&#34;_blank&#34;&gt;Mastering Emacs&lt;/a&gt;. This enables a single key for a mark to activate and then deactivate, thus creating a mark.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun push-mark-no-activate ()
  &amp;quot;Pushes `point&#39; to `mark-ring&#39; and does not activate the region
   Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled&amp;quot;
  (interactive)
  (push-mark (point) t nil)
  (message &amp;quot;Pushed mark to ring&amp;quot;))

(global-set-key (kbd &amp;quot;C-`&amp;quot;) &#39;push-mark-no-activate)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;tmm-menu&lt;/code&gt; command&amp;rsquo;s shortcut &lt;code&gt;M-`&lt;/code&gt; is much better served by &lt;code&gt;M-x counsel-tmm&lt;/code&gt; where search is possible.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun jump-to-mark ()
  &amp;quot;Jumps to the local mark, respecting the `mark-ring&#39; order.
  This is the same as using \\[set-mark-command] with the prefix argument.&amp;quot;
  (interactive)
  (set-mark-command 1))
(global-set-key (kbd &amp;quot;M-`&amp;quot;) &#39;jump-to-mark)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;semantic-mode&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Semantic Mode&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Semantic is a package that provides language-aware editing commands based on &amp;lsquo;source-code parsers&amp;rsquo;. When enabled, each file you visit is automatically parsed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tuhdo.github.io/helm-intro.html&#34; target=&#34;_blank&#34;&gt;https://tuhdo.github.io/helm-intro.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(semantic-mode 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sauron&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Sauron&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package sauron
  :ensure t
  :config
  (require &#39;sauron)
  (setq sauron-modules &#39;(sauron-org sauron-notifications))
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;emacs-url-shortener&#34;&gt;emacs url shortener&lt;/h3&gt;

&lt;p&gt;Note that to use one of the url shortening services, an API access token will be needed. Currently, I am using bitly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package url-shortener
  :ensure t
  :defer t
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;free-keys&#34;&gt;free-keys&lt;/h3&gt;

&lt;p&gt;This seems to be a nifty little package that lists the key combinations that are not bound.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package free-keys
  :defer t
  :ensure t
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;zenburn-theme-exploration&#34;&gt;Zenburn theme exploration&lt;/h3&gt;

&lt;p&gt;For a long period, I was using the zenburn theme and had started customising it for my needs. However, I think leuven with a greyish background is really quite suitable. Even so, it&amp;rsquo;s nice to have a dark theme available when required. I&amp;rsquo;m keeping this around for tinkering down the line.&lt;/p&gt;

&lt;h4 id=&#34;disabling-leuven-and-loading-other-theme&#34;&gt;Disabling leuven and loading other theme&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(disable-theme &#39;leuven)
;;(load-theme &#39;spacemacs-dark t)
(load-theme &#39;zenburn t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;background-color-for-org-source-blocks&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Background color for org source Blocks&lt;/h4&gt;

&lt;p&gt;This is necessary due to the customisation in scimax&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(set-face-background &#39;org-block-emacs-lisp &amp;quot;black&amp;quot;)
(set-face-background &#39;org-block-python &amp;quot;black&amp;quot;)
(set-face-background &#39;org-block-ipython &amp;quot;black&amp;quot;)
(set-face-background &#39;org-block &amp;quot;black&amp;quot;)
;; (set-face-background &#39;org-block-quote &amp;quot;black&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;initial-setup-of-zenburn&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Initial setup of Zenburn&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; use variable-pitch fonts for some headings and titles
(setq zenburn-use-variable-pitch t)

;; scale headings in org-mode
(setq zenburn-scale-org-headlines t)

;; scale headings in outline-mode
(setq zenburn-scale-outline-headlines t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;use-package-based-template-for-customising-zenburn&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Use-package based template for customising zenburn&lt;/h4&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://github.com/m-parashar/emax64/issues/5&#34; target=&#34;_blank&#34;&gt;https://github.com/m-parashar/emax64/issues/5&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package zenburn-theme
  :demand t
  :config
  (load-theme &#39;zenburn t)
  (set-face-attribute &#39;font-lock-comment-face nil :italic t)
  (set-face-attribute &#39;font-lock-doc-face nil :italic t)
  (zenburn-with-color-variables
    (set-face-attribute &#39;button nil :foreground zenburn-yellow-2)
    (set-face-attribute &#39;default nil
                        :background zenburn-bg-05
                        :height mp/font-size-default
                        :font mp/font-family)
    (set-face-attribute &#39;help-argument-name nil :foreground zenburn-orange :italic nil)
    (set-face-attribute &#39;hl-line nil :background zenburn-bg+1)
    (set-face-attribute &#39;header-line nil
                        :background zenburn-bg-1
                        :box `(:line-width 2 :color ,zenburn-bg-1)
                        :height mp/font-size-header-line)
    (set-face-attribute &#39;mode-line nil
                        :box `(:line-width 2 :color ,zenburn-bg-1)
                        :foreground zenburn-bg+3
                        :height mp/font-size-mode-line)
    (set-face-attribute &#39;mode-line-inactive nil
                        :box `(:line-width 2 :color ,zenburn-bg-05)
                        :foreground zenburn-bg+3
                        :height mp/font-size-mode-line)
    (set-face-attribute &#39;region nil
                        :background zenburn-fg-1
                        :distant-foreground &#39;unspecified)
    (set-face-attribute &#39;vertical-border nil :foreground zenburn-bg))

  ;; NOTE: See https://github.com/bbatsov/zenburn-emacs/issues/278.
  (zenburn-with-color-variables
    (mapc
     (lambda (face)
       (when (eq (face-attribute face :background) zenburn-bg)
         (set-face-attribute face nil :background &#39;unspecified)))
     (face-list))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setting-font-faces-for-headline-level&#34;&gt;Setting font faces for headline level&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-28 Thu 07:09] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This is available as in-built settings for the zenburn theme. However, once the font is changed, the&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(custom-set-faces
 &#39;(org-level-1 ((t (:inherit outline-1 :height 1.2))))
 &#39;(org-level-2 ((t (:inherit outline-2 :height 1.1))))
 &#39;(org-level-3 ((t (:inherit outline-3 :height 1.05))))
 &#39;(org-level-4 ((t (:inherit outline-4 :height 1.00))))
 &#39;(org-level-5 ((t (:inherit outline-5 :height .95))))
 )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;alfred-integration&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Alfred Integration&lt;/h3&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://github.com/jjasghar/alfred-org-capture&#34; target=&#34;_blank&#34;&gt;https://github.com/jjasghar/alfred-org-capture&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(if (system-type-is-darwin)
    (progn
      ;;; Code:
      (defun make-orgcapture-frame ()
        &amp;quot;Create a new frame and run org-capture.&amp;quot;
        (interactive)
        (make-frame &#39;((name . &amp;quot;remember&amp;quot;) (width . 80) (height . 16)
                      (top . 400) (left . 300)
                      (font . &amp;quot;-apple-Monaco-medium-normal-normal-*-13-*-*-*-m-0-iso10646-1&amp;quot;)
                      ))
        (select-frame-by-name &amp;quot;remember&amp;quot;)
        (org-capture))
      )
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;project-publishing-setup&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Project publishing setup &lt;code&gt;[0/3]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is under construction and was initially started with the idea of having custom publishing settings for different projects. I was initially looking at this for publishing my hugo blog. However, the need has been negated with the excellent ox-hugo package.&lt;/p&gt;

&lt;h4 id=&#34;ox-tufte&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; ox-Tufte&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-04 Thu 11:20] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Minor experiments are completed with this package. However, detailed exploration is required to incorporate intoa  workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This is an export backend for Org-mode that exports buffers to HTML that is compatible with Tufte CSS out of the box (meaning no CSS modifications needed).&lt;/p&gt;

&lt;p&gt;It’s still a work-in-progress, but it works well right now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dakrone/ox-tufte&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ox-tufte
  :defer t
  :config
  (require &#39;ox-tufte)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;exporting-org-projects&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Exporting org projects&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(
 setq org-publish-project-alist
 &#39;(
   (&amp;quot;org-repo&amp;quot;
    :base-directory &amp;quot;./&amp;quot;
    :base-extension &amp;quot;org&amp;quot;
    :publishing-directory &amp;quot;/Users/shreyas/my_projects/dotemacs&amp;quot;
    :EXPORT_FILE_NAME &amp;quot;README.org&amp;quot;
    :recursive f
    :publishing-function org-html-publish-to-html
    ;; :html-head &amp;quot;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;http://dakrone.github.io/org2.css&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;&amp;quot;
    )

   (&amp;quot;md&amp;quot;
    :base-directory &amp;quot;./&amp;quot;
    :base-extension &amp;quot;org&amp;quot;
    :publishing-directory &amp;quot;./export/&amp;quot;
    :recursive t
    :publishing-function org-md-export-to-markdown
    )

   (&amp;quot;Documentation - html + md&amp;quot;
    :components (&amp;quot;html-static&amp;quot; &amp;quot;md&amp;quot; )
    )))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;function-for-exporting-dotemacs-config&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Function for exporting dotemacs config &lt;code&gt;[&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;]&lt;/code&gt;&lt;/h4&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-14 Thu 14:05] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Save the filename as variables.&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-14 Thu 13:30] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Add a condition to check if the directory exists.&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-10 Sun 07:16] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Add a line to revert target export files if they are open. Prefer exporting the org file rather than copying.&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the beginning of a function to perform 3 exports:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Export to my hugo website as a part of my documentation (ox-hugo)&lt;/li&gt;
&lt;li&gt;Copy the org file to my github repo.&lt;/li&gt;
&lt;li&gt;Tangle the copied org file to the above github repository to have the script ready.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Maintaining the documentation on my website does not make it easy to others to view the changes in the configuration and fork or download the same as an org file or emacs-lisp script. Therefore the config that I publish should be maintained in it&amp;rsquo;s own repository.&lt;/p&gt;

&lt;p&gt;As of now, I&amp;rsquo;m calling this function from my Emacs config file, and need to improve the above workflow.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun sr/dotemacs-export()
  (interactive)
  &amp;quot;If directories exist - exporting Org config to Hugo blog, and to Github repository org file and lisp&amp;quot;

  (if (file-directory-p &amp;quot;~/my_projects/dotemacs&amp;quot;)
      (progn
        (copy-file &amp;quot;~/scimax/user/sr-config.org&amp;quot; &amp;quot;~/my_projects/dotemacs/README.org&amp;quot; &amp;quot;OK-IF-ALREADY-EXISTS&amp;quot;)
        (copy-file &amp;quot;~/scimax/user/sr-config.el&amp;quot; &amp;quot;~/my_projects/dotemacs/config.el&amp;quot; &amp;quot;OK-IF-ALREADY-EXISTS&amp;quot;)
        ;; (org-babel-tangle-file  &amp;quot;~/my_projects/dotemacs/README.org&amp;quot; &amp;quot;~/my_projects/dotemacs/config.el&amp;quot;)
        )
    )
  (if (file-directory-p &amp;quot;~/hugo-sr&amp;quot;)
      (progn
        (org-hugo-export-to-md)
        )
    )
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;docker&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Docker&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve started playing with Docker, and need Emacs to take care of my workflows! :).&lt;/p&gt;

&lt;h4 id=&#34;docker-package&#34;&gt;Docker package&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;docker&lt;/code&gt; package enables several commands, but does not seem to include syntax highlighting for docker files.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package docker
  :ensure t
  :defer t
  :config
  (require &#39;docker)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;docker-compose-mode&#34;&gt;docker-compose-mode&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package docker-compose-mode
  :ensure t
  :defer t
  :config
  (require &#39;docker-compose-mode)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;docker-file-mode&#34;&gt;docker-file-mode&lt;/h4&gt;

&lt;p&gt;This is required for syntax highlighting in dockerfiles.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package dockerfile-mode
  :ensure t
  :defer t
  :config
  (require &#39;dockerfile-mode)
  (add-to-list &#39;auto-mode-alist
               &#39;(&amp;quot;Dockerfile\\&amp;quot; . dockerfile-mode)
               )
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;org-bookmark-heading&#34;&gt;org-bookmark-heading&lt;/h3&gt;

&lt;p&gt;For some reason, the default bookmark behavior in org mode is that the bookmark is not linked to the org-id. This means that if the heading is shifted somewhere, the bookmark becomes useless! The remedy seems to be using the package org-bookmark-Heading&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-bookmark-heading
  :ensure t
  :config
  (require &#39;org-bookmark-heading)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;crux-basic-movement&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Crux  - basic movement&lt;/h3&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://jamiecollinson.com/blog/my-emacs-config/&#34; target=&#34;_blank&#34;&gt;https://jamiecollinson.com/blog/my-emacs-config/&lt;/a&gt;
Contains functions from  Prelude. I should check this out in more detail.&lt;/p&gt;

&lt;p&gt;Set C-a to move to the first non-whitespace character on a line, and then to toggle between that and the beginning of the line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package crux
  :ensure t
  :bind ((&amp;quot;C-a&amp;quot; . crux-move-beginning-of-line)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;crypto-setup&#34;&gt;Crypto setup&lt;/h3&gt;

&lt;h4 id=&#34;basic-crypto&#34;&gt;Basic crypto&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq epa-file-encrypt-to &amp;quot;shreyas@fastmail.com&amp;quot;)
(require &#39;org-crypt)
(add-to-list &#39;org-modules &#39;org-crypt)
                                        ; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
;;(setq org-tags-exclude-from-inheritance (quote (&amp;quot;crypt&amp;quot;)))
                                        ; GPG key to use for encryption. nil for symmetric encryption
;;(setq org-crypt-key nil)
(setq org-crypt-disable-auto-save t)
;;(setq org-crypt-tag-matcher &amp;quot;locked&amp;quot;)

(message &amp;quot;Loaded crypto setup&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setting-auth-sources&#34;&gt;Setting auth sources&lt;/h4&gt;

&lt;p&gt;This was prompted by this discussion &lt;a href=&#34;https://emacs.stackexchange.com/questions/10207/how-to-get-org2blog-to-use-authinfo-gpg&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/10207/how-to-get-org2blog-to-use-authinfo-gpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have modified it to my own file names.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;auth-source)

(setq
 auth-sources &#39;(default
                 &amp;quot;secrets:session&amp;quot;
                 &amp;quot;secrets:Login&amp;quot;
                 &amp;quot;~/.gh.authinfo.gpg&amp;quot;
                 &amp;quot;~/.netrc.gpg&amp;quot;
                 &amp;quot;~/.bitly-access.token.gpg&amp;quot;
                 )
 epa-file-cache-passphrase-for-symmetric-encryption t)

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;github-token-access&#34;&gt;github token access&lt;/h4&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://emacs.stackexchange.com/questions/40994/using-auth-source-with-magit-and-bitbucket&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/40994/using-auth-source-with-magit-and-bitbucket&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fill the out the following details before executing the script. Machine can be found be executing &amp;lsquo;hostname&amp;rsquo; in shell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat &amp;gt; ~/.gh.authinfo &amp;lt;&amp;lt; EOF
machine shrysr@github.com password ABCD
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;M-x epa-encrypt-file&lt;/code&gt; and point towards the above file and choose your key for encryptions. This will generate the .gpg file.&lt;/p&gt;

&lt;p&gt;Remove the original file when done.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rm -f ~/.gh.authinfo
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq magit-process-find-password-functions &#39;(magit-process-password-auth-source))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;persp-projectile&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Persp-projectile&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/howardabrams/dot-files/blob/master/emacs.org#perspective&#34; target=&#34;_blank&#34;&gt;Refer Howard&amp;rsquo;s config snippet&lt;/a&gt; to setup a test.&lt;/p&gt;

&lt;h3 id=&#34;lob&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; LOB&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-04-25 Thu 07:39] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Since shifting to using org-brain for permanent notes and snippets, I need to review this ingest.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a bunch of scripts that I would like ingested into the Library of Babel to be available for ready use. In some cases, with specific and relatively simple actions these are useful, and generally easier to define that Emacs Functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(org-babel-lob-ingest &amp;quot;~/my_projects/sr-snip-lob/README.org&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hydras-and-some-custom-functions&#34;&gt;Hydras and some custom functions&lt;/h3&gt;

&lt;h4 id=&#34;refiling&#34;&gt;Refiling&lt;/h4&gt;

&lt;p&gt;Adapted from &lt;a href=&#34;https://emacs.stackexchange.com/questions/8045/org-refile-to-a-known-fixed-location&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/8045/org-refile-to-a-known-fixed-location&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;source: &lt;a href=&#34;https://gist.github.com/mm--/60e0790bcbf8447160cc87a66dc949ab&#34; target=&#34;_blank&#34;&gt;https://gist.github.com/mm--/60e0790bcbf8447160cc87a66dc949ab&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also see&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;
(defun my/refile (file headline &amp;amp;optional arg)
  &amp;quot;Refile to a specific location.

With a &#39;C-u&#39; ARG argument, we jump to that location (see
`org-refile&#39;).

Use `org-agenda-refile&#39; in `org-agenda&#39; mode.&amp;quot;
  (let* ((pos (with-current-buffer (or (get-buffer file) ;Is the file open in a buffer already?
				       (find-file-noselect file)) ;Otherwise, try to find the file by name (Note, default-directory matters here if it isn&#39;t absolute)
		(or (org-find-exact-headline-in-buffer headline)
		    (error &amp;quot;Can&#39;t find headline `%s&#39;&amp;quot; headline))))
	 (filepath (buffer-file-name (marker-buffer pos))) ;If we&#39;re given a relative name, find absolute path
	 (rfloc (list headline filepath nil pos)))
    (if (and (eq major-mode &#39;org-agenda-mode) (not (and arg (listp arg)))) ;Don&#39;t use org-agenda-refile if we&#39;re just jumping
	(org-agenda-refile nil rfloc)
      (org-refile arg nil rfloc))))

(defun josh/refile (file headline &amp;amp;optional arg)
  &amp;quot;Refile to HEADLINE in FILE. Clean up org-capture if it&#39;s activated.

With a `C-u` ARG, just jump to the headline.&amp;quot;
  (interactive &amp;quot;P&amp;quot;)
  (let ((is-capturing (and (boundp &#39;org-capture-mode) org-capture-mode)))
    (cond
     ((and arg (listp arg))	    ;Are we jumping?
      (my/refile file headline arg))
     ;; Are we in org-capture-mode?
     (is-capturing      	;Minor mode variable that&#39;s defined when capturing
      (josh/org-capture-refile-but-with-args file headline arg))
     (t
      (my/refile file headline arg)))
    (when (or arg is-capturing)
      (setq hydra-deactivate t))))

(defun josh/org-capture-refile-but-with-args (file headline &amp;amp;optional arg)
  &amp;quot;Copied from `org-capture-refile&#39; since it doesn&#39;t allow passing arguments. This does.&amp;quot;
  (unless (eq (org-capture-get :type &#39;local) &#39;entry)
    (error
     &amp;quot;Refiling from a capture buffer makes only sense for `entry&#39;-type templates&amp;quot;))
  (let ((pos (point))
	(base (buffer-base-buffer (current-buffer)))
	(org-capture-is-refiling t)
	(kill-buffer (org-capture-get :kill-buffer &#39;local)))
    (org-capture-put :kill-buffer nil)
    (org-capture-finalize)
    (save-window-excursion
      (with-current-buffer (or base (current-buffer))
	(org-with-wide-buffer
	 (goto-char pos)
	 (my/refile file headline arg))))
    (when kill-buffer (kill-buffer base))))

(defmacro josh/make-org-refile-hydra (hydraname file keyandheadline)
  &amp;quot;Make a hydra named HYDRANAME with refile targets to FILE.
KEYANDHEADLINE should be a list of cons cells of the form (\&amp;quot;key\&amp;quot; . \&amp;quot;headline\&amp;quot;)&amp;quot;
  `(defhydra ,hydraname (:color blue :after-exit (unless (or hydra-deactivate
							     current-prefix-arg) ;If we&#39;re just jumping to a location, quit the hydra
						   (josh/org-refile-hydra/body)))
     ,file
     ,@(cl-loop for kv in keyandheadline
		collect (list (car kv) (list &#39;josh/refile file (cdr kv) &#39;current-prefix-arg) (cdr kv)))
     (&amp;quot;q&amp;quot; nil &amp;quot;cancel&amp;quot;)))

;;;;;;;;;;
;; Here we&#39;ll define our refile headlines
;;;;;;;;;;

(josh/make-org-refile-hydra josh/org-refile-hydra-file-ds
			    &amp;quot;~/my_org/datascience.org&amp;quot;
			    ((&amp;quot;1&amp;quot; . &amp;quot;@Datascience @Inbox&amp;quot;)
			     (&amp;quot;2&amp;quot; . &amp;quot;@Datascience @Notes&amp;quot;)))

(josh/make-org-refile-hydra josh/org-refile-hydra-file-bgr
			    &amp;quot;~/my_org/bgr.org&amp;quot;
			    ((&amp;quot;1&amp;quot; . &amp;quot;#BGR #Inbox&amp;quot;)
			     (&amp;quot;2&amp;quot; . &amp;quot;#questions @ BGR&amp;quot;)
                             (&amp;quot;3&amp;quot; . &amp;quot;Inventory management Project&amp;quot;)))

(josh/make-org-refile-hydra josh/org-refile-hydra-file-todoglobal
			    &amp;quot;todo-global.org&amp;quot;
			    ((&amp;quot;1&amp;quot; . &amp;quot;;Emacs Stuff&amp;quot;)
			     (&amp;quot;2&amp;quot; . &amp;quot;;someday&amp;quot;)))

(defhydra josh/org-refile-hydra (:foreign-keys run)
  &amp;quot;Refile&amp;quot;
  (&amp;quot;a&amp;quot; josh/org-refile-hydra-file-ds/body &amp;quot;File A&amp;quot; :exit t)
  (&amp;quot;b&amp;quot; josh/org-refile-hydra-file-bgr/body &amp;quot;File B&amp;quot; :exit t)
  (&amp;quot;c&amp;quot; josh/org-refile-hydra-file-todoglobal/body &amp;quot;File C&amp;quot; :exit t)
  (&amp;quot;j&amp;quot; org-refile-goto-last-stored &amp;quot;Jump to last refile&amp;quot; :exit t)
  (&amp;quot;q&amp;quot; nil &amp;quot;cancel&amp;quot;))

(global-set-key (kbd &amp;quot;&amp;lt;f8&amp;gt; r&amp;quot;) &#39;josh/org-refile-hydra/body)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;window-manipulation&#34;&gt;Window manipulation&lt;/h4&gt;

&lt;p&gt;Source : Hydra documentation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;
;;  Hydras for window configuration. Using the deluxe
(defhydra hydra-window ()
  &amp;quot;
Movement^^        ^Split^         ^Switch^		^Resize^
----------------------------------------------------------------
_h_ ←       	_v_ertical    	_b_uffer		_q_ X←
_j_ ↓        	_x_ horizontal	_f_ind files	_w_ X↓
_k_ ↑        	_z_ undo      	_a_ce 1		_e_ X↑
_l_ →        	_Z_ reset      	_s_wap		_r_ X→
_F_ollow		_D_lt Other   	_S_ave		max_i_mize
_SPC_ cancel	_o_nly this   	_d_elete
&amp;quot;
  (&amp;quot;h&amp;quot; windmove-left )
  (&amp;quot;j&amp;quot; windmove-down )
  (&amp;quot;k&amp;quot; windmove-up )
  (&amp;quot;l&amp;quot; windmove-right )
  (&amp;quot;q&amp;quot; hydra-move-splitter-left)
  (&amp;quot;w&amp;quot; hydra-move-splitter-down)
  (&amp;quot;e&amp;quot; hydra-move-splitter-up)
  (&amp;quot;r&amp;quot; hydra-move-splitter-right)
  (&amp;quot;b&amp;quot; helm-mini)
  (&amp;quot;f&amp;quot; helm-find-files)
  (&amp;quot;F&amp;quot; follow-mode)
  (&amp;quot;a&amp;quot; (lambda ()
         (interactive)
         (ace-window 1)
         (add-hook &#39;ace-window-end-once-hook
                   &#39;hydra-window/body))
   )
  (&amp;quot;v&amp;quot; (lambda ()
         (interactive)
         (split-window-right)
         (windmove-right))
   )
  (&amp;quot;x&amp;quot; (lambda ()
         (interactive)
         (split-window-below)
         (windmove-down))
   )
  (&amp;quot;s&amp;quot; (lambda ()
         (interactive)
         (ace-window 4)
         (add-hook &#39;ace-window-end-once-hook
                   &#39;hydra-window/body)))
  (&amp;quot;S&amp;quot; save-buffer)
  (&amp;quot;d&amp;quot; delete-window)
  (&amp;quot;D&amp;quot; (lambda ()
         (interactive)
         (ace-window 16)
         (add-hook &#39;ace-window-end-once-hook
                   &#39;hydra-window/body))
   )
  (&amp;quot;o&amp;quot; delete-other-windows)
  (&amp;quot;i&amp;quot; ace-maximize-window)
  (&amp;quot;z&amp;quot; (progn
         (winner-undo)
         (setq this-command &#39;winner-undo))
   )
  (&amp;quot;Z&amp;quot; winner-redo)
  (&amp;quot;SPC&amp;quot; nil)
  )

(global-set-key (kbd &amp;quot;&amp;lt;f8&amp;gt; w&amp;quot;) &#39;hydra-window/body)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;helm-do-ag-in-specific-locations&#34;&gt;helm-do-ag in specific locations&lt;/h4&gt;

&lt;p&gt;Reference: &lt;a href=&#34;https://emacs.stackexchange.com/questions/44128/function-to-do-helm-do-ag-for-a-specific-project&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/44128/function-to-do-helm-do-ag-for-a-specific-project&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In project directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun helm-do-ag-projects ()
  &amp;quot;Grep string in Project directory&amp;quot; (interactive)
  (let ((rootdir (concat &amp;quot;~/my_projects/&amp;quot;)))
    (let ((helm-ag-command-option (concat helm-ag-command-option &amp;quot;&amp;quot;)))
      (helm-do-ag rootdir))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scimax config directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun helm-do-ag-emacs-config ()
  &amp;quot;Grep string in Emacs custom code&amp;quot;
  (interactive)
  (let ((rootdir (concat &amp;quot;~/scimax/user/sr-cust/&amp;quot;)))
    (let ((helm-ag-command-option (concat helm-ag-command-option &amp;quot;&amp;quot;)))
      (helm-do-ag rootdir))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Journal directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun helm-do-ag-journal ()
  &amp;quot;Grep string in journal directory&amp;quot;
  (interactive)
  (let ((specfile (concat &amp;quot;~/my_org/journal/&amp;quot;)))
    (let ((helm-ag-command-option (concat helm-ag-command-option &amp;quot;&amp;quot;)))
      (helm-ag-this-file specfile))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;BGR file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun helm-do-ag-bgr ()
  &amp;quot;Grep string in BGR file&amp;quot;
  (interactive)
  (let ((specfile (concat &amp;quot;~/my_org/bgr.org&amp;quot;)))
    (let ((helm-ag-command-option (concat helm-ag-command-option &amp;quot;&amp;quot;)))
      (helm-do-ag-this-file specfile))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Defining hydra&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defhydra shrysr/hydra-helm-ag-do-menu ()
  &amp;quot;
Helm-do-ag in specified locations
^location^  ^command^
----------------------------------------------------------
e:        emacs custom config
b:        bgr file
o:        org files
j:        journal search
&amp;quot;
  (&amp;quot;e&amp;quot; helm-do-ag-emacs-config)
  (&amp;quot;j&amp;quot; helm-do-ag-journal :color blue)
  (&amp;quot;p&amp;quot; helm-do-ag-projects)
  (&amp;quot;o&amp;quot; helm-do-ag-org)
  (&amp;quot;q&amp;quot; quit-window &amp;quot;quit&amp;quot; :color red))

(global-set-key (kbd &amp;quot;&amp;lt;f8&amp;gt; h&amp;quot;) &#39;shrysr/hydra-helm-ag-do-menu/body)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;frame-configurations-fo-magit-and-project-launch&#34;&gt;Frame configurations fo magit and project launch&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Scimax - magit and windows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; scimax directory magit status
(defun sr/windows-magit-scimax ()
  (interactive)
  (ace-delete-other-windows)
  (dired &amp;quot;~/scimax/user/&amp;quot;)
  (switch-window-then-split-right nil)
  (magit-status &amp;quot;~/scimax/&amp;quot;)
  (switch-window)
  (split-window-vertically)
  (dired-up-directory)
  (windmove-right)
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Org files - magit and windows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; my_org magit status
(defun sr/windows-magit-org ()
  (interactive)
  (ace-delete-other-windows)
  (magit-status &amp;quot;~/my_org/&amp;quot;)
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Project directory - magit and windows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; magit status
(defun sr/windows-magit-projects ()
  (interactive)
  (ace-delete-other-windows)
  (switch-window-then-split-right nil)
  (magit-status &amp;quot;~/my_projects/&amp;quot;)
  (switch-window)
  (dired &amp;quot;~/my_projects/&amp;quot;)
  (switch-window)
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Project: Switch and windows&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-10 Sun 07:09] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Experiment with helm-swoop functions to target only top level headings&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun sr/windows-projects ()
  (interactive)
  (ace-delete-other-windows)
  (switch-window-then-split-right nil)
  (projectile-switch-project)
  (switch-window)
  (find-file &amp;quot;~/my_org/project-tasks.org&amp;quot;)
  (widen)
  (helm-org-rifle-current-buffer)
  (org-narrow-to-subtree)
  (outline-show-children)
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Defining Hydra&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defhydra sr/process-window-keys ()
  &amp;quot;
Key^^   ^Workflow^
--------------------
o       org magit
s       scimax magit
p       projects magit
w       select project and set window config
SPC     exit
&amp;quot;
  (&amp;quot;o&amp;quot; sr/windows-magit-org )
  (&amp;quot;p&amp;quot; sr/windows-magit-projects )
  (&amp;quot;s&amp;quot; sr/windows-magit-scimax )
  (&amp;quot;w&amp;quot; sr/windows-projects)
  (&amp;quot;SPC&amp;quot; nil)
  )

(global-set-key (kbd &amp;quot;&amp;lt;f8&amp;gt; m&amp;quot;) &#39;sr/process-window-keys/body)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;loading-completed&#34;&gt;Loading completed&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(message &amp;quot;Loaded Hydras&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;python&#34;&gt;Python &lt;code&gt;[0/4]&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&#34;setup-virtual-environment-approach&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; setup virtual environment approach&lt;/h4&gt;

&lt;p&gt;I have tried using the conda.el package, but for some reason, it will not recognise the virtual environments in the paths specified. An excellent guide to using virtual environments with python is available on &lt;a href=&#34;http://rakan.me/emacs/python-dev-with-emacs-and-pyenv/&#34; target=&#34;_blank&#34;&gt;Rakan&amp;rsquo;s blog&lt;/a&gt;, and I&amp;rsquo;ve borrowed some bits of it.&lt;/p&gt;

&lt;p&gt;I prefer to use miniconda for my python programming, and therefore the environment path is set appropriately below.&lt;/p&gt;

&lt;p&gt;Switching an environment is as simple as &lt;code&gt;M-x pyenv-workon&lt;/code&gt;. This is quite excellent.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package pyenv-mode
  :init
  ;;(add-to-list &#39;exec-path &amp;quot;~/.pyenv/shims&amp;quot;)
  (setenv &amp;quot;WORKON_HOME&amp;quot; &amp;quot;~/miniconda3/envs/&amp;quot;)
  :config
  (pyenv-mode)
;; :bind
;; (&amp;quot;C-x p e&amp;quot; . pyenv-activate-current-project)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setup-conda-for-virtual-environment-management&#34;&gt;&lt;span class=&#34;org-todo todo POSTPONED&#34;&gt;POSTPONED&lt;/span&gt; setup conda for virtual environment management&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;
(use-package conda
  :ensure t
  :config
  (require &#39;conda)
  ;;(conda-env-initialize-interactive-shells)

  ;;  Yes I want conda active for eshell as well
  ;;(conda-env-initialize-eshell)

  ;; Setting home path for  miniconda. I use the same path everywhee.
  (custom-set-variables
   &#39;(conda-anaconda-home &amp;quot;~/miniconda3/&amp;quot;))
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;general-config&#34;&gt;General config&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 14:52] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This is to take care of the annoying indentation message that always pops up.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq python-indent-guess-indent-offset nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;autocomplete-for-python-blocks&#34;&gt;&lt;span class=&#34;org-todo todo NEXT&#34;&gt;NEXT&lt;/span&gt; Autocomplete for python blocks&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-to-list &#39;company-backends &#39;company-ob-ipython)
(company-mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;emacs-jupyter&#34;&gt;&lt;span class=&#34;org-todo todo NEXT&#34;&gt;NEXT&lt;/span&gt; Emacs-jupyter&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 14:48] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Since I am more familiar with ob-ipython and there are a bunch of interesting features already implemented in it like the automatic setting of a kernel and file names for graphic outputs and so on - I will explore jupyter-emacs at a later date.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package jupyter
  :ensure t
  :defer t
  :config
  ;(org-babel-load-languages &#39;(jupyter .t))
  (setq org-babel-default-header-args:jupyter-python &#39;((:async . &amp;quot;yes&amp;quot;)
                                                       (:session . &amp;quot;jipython&amp;quot;)
                                                       (:kernel . &amp;quot;python3&amp;quot;)))
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;disabled&#34;&gt;Disabled&lt;/h2&gt;

&lt;p&gt;These are packages and snippets that disabled from tangling and execution. Some of them have been explored and discarded for various reasons. The rest are packages / features I could not get working satisfactorily.&lt;/p&gt;

&lt;h3 id=&#34;org2blog-publishing-to-wordpress&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; org2blog : publishing to wordpress &lt;code&gt;[0/1]&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-21 Sun 16:17] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
I have a suspicion that the mp-wp implementation is different from the usual wordpress installation and therefore, the org2blog function may not work with it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fueled by discussions in #ossasepia, I have decided to shift direction towards Wordpress and a custom VPS server to host and secure my own data.&lt;/p&gt;

&lt;p&gt;While there are disadvantages in using a behemoth like wordpress over a simple static hugo site - one key driver is the ability to create comment systems with pingbacks, and control the data. Well to the extent possible on a rented VPS server, which is still more control than using services like Bitbucket / Github.&lt;/p&gt;

&lt;p&gt;Why bother with comment systems?
I&amp;rsquo;ve realised from my discussions with diana_coman  that despite the inconvenience, the whole point of the web is sharing and hopefully creating a seed for intellectual discussions that could lead somewhere meaningful. A good commenting system is obviously needed, for the little that takes place.&lt;/p&gt;

&lt;p&gt;Eventually, it would be interesting to run V to host my own repository and files, and perhaps employing git annex, for managing an index of other files in different locations.&lt;/p&gt;

&lt;p&gt;The good thing that I&amp;rsquo;ve become more comfortable with Emacs and getting packages to work, and even exploring the source code to understand the arguments better.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This was intimidating in the past, but reading the source code may be the best way to understand a language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://vinhtrieublog.wordpress.com/2016/02/03/publishing-to-wordpress-with-org2blog/&#34; target=&#34;_blank&#34;&gt;Samuel Zhao&amp;rsquo;s post&lt;/a&gt; is a good introduction to setting up org2blog, and I have replicated the steps with some additional twists:&lt;/p&gt;

&lt;ol class=&#34;task-list&#34;&gt;
&lt;li&gt;Encryption of the login details with my personal key, and setup to ingest a list of authsources.&lt;/li&gt;
&lt;li&gt;Setting up the org2blog package to enable publishing and control of blog posts right within Emacs.&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; It would be nice to have a link to the source file in each wordpress post. Perhaps the file could be signed with gpg as well?&lt;/label&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org2blog
  :ensure t
  :defer nil
  :config
  (require &#39;xml-rpc)
  (require &#39;org2blog-autoloads)
  ;; (require &#39;netrc)
  (setq org2blog/wp-blog-alist
        `((&amp;quot;young-hands-club&amp;quot;
           :url &amp;quot;http://younghands.club/xmlrc.php&amp;quot;
           :default-title &amp;quot;&amp;quot;
           :default-categories (&amp;quot;daily-log&amp;quot;)
           :username ,(auth-source-user-or-password &#39;young-hands-club &amp;quot;login&amp;quot;)
           :password ,(auth-source-user-or-password young-hands-club &amp;quot;password&amp;quot;)
           :tags-as-categories true)))
  (setq wpcredentials (auth-source-user-and-password &amp;quot;young-hands-club&amp;quot;))
  (setq org2blog/wp-blog-alist
        `((&amp;quot;young-hands-club&amp;quot;
           :url &amp;quot;http://younghands.club/xmlrc.php&amp;quot;
           :username ,(car wpcredentials)
           :password ,(cadr wpcredentials))))

  ;; implemented as HTML styling. Your pick!
  (setq org2blog/wp-use-sourcecode-shortcode &#39;t)

  ;; removed light=&amp;quot;true&amp;quot;
  (setq org2blog/wp-sourcecode-default-params nil)

  ;; target language needs to be in here
  (setq org2blog/wp-sourcecode-langs
        &#39;(&amp;quot;actionscript3&amp;quot; &amp;quot;bash&amp;quot; &amp;quot;coldfusion&amp;quot; &amp;quot;cpp&amp;quot; &amp;quot;csharp&amp;quot; &amp;quot;css&amp;quot; &amp;quot;delphi&amp;quot;
          &amp;quot;erlang&amp;quot; &amp;quot;fsharp&amp;quot; &amp;quot;diff&amp;quot; &amp;quot;groovy&amp;quot; &amp;quot;html&amp;quot; &amp;quot;javascript&amp;quot; &amp;quot;java&amp;quot; &amp;quot;javafx&amp;quot; &amp;quot;matlab&amp;quot;
          &amp;quot;objc&amp;quot; &amp;quot;perl&amp;quot; &amp;quot;php&amp;quot; &amp;quot;text&amp;quot; &amp;quot;powershell&amp;quot; &amp;quot;python&amp;quot; &amp;quot;ruby&amp;quot; &amp;quot;scala&amp;quot; &amp;quot;sql&amp;quot;
          &amp;quot;vb&amp;quot; &amp;quot;xml&amp;quot;
          &amp;quot;sh&amp;quot; &amp;quot;emacs-lisp&amp;quot; &amp;quot;lisp&amp;quot; &amp;quot;lua&amp;quot; &amp;quot;R&amp;quot;))

  (setq org-src-fontify-natively t)

  ;; ;; You want set the keymode map you can use these.
  ;; (global-set-key (kbd &amp;quot; l&amp;quot;) &#39;org2blog/wp-login)
  ;; (global-set-key (kbd &amp;quot; p&amp;quot;) &#39;org2blog/wp-post-buffer-and-publish)
  ;; )))
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;helm-ext&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; helm-ext&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-04-29 Mon 08:01] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Disabling excecution for the time being.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Extensions to helm, which I find useful but are unlikely to be accepted in the upstream. A collection of dirty hacks for helm!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cute-jumper/helm-ext&#34; target=&#34;_blank&#34;&gt;https://github.com/cute-jumper/helm-ext&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package helm-ext
  :ensure t
  :config
  (helm-ext-ff-enable-skipping-dots t)
  ;; Testing the auto path expansion
  ;;(helm-ff-ext-enable-auto-path-expansion t)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scimax-customisations-1&#34;&gt;Scimax customisations&lt;/h3&gt;

&lt;h4 id=&#34;enabling-scimax-statistics&#34;&gt;Enabling Scimax Statistics&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-10-07 Mon 13:17] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The default config is insufficient and in particular, uses the ess-smart-underscore package which is not useful to my general workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;scimax-statistics)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dired&#34;&gt;Dired&lt;/h3&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org&#34; target=&#34;_blank&#34;&gt;https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package dired
  :ensure nil
  :delight dired-mode &amp;quot;Dired&amp;quot;
  :preface
  (defun me/dired-directories-first ()
    &amp;quot;Sort dired listings with directories first before adding marks.&amp;quot;
    (save-excursion
      (let (buffer-read-only)
        (forward-line 2)
        (sort-regexp-fields t &amp;quot;^.*$&amp;quot; &amp;quot;[ ]*.&amp;quot; (point) (point-max)))
      (set-buffer-modified-p nil)))
  ;:hook ;(dired-mode . dired-hide-details-mode)
  :config
  (advice-add &#39;dired-readin :after #&#39;me/dired-directories-first)
  (setq-default
   dired-auto-revert-buffer t
   dired-dwim-target t
   dired-hide-details-hide-symlink-targets nil
   dired-listing-switches &amp;quot;-alh&amp;quot;
   dired-ls-F-marks-symlinks nil
   dired-recursive-copies &#39;always))

(use-package dired-x
  :ensure nil
  :preface
  (defun me/dired-revert-after-command (command &amp;amp;optional output error)
    (revert-buffer))
  :config
  (advice-add &#39;dired-smart-shell-command :after #&#39;me/dired-revert-after-command))

(message &amp;quot;Loaded Dired customisation&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;activating-windmove-to-facilitate-hydras&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Activating windmove to facilitate Hydras&lt;/h3&gt;

&lt;p&gt;Super would actually be a good option. However, this interferes with default configurations in MS Windows, especially while using virtualbox. Using Meta for now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(windmove-default-keybindings &#39;meta)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;export-async&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Export async&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-14 Thu 16:03] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This requires a separate init file to be setup that enables Emacs to launch a separate process to export large files. It would be better as a vanilla emacs file.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-export-async-init-file
      (expand-file-name &amp;quot;async-export.el&amp;quot; user-emacs-directory)
      )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ob-async&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Ob-async&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-14 Thu 16:02] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This should enable evaluating code in org babel source blocks asynchronously. The header in the source block should have the async enabled.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ob-async
  :ensure t
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;auto-saving-all-org-files-by-the-hour&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Auto saving all org files by the hour&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-05 Fri 11:49] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
On the mac, this seems to be saving for each house since the time specified ? This behavior needs to be checked out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is adopted from &lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Bernt Hansen&amp;rsquo;s&lt;/a&gt; configuration. Essentially, all the org buffers are saved 1 minute before the hour, every hour.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(run-at-time &amp;quot;00:59&amp;quot; 3600 &#39;org-save-all-org-buffers)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;tags-setup&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Tags setup&lt;/h3&gt;

&lt;p&gt;Borrowing &lt;a href=&#34;https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-tags.el&#34; target=&#34;_blank&#34;&gt;Kaushal modi&amp;rsquo;s setup&lt;/a&gt; for tags. I will start with using gtags and expand later to ctags.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;;; gtags, GNU global

(when (executable-find &amp;quot;global&amp;quot;)
;;;; ggtags
  ;; https://github.com/leoliu/ggtags
  (use-package ggtags
    :config
    (progn
      (setq ggtags-update-on-save nil) ;Don&#39;t try to update GTAGS on each save; makes the system sluggish for huge projects.
      (setq ggtags-highlight-tag nil)  ;Don&#39;t auto-highlight tag at point.. makes the system really sluggish!
      (setq ggtags-sort-by-nearness nil) ; Enabling nearness requires global 6.5+
      (setq ggtags-navigation-mode-lighter nil)
      (setq ggtags-mode-line-project-name nil)
      (setq ggtags-oversize-limit (* 30 1024 1024)) ; 30 MB

      (dolist (hook &#39;(verilog-mode-hook
                      c-mode-hook))
        (add-hook hook #&#39;ggtags-mode))

      ;; Don&#39;t consider ` (back quote) as part of `tag&#39; when looking for a
      ;; Verilog macro definition
      (defun ggtags-tag-at-point ()
        (pcase (funcall ggtags-bounds-of-tag-function)
          (`(,beg . ,end)
           (if (eq ?` (string-to-char (buffer-substring beg end)))
               ;; If `(buffer-substring beg end)&#39; returns &amp;quot;`uvm_info&amp;quot; (for example),
               ;; discard the ` and return just &amp;quot;uvm_info&amp;quot;
               (buffer-substring (1+ beg) end)
             ;; else return the whole `(buffer-substring beg end)&#39;
             (buffer-substring beg end)))))

      ;; Remove the default binding for `M-.&#39; in `ggtags-mode-map&#39;
      (bind-key &amp;quot;M-.&amp;quot; nil ggtags-mode-map)
      ;; Remove the default binding for `M-o&#39; in `ggtags-navigation-map&#39;
      (bind-key &amp;quot;M-o&amp;quot; nil ggtags-navigation-map)

      (key-chord-define-global &amp;quot;??&amp;quot; #&#39;ggtags-show-definition))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;icicles&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Icicles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-28 Thu 16:01] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The default key bindings of icicles changes the org source block edit shortcut. However, the package appears very interesting so far, if not a bit slow to respond. Switching over to icicles will need some research for making sure none of the existing keybindings and workflows are crippled. This package cannot be installed via Melpa. The easiest method appears to be to download the files as a zip folder from the &lt;a href=&#34;https://github.com/emacsmirror/icicles&#34; target=&#34;_blank&#34;&gt;icicle git repository&lt;/a&gt;. The automatic install script draws files from the Emacs wiki, which at times may be down. As such icicles can be switched off by using &lt;code&gt;M-x icy-mode&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(load &amp;quot;~/scimax/user/external_packages/icicles-install.el&amp;quot;)
(setq icicle-download-dir &amp;quot;~/scimax/user/external_packages/icicle_packages/&amp;quot;)
(add-to-list &#39;load-path &amp;quot;~/scimax/user/external_packages/icicle_packages/&amp;quot;)
(require &#39;icicles)
(icy-mode 1)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;erc&#34;&gt;erc&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-10-23 Wed 09:15] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
I&amp;rsquo;m currently using weechat over tmux, but there are great conveniences in using erc. It is possible then to capture conversation and make notes more easily.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Base config setting the channels that I would like frequent. I have actually had enjoyable experiences chatting with the Emacs and coding whizzes in the Emacs channel.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package erc
  :config
  (setq erc-hide-list &#39;(&amp;quot;PART&amp;quot; &amp;quot;QUIT&amp;quot; &amp;quot;JOIN&amp;quot;))
  (setq erc-autojoin-channels-alist &#39;((&amp;quot;freenode.net&amp;quot;
                                       &amp;quot;#org-mode&amp;quot;
                                       &amp;quot;#emacs&amp;quot;
                                       &amp;quot;#emacs-beginners&amp;quot;
                                       &amp;quot;#docker&amp;quot;))
        erc-server &amp;quot;irc.freenode.net&amp;quot;
        erc-nick &amp;quot;shrysr&amp;quot;)
  (setq erc-fill-static-center t)

  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Loading ERC without password (temporarily). The password has to be set in the .authconfig file and encrypted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt; (erc
   :server &amp;quot;irc.freenode.net&amp;quot;
   :port 6667
   :nick &amp;quot;shrysr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scheme-setup&#34;&gt;Scheme setup&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-10-23 Wed 09:21] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
I used this briefly during a foray into the SICP course.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;ul&gt;
&lt;li&gt;References

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://praveen.kumar.in/2011/03/06/gnu-emacs-and-mit-scheme-on-mac-os-x/&#34; target=&#34;_blank&#34;&gt;http://praveen.kumar.in/2011/03/06/gnu-emacs-and-mit-scheme-on-mac-os-x/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq scheme-program-name &amp;quot;/Applications/MIT-GNU-Scheme.app/Contents/Resources/mit-scheme&amp;quot;)
(require &#39;xscheme)

(message &amp;quot;Loaded scheme setup&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lintr&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; lintr&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-11 Mon 07:21] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
It appears there is no package called lintr. This needs further investigation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This package is deemed necessary to enable flymake in ESS. Without it, there is significantly more lag while the suggestions / corrections are generated in ESS modes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package lintr
  :ensure nil
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;better-defaults&#34;&gt;Better defaults&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-08-28 Wed 13:45] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Disabling this package until it is explored better.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I need to explore the changed made by this package. For now, it is loaded right in the beginning so that it does not overwrite other customisations down the line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package better-defaults
  :ensure t
)

(message &amp;quot;Loaded better-defaults package&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pdf-tools&#34;&gt;&lt;span class=&#34;org-todo done STABLE&#34;&gt;STABLE&lt;/span&gt; PDF Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-10-23 Wed 09:26] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This appears to be setup via scimax already. Disabling for now.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-18 Mon 14:30] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Install epdfinfo via &amp;lsquo;brew install pdf-tools&amp;rsquo; and then install the
pdf-tools elisp via the use-package below. To upgrade the epdfinfo
server, use &amp;lsquo;brew upgrade pdf-tools&amp;rsquo; prior to upgrading to newest
pdf-tools package using Emacs package system. If things get messed up,
just do &amp;lsquo;brew uninstall pdf-tools&amp;rsquo;, wipe out the elpa pdf-tools
package and reinstall both as at the start.  source:
&lt;a href=&#34;https://emacs.stackexchange.com/questions/13314/install-pdf-tools-on-emacs-macosx&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/13314/install-pdf-tools-on-emacs-macosx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package pdf-tools
  :ensure t
  :config
  (custom-set-variables
   &#39;(pdf-tools-handle-upgrades nil)) ; Use brew upgrade pdf-tools instead in the mac
  (setq pdf-info-epdfinfo-program &amp;quot;/usr/local/bin/epdfinfo&amp;quot;)
  (pdf-tools-install)
)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;elfeed-customisation&#34;&gt;Elfeed customisation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-09-25 Wed 14:09] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Scimax&amp;rsquo;s elfeed is enabled, along with elfeed-org and elfeeed-goodies&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-08 Mon 08:10] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Disabling elfeed for now.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;elfeed-basic-plus-customisations&#34;&gt;Elfeed Basic + Customisations&lt;/h4&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://heikkil.github.io/blog/2015/05/09/notes-from-elfeed-entries/&#34; target=&#34;_blank&#34;&gt;http://heikkil.github.io/blog/2015/05/09/notes-from-elfeed-entries/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Elfeed configuration source :
(use-package elfeed
  :bind (:map elfeed-search-mode-map
              (&amp;quot;A&amp;quot; . bjm/elfeed-show-all)
              (&amp;quot;E&amp;quot; . bjm/elfeed-show-emacs)
              (&amp;quot;D&amp;quot; . bjm/elfeed-show-daily)
              (&amp;quot;q&amp;quot; . bjm/elfeed-save-db-and-bury))
  :init
  (setq my/default-elfeed-search-filter &amp;quot;@1-month-ago +unread !sport &amp;quot;)
  (setq-default elfeed-search-filter my/default-elfeed-search-filter)
  (setq elfeed-db-direcory &amp;quot;~/scimax/user/elfeeddb&amp;quot;)
  :config
  (elfeed-org)
  (elfeed-goodies/setup)
  (setq elfeed-use-curl t)

  ;;
  ;; linking and capturing
  ;;

  (defun elfeed-link-title (entry)
    &amp;quot;Copy the entry title and URL as org link to the clipboard.&amp;quot;
    (interactive)
    (let* ((link (elfeed-entry-link entry))
           (title (elfeed-entry-title entry))
           (titlelink (concat &amp;quot;[[&amp;quot; link &amp;quot;][&amp;quot; title &amp;quot;]]&amp;quot;)))
      (when titlelink
        (kill-new titlelink)
        (x-set-selection &#39;PRIMARY titlelink)
        (message &amp;quot;Yanked: %s&amp;quot; titlelink))))

  ;; show mode

  (defun elfeed-show-link-title ()
    &amp;quot;Copy the current entry title and URL as org link to the clipboard.&amp;quot;
    (interactive)
    (elfeed-link-title elfeed-show-entry))

  (defun elfeed-show-quick-url-note ()
    &amp;quot;Fastest way to capture entry link to org agenda from elfeed show mode&amp;quot;
    (interactive)
    (elfeed-link-title elfeed-show-entry)
    (org-capture nil &amp;quot;n&amp;quot;)
    (yank)
    (org-capture-finalize))

  (bind-keys :map elfeed-show-mode-map
             (&amp;quot;l&amp;quot; . elfeed-show-link-title)
             (&amp;quot;v&amp;quot; . elfeed-show-quick-url-note))

  ;; search mode

  (defun elfeed-search-link-title ()
    &amp;quot;Copy the current entry title and URL as org link to the clipboard.&amp;quot;
    (interactive)
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
               when (elfeed-entry-link entry)
               do (elfeed-link-title entry))))

  (defun elfeed-search-quick-url-note ()
    &amp;quot;In search mode, capture the title and link for the selected
     entry or entries in org aganda.&amp;quot;
    (interactive)
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
               do (elfeed-untag entry &#39;unread)
               when (elfeed-entry-link entry)
               do (elfeed-link-title entry)
               do (org-capture nil &amp;quot;n&amp;quot;)
               do (yank)
               do (org-capture-finalize)
               (mapc #&#39;elfeed-search-update-entry entries))
      (unless (use-region-p) (forward-line))))

  (bind-keys :map elfeed-search-mode-map
             (&amp;quot;l&amp;quot; . elfeed-search-link-title)
             (&amp;quot;v&amp;quot; . elfeed-search-quick-url-note))

   ;;functions to support syncing .elfeed between machines
  ;;makes sure elfeed reads index from disk before launching
  (defun bjm/elfeed-load-db-and-open ()
    &amp;quot;Wrapper to load the elfeed db from disk before opening&amp;quot;
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun bjm/elfeed-save-db-and-bury ()
    &amp;quot;Wrapper to save the elfeed db to disk before burying buffer&amp;quot;
    (interactive)
    (elfeed-db-save)
    (quit-window))
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;scimax-plus-elfeed-org-and-elfeed-goodies-setup&#34;&gt;Scimax + Elfeed-org and elfeed-goodies setup &lt;code&gt;[/]&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Using an org source is the easiest way to organise my RSS feeds for reading with Elfeed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;scimax-elfeed)

;; use an org file to organise feeds
(use-package elfeed-org
  :ensure t
  :config
  (setq rmh-elfeed-org-files (list &amp;quot;~/my_org/elfeed.org&amp;quot;))
  )

(use-package elfeed-goodies
  :ensure t
  :init
  (elfeed-goodies/setup)
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;consider-storing-the-feed-sources-here-in-org-format&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Consider storing the Feed sources here in org format&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-17 Sun 18:11] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This will need an export to a source org file per the settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;loading-completed-1&#34;&gt;Loading completed&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(message &amp;quot;Loaded Elfeed customisations&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ediff&#34;&gt;ediff&lt;/h3&gt;

&lt;p&gt;I have to diff between org files pretty often, and need the headings to be unfolded.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://emacs.stackexchange.com/questions/21335/prevent-folding-org-files-opened-by-ediff&#34; target=&#34;_blank&#34;&gt;http://emacs.stackexchange.com/questions/21335/prevent-folding-org-files-opened-by-ediff&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Check for org mode and existence of buffer
(defun f-ediff-org-showhide (buf command &amp;amp;rest cmdargs)
  &amp;quot;If buffer exists and is orgmode then execute command&amp;quot;
  (when buf
    (when (eq (buffer-local-value &#39;major-mode (get-buffer buf)) &#39;org-mode)
      (save-excursion (set-buffer buf) (apply command cmdargs)))))

(defun f-ediff-org-unfold-tree-element ()
  &amp;quot;Unfold tree at diff location&amp;quot;
  (f-ediff-org-showhide ediff-buffer-A &#39;org-reveal)
  (f-ediff-org-showhide ediff-buffer-B &#39;org-reveal)
  (f-ediff-org-showhide ediff-buffer-C &#39;org-reveal))

(defun f-ediff-org-fold-tree ()
  &amp;quot;Fold tree back to top level&amp;quot;
  (f-ediff-org-showhide ediff-buffer-A &#39;hide-sublevels 1)
  (f-ediff-org-showhide ediff-buffer-B &#39;hide-sublevels 1)
  (f-ediff-org-showhide ediff-buffer-C &#39;hide-sublevels 1))

(add-hook &#39;ediff-select-hook &#39;f-ediff-org-unfold-tree-element)
(add-hook &#39;ediff-unselect-hook &#39;f-ediff-org-fold-tree)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;spell-checking&#34;&gt;Spell Checking&lt;/h3&gt;

&lt;h4 id=&#34;flycheck&#34;&gt;Flycheck&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-09 Sat 11:51] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
disabling flycheck for the moment and enabling flymake&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://writequit.org/org/&#34; target=&#34;_blank&#34;&gt;https://writequit.org/org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basic config&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package flycheck
  :defer 5
  :bind ((&amp;quot;M-g M-n&amp;quot; . flycheck-next-error)
         (&amp;quot;M-g M-p&amp;quot; . flycheck-previous-error)
         (&amp;quot;M-g M-=&amp;quot; . flycheck-list-errors))
  :init (global-flycheck-mode)
  :diminish flycheck-mode
  :config
  (progn
    (setq-default flycheck-disabled-checkers &#39;(emacs-lisp-checkdoc json-jsonlint json-python-json ess iess))
    (use-package flycheck-pos-tip
      :init (flycheck-pos-tip-mode))
    (use-package helm-flycheck
      :init (define-key flycheck-mode-map (kbd &amp;quot;C-c ! h&amp;quot;) &#39;helm-flycheck))
    (use-package flycheck-haskell
      :init (add-hook &#39;flycheck-mode-hook #&#39;flycheck-haskell-setup))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;enabling-flyspell&#34;&gt;Enabling Flyspell&lt;/h4&gt;

&lt;p&gt;Reference: &lt;a href=&#34;https://alhassy.github.io/init/&#34; target=&#34;_blank&#34;&gt;https://alhassy.github.io/init/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Org mode is derived from text mode, therefore it is sufficient to activate for text mode.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package flyspell
  :hook (
           (prog-mode . flyspell-prog-mode)
           (text-mode . flyspell-mode))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;replacing-flycheck-with-flymake&#34;&gt;Replacing flycheck with flymake&lt;/h4&gt;

&lt;p&gt;This is especially for python modules at the moment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(when (require &#39;flycheck nil t)
  (setq elpy-modules (delq &#39;elpy-module-flymake elpy-modules))
  (add-hook &#39;elpy-mode-hook &#39;flycheck-mode))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;switching-to-aspell-on-the-mac&#34;&gt;&lt;span class=&#34;org-todo done STABLE&#34;&gt;STABLE&lt;/span&gt; Switching to aspell on the mac&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-12 Fri 20:22] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
So far this is working out rather well, and as expected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Facing trouble enabling flyspell in the mac. This seems to be a solution, as outlined in &lt;a href=&#34;https://stackoverflow.com/questions/19022015/emacs-on-mac-os-x-how-to-get-spell-check-to-work&#34; target=&#34;_blank&#34;&gt;this SO discussion&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(if (system-type-is-darwin)
    (setq ispell-program-name &amp;quot;/usr/local/Cellar/aspell/0.60.6.1_1/bin/aspell&amp;quot;)
  )

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Docker</title>
      <link>https://shreyas.ragavan.co/docs/docker-notes/</link>
      <pubDate>Thu, 11 Jul 2019 14:33:26 -0600</pubDate>
      <guid>https://shreyas.ragavan.co/docs/docker-notes/</guid>
      <description>

&lt;p&gt;Docker is a fascinating concept that could be potentially useful in many ways, especially in Data science, and making reproducible workflows / environments. There are &lt;a href=&#34;https://towardsdatascience.com/learn-enough-docker-to-be-useful-b7ba70caeb4b&#34; target=&#34;_blank&#34;&gt;several&lt;/a&gt; &lt;a href=&#34;https://towardsdatascience.com/docker-for-data-scientists-5732501f0ba4&#34; target=&#34;_blank&#34;&gt;articles&lt;/a&gt; which have great introductions and examples of using docker in data science&lt;/p&gt;

&lt;p&gt;This is an evolving summary of my exploration with Docker. It should prove to be a handy refresher of commands and concepts.&lt;/p&gt;

&lt;h2 id=&#34;what-is-docker&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; What is Docker&lt;/h2&gt;

&lt;p&gt;A brief summary of what Docker is all about.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The main idea: disposable buckets of code that can do a specific task and either exit or run indefinitely.

&lt;ol&gt;
&lt;li&gt;The task / purpose of the container could even be a single command. Like &lt;code&gt;pwd&lt;/code&gt;, which is piped into another container.&lt;/li&gt;
&lt;li&gt;In a way this is an extension of the Unix philosophy of small tools that can do a single task well (i.e reliably).&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;These buckets of code can be connected with each other and also stacked on top of each other to form a pipeline.&lt;/li&gt;
&lt;li&gt;These buckets of code are complete libraries&lt;/li&gt;
&lt;li&gt;The buckets consist of images which can be launched as containers.&lt;/li&gt;
&lt;li&gt;Docker images are stored in a registry. There are a number of registries, of which dockerhub is popular.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These schematics provide a good refresher of the core concept of Docker:&lt;/p&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;ox-hugo/Container-vs-vm.png/&#34; data-caption=&#34;Containers versus VM&#34;&gt;
&lt;img src=&#34;ox-hugo/Container-vs-vm.png/&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Containers versus VM
  &lt;/figcaption&gt;


&lt;/figure&gt;















&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;ox-hugo/engine-components-flow.png/&#34; data-caption=&#34;Docker Engine components&#34;&gt;
&lt;img src=&#34;ox-hugo/engine-components-flow.png/&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Docker Engine components
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;p&gt;&lt;a href=&#34;https://shreyas.ragavan.co/ox-hugo/Container-vs-vm.png&#34;&gt;Containers versus VM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://shreyas.ragavan.co/ox-hugo/engine-components-flow.png&#34;&gt;Engine Components&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;dive-into-docker&#34;&gt;Dive into Docker&lt;/h3&gt;

&lt;p&gt;This is an excellent course run by Nick Janatakis (&lt;a href=&#34;https://diveintodocker.com/?r=devto&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;), which enabled me to tie together various bits and pieces of knowledge I had about Docker. I would recommend this course for anybody starting out with Docker. A lot of the notes in this document were gathered while going through the course.&lt;/p&gt;

&lt;h4 id=&#34;biggest-wins-of-docker&#34;&gt;Biggest wins of Docker&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;isolate and manage applications.&lt;/li&gt;
&lt;li&gt;eg:  12 apps with 12 dependency sets.&lt;/li&gt;
&lt;li&gt;VM : waste of resources.&lt;/li&gt;
&lt;li&gt;Vagrant : lets you manage VM&amp;rsquo;s on the command line (including Docker)

&lt;ul&gt;
&lt;li&gt;Disk space occupied for each app is very high.&lt;/li&gt;
&lt;li&gt;Overhead of system boot up and restart / killing is high.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Docker can be used to manage common dependencies.

&lt;ul&gt;
&lt;li&gt;Example of time frame: 2 seconds for loading 8 services.&lt;/li&gt;
&lt;li&gt;Spinning up an entire stack is very fast, compared to a VM.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Docker: portability of applications and dev environment.&lt;/li&gt;
&lt;li&gt;Dozens of scenarios where something works for you but not for me.&lt;/li&gt;
&lt;li&gt;New dev environments can be discouraging. With all the libraries and dependencies already installed, it is possible to become aggressive with the actual development and experimenting with new technology.&lt;/li&gt;
&lt;li&gt;Multiple versions of a programming language can be installed within a single docker container.&lt;/li&gt;
&lt;li&gt;Smaller Microservices that talk to each other are not always good, but Docker enables this in a streamlined manner.&lt;/li&gt;
&lt;li&gt;LXC: raw linux containers. Existed long before docker.

&lt;ul&gt;
&lt;li&gt;uses runC&lt;/li&gt;
&lt;li&gt;very complicated and brittle system.&lt;/li&gt;
&lt;li&gt;runs only on Linux.&lt;/li&gt;
&lt;li&gt;LXC&amp;rsquo;s are still better than VM&amp;rsquo;s for rapid build and deploy.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ANSIBLE: what files and tools should be on a server (very basic definition)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;easy-ways-to-get-documentation-help&#34;&gt;Easy ways to get documentation help&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Just typing in &lt;code&gt;docker&lt;/code&gt; will provide a list of primary level commands that can be used.&lt;/li&gt;
&lt;li&gt;For further flags, provide the primary command like &lt;code&gt;docker run --help&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The official documentation is a good resource.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;definitions&#34;&gt;Definitions&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Image: Setup of the virtual computer.&lt;/li&gt;
&lt;li&gt;Container:  Instance of an image. Many containers can run with the same image.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;running-emacs-on-docker&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Running Emacs on Docker&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-07 Sun 17:25] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Matrix DS offers a viable alternative as a platform. However, a customised docker container with all my tools is a good way to reproduce my working environment and also share my work with the community.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-06 Sat 17:54] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This needs to be evaluated. Today I have a vague idea : set up a docker container combining Rocker + data science at the command line + Scimax together. A separate layer could also cater to shiny apps.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.christopherbiscardi.com/2014/10/17/emacs-in-docker/&#34; target=&#34;_blank&#34;&gt;https://www.christopherbiscardi.com/2014/10/17/emacs-in-docker/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Silex/docker-emacs&#34; target=&#34;_blank&#34;&gt;Silex - github&lt;/a&gt; : Also contains references to other kinds of Emacs docker containers&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;good-online-resources-for-rocker&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Good Online resources for Rocker&lt;/h2&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;Introducing Rocker: Docker for R | R-Bloggers&lt;/li&gt;
&lt;li&gt;Rocker: Using R on Docker - A Hands-On Introduction - useR2015_docker.Pdf&lt;/li&gt;
&lt;li&gt;Jessie Frazelle&amp;rsquo;s Blog: Using an R Container for Analytical Models&lt;/li&gt;
&lt;li&gt;ROcker Images - Wiki Github&lt;/li&gt;
&lt;li&gt;Introduction to Docker - Paper&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Need to find a way to extract a bunch of links from the bookmark and directly available with org Mode.&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Play with Docker &lt;a href=&#34;https://training.play-with-docker.com&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction-to-rocker-technical-paper-link&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Introduction to Rocker - Technical paper &lt;a href=&#34;https://arxiv.org/pdf/1710.03675.pdf&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;h3 id=&#34;note-on-docker-toolbox-versus-native-apps&#34;&gt;Note on Docker Toolbox versus Native apps&lt;/h3&gt;

&lt;p&gt;The native Docker application uses the type 1 hypervisor (hyperkit for Mac OS and hyper-V for Windows). &lt;code&gt;docker-machine&lt;/code&gt; uses a virtualbox based hypervisor (type 2). This can also be specified while creating docker machines.&lt;/p&gt;

&lt;p&gt;In general, the native applications have a better user experience and commands can be directly typed into the terminal. The native apps (on Windows/ Mac OS) are newer than the Docker toolbox, and are being actively developed by the Docker company to reach performance on par with the original virtualbox based Docker Toolbox approach.&lt;/p&gt;

&lt;p&gt;Note that any performance lag depends on the application and as a thumb rule it may be better to start off with the native applications and switch to the toolbox when required.&lt;/p&gt;

&lt;h3 id=&#34;installing-docker-on-debian&#34;&gt;Installing Docker on debian&lt;/h3&gt;

&lt;p&gt;The docker repository has to be added first for being able to install docker. Detailed instructions are available at &lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/debian/&#34; target=&#34;_blank&#34;&gt;https://docs.docker.com/install/linux/docker-ce/debian/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A package is also available, and is probably the easiest method to install. Choose the appropriate version at:  &lt;a href=&#34;https://download.docker.com/linux/debian/dists/&#34; target=&#34;_blank&#34;&gt;https://download.docker.com/linux/debian/dists/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Manual version without using the package:&lt;/p&gt;

&lt;p&gt;Adding Docker&amp;rsquo;s official GPG key:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Searching that the key has been installed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-key fingerprint 0EBFCD88
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pub   rsa4096 2017-02-22 [SCEA]
      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
uid           [ unknown] Docker Release (CE deb) &lt;a href=&#34;mailto:docker@docker.com&#34; target=&#34;_blank&#34;&gt;docker@docker.com&lt;/a&gt;
sub   rsa4096 2017-02-22 [S]&lt;/p&gt;

&lt;p&gt;Adding the stable Docker repository:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo add-apt-repository \
   &amp;quot;deb [arch=amd64] https://download.docker.com/linux/debian \
   $(lsb_release -cs) \
   stable&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update the package lists and now search for docker-ce. It should be available since the repository has been added and the list updated.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Installing docker and necessary components. Note that the manual recommends removing any older installations if they exist.&lt;/p&gt;

&lt;p&gt;Note from the manual that different versions of docker can be installed by including &lt;code&gt;sudo apt-get install docker-ce=VERSION=abcd&lt;/code&gt;. Therefore multiple versions can probably exist side by side.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install docker-ce docker-compose docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating a docker group and adding this to the sudoers list will enable running docker commands without using root privileges (&lt;code&gt;sudo&lt;/code&gt;). A logout will be necessary to have the changes take effect.&lt;/p&gt;

&lt;p&gt;Note: Sometimes the &lt;code&gt;$USER&lt;/code&gt; variable does not seem to work. This can be replaced with your actual user name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo groupadd docker
sudo usermod -aG docker $USER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To configure docker to start on boot, enable it as a service. The need to do this depends on how frequently you use docker commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo systemctl start docker
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-docker-on-antergos-arch-linux&#34;&gt;Installing Docker on Antergos / Arch Linux&lt;/h3&gt;

&lt;p&gt;Installation can be done via Pacman&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pacman -S docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enable and start docker service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo systemctl enable docker
sudo systemctl start docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add docker to the user&amp;rsquo;s group using &lt;code&gt;usermod&lt;/code&gt;. After adding this, a log-out is necessary. Note that $USER can be replaced with the output of &lt;code&gt;whoami&lt;/code&gt; in the shell if desired. If this step is not performed, each docker command will have to be executed with &lt;code&gt;Sudo&lt;/code&gt; elevation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo usermod -a -G docker $USER
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-docker-on-mac-os&#34;&gt;Installing Docker on Mac OS&lt;/h3&gt;

&lt;p&gt;Docker can be downloaded as an app from the docker store :  &lt;a href=&#34;https://hub.docker.com/editions/community/docker-ce-desktop-mac&#34; target=&#34;_blank&#34;&gt;https://hub.docker.com/editions/community/docker-ce-desktop-mac&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the Mac, the docker app has to be launched run first, and this will create a docker icon in the menu bar indicating the status of the docker machine. This launches the docker daemon, and then commands can be directly entered into the terminal.&lt;/p&gt;

&lt;p&gt;Docker can also be installed using Brew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew cask install docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This created an app in the Applications folder which has to be launched. However, it seems additional components are required to run Docker from the command Line. These are available via brew.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install docker-compose docker-machine
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;checking-the-installation&#34;&gt;Checking the installation&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trying the hello world container as an additional check. Note the steps listed in the output, which is the typical process.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~/docker-test
docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Checking &lt;code&gt;docker-compose&lt;/code&gt; version.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;general-notes-on-containers-and-images&#34;&gt;General notes on containers and images&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;images contain the entire filesystem and parameters needed to run the application.&lt;/li&gt;
&lt;li&gt;When an image is run, a container is created.&lt;/li&gt;
&lt;li&gt;containers are generally immutable and changes do not linger&lt;/li&gt;
&lt;li&gt;One image can spawn any number of containers, simultaneously. Each container will be separate.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;default-location-of-images&#34;&gt;Default location of images&lt;/h2&gt;

&lt;p&gt;By default, on Antergos (Linux), the images are stored at &lt;code&gt;/var/lib/docker/&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo ls -al /var/lib/docker
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;docker-version-and-info&#34;&gt;Docker version and info&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker --version
docker info
docker version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;listing-docker-containers-and-images&#34;&gt;Listing Docker containers and images&lt;/h2&gt;

&lt;p&gt;List Docker Images&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker image ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List running Docker Containers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List all docker containers (running and Stopped)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container ls -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obtain only container ID&amp;rsquo;s  (All). This is useful to extract the container number alone. The &lt;code&gt;q&lt;/code&gt; argument stands for quiet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container ls -aq
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ropenscilabs.github.io/r-docker-tutorial&#34; target=&#34;_blank&#34;&gt;Ropenscilabs&lt;/a&gt; has a basic introduction to Docker, and the &lt;a href=&#34;https://docs.docker.com/get-started/part2/&#34; target=&#34;_blank&#34;&gt;Docker documentation&lt;/a&gt; is also a good place to start. A rocker specific introduction is available &lt;a href=&#34;https://github.com/BillMills/Rocker-tutorial/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If a local image is not found, docker will try to search and download the image from docker hub.&lt;/p&gt;

&lt;p&gt;It is better to create a folder wherein the docker container will reside.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir ~/docker-test/
cd ~/docker-test
docker --rm -p 8787:8787 rocker/tidyverse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;--rm&lt;/code&gt; flag indicates the container will be deleted when the container is quite. The &lt;code&gt;-p&lt;/code&gt; flag denotes using a particular port.
iner a
Note that the interim messages and download progress are not shown in eshell.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.rocker-project.org/images/&#34; target=&#34;_blank&#34;&gt;Different rocker images&lt;/a&gt; are available, depending on the need to be served.&lt;/p&gt;

&lt;h2 id=&#34;attaching-shells-t-and-interactive-containers-i&#34;&gt;Attaching shells &lt;code&gt;-t&lt;/code&gt; and Interactive containers &lt;code&gt;-i&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Example to run an ubuntu container and run bash interactively, by attaching a terminal to the container. This will login to Ubuntu and start bash.&lt;/p&gt;

&lt;p&gt;An alternative option is to use alpine linux, which is a much smaller download.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -t -i ubuntu /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -ti alpine /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;running-a-detached-container&#34;&gt;Running a detached container&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;use the &lt;code&gt;-d&lt;/code&gt; flag&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container ls -al
docker run -d ubuntu
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;build-process-of-a-docker-image&#34;&gt;Build process of a docker image&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker commit&lt;/code&gt; : used to commit changes to a new image layer. This is a manual process. Commit has little place in the real world. Dockerfile is superior.&lt;/li&gt;
&lt;li&gt;Dockerfile : blue print or recipe for creating a docker image. Each actionable step becomes a separate layer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Docker image : result of stacking up individual layers. Only the parts or layers that have changed are downloaded for a newer version of a specific image.&lt;/p&gt;

&lt;p&gt;Scratch image: docker image with no base operating system&lt;/p&gt;

&lt;h2 id=&#34;working-with-dockerfiles&#34;&gt;Working with dockerfiles&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;sample or reference docker files can be saved as &amp;ldquo;dockerfile.finished&amp;rdquo; or with some other useful extension.&lt;/li&gt;
&lt;li&gt;Dockerfiles are read top to bottom.&lt;/li&gt;
&lt;li&gt;the first non-comment instruction should be &lt;code&gt;FROM&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM&lt;/code&gt; allows you import a docker image.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RUN&lt;/code&gt; : basically executes the specified commands&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WORKDIR&lt;/code&gt; : setting the desired working directory. This can be set or used multiple times in the same docker file.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>R notes and snippets</title>
      <link>https://shreyas.ragavan.co/docs/r-notes-snippets/</link>
      <pubDate>Thu, 11 Jul 2019 11:21:36 -0600</pubDate>
      <guid>https://shreyas.ragavan.co/docs/r-notes-snippets/</guid>
      <description>

&lt;h2 id=&#34;lubridate-introductory-technical-paper&#34;&gt;Lubridate - introductory technical paper&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&#34;https://vita.had.co.nz/papers/lubridate.pdf&#34; target=&#34;_blank&#34;&gt;paper&lt;/a&gt; (Grolemund and Wickham) offers a good introduction and comparison between using lubridate and not using it, as well as several examples of using the library. It also offers some case studies which can serve as useful drill exercises.&lt;/p&gt;

&lt;h2 id=&#34;importing-multiple-excel-sheets-from-multiple-excel-files&#34;&gt;Importing multiple excel sheets from multiple excel files&lt;/h2&gt;

&lt;p&gt;This is one approach to importing multiple sheets from multiple excel files into a list of tibbles. The goal is that each sheet is imported as a separate tibble.&lt;/p&gt;

&lt;p&gt;Loading the libraries:
While you may have the tidyverse package installed, this approach uses the  package &lt;code&gt;rio&lt;/code&gt; ( ).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;## install the rio library.
## Rio  makes data import a little easier for different file types.

## install.packages(&amp;quot;rio&amp;quot;)
library(&amp;quot;rio&amp;quot;)
library(&amp;quot;tidyverse&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;User input for the path. This basically points towards a folder which presumably contains multiple excel files.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;## Note that patterns can be provided as an argument to filter file types.
folder_path &amp;lt;- c(&amp;quot;~/temp/bsu_test/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The information in the directory can be gleaned with the &lt;code&gt;fs::dir_info&lt;/code&gt; function, and from this the path variable can be pulled which will contain the paths to the excel files found.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;excel_paths_tbl &amp;lt;- fs::dir_info(folder_path)

paths_chr &amp;lt;- excel_paths_tbl %&amp;gt;%
  pull(path)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import_list()&lt;/code&gt; from the &lt;code&gt;rio&lt;/code&gt; package is used and the class is set to tibble using the argument &lt;code&gt;tbl&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An anonymous function is used to map the paths and apply the &lt;code&gt;import_list&lt;/code&gt; function on each path.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For example: assuming that there were 2 Nos. excel files in the specified directory; = the map function creates 2 lists containing 2 tibbles each. Each tibble represents an excel sheet from the file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The  final &lt;code&gt;combine()&lt;/code&gt; function combines these 2 Nos. lists into a single list of 4 tibbles, each being a sheet in the excel file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;excel_data &amp;lt;- paths_chr %&amp;gt;%
map(~ import_list(. , setclass = &amp;quot;tbl&amp;quot;)) %&amp;gt;%
combine()

glimpse(excel_data)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;references&#34;&gt;References&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;BSU Course DSB-101-R&lt;/li&gt;
&lt;li&gt;I learnt about the &lt;code&gt;Rio&lt;/code&gt; package in this &lt;a href=&#34;https://stackoverflow.com/questions/12945687/read-all-worksheets-in-an-excel-workbook-into-an-r-list-with-data-frames&#34; target=&#34;_blank&#34;&gt;Stack Overflow discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;data-explorer-package&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Data Explorer package&lt;/h2&gt;

&lt;p&gt;The DataExplorer package aims to have tools for EDA, Feature engineering and Data reporting. It is handy to get quick overview of the data from multiple perspectives.&lt;/p&gt;

&lt;p&gt;Installation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packges(&amp;quot;DataExplorer&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Salient points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A list of data frames can be provided as the input.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plot_str&lt;/code&gt; : display a graphic networking the various variables, their types and the list of data frames. This is displayed in the browser. The &lt;code&gt;type = &amp;quot;r&amp;quot;&lt;/code&gt; argument can be used for a radial network.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;introduce&lt;/code&gt; : provides a table of numbers rather than percentages, like the number of rows, columns, missing data and so on.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plot_intro&lt;/code&gt; : Visualises the output of &lt;code&gt;introduce&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plot_missing&lt;/code&gt; : useful to know the percentage of missing values in each feature.
6.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;devtools-package&#34;&gt;Devtools package&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;devtools package, which is the public face for a suite of R functions that automate common development tasks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://r-pkgs.org/intro.html&#34; target=&#34;_blank&#34;&gt;R Packages (book)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Official details of package development : &lt;a href=&#34;https://cran.r-project.org/doc/manuals/R-exts.html#Creating-R-packages&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;basic-libraries-to-aid-package-development&#34;&gt;Basic libraries to aid package development&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packages(c(&amp;quot;devtools&amp;quot;, &amp;quot;roxygen2&amp;quot;, &amp;quot;testthat&amp;quot;, &amp;quot;knitr&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;visdat-preprocessing-visualisation-link&#34;&gt;Visdat : preprocessing visualisation &lt;a href=&#34;http://visdat.njtierney.com/&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This package could be very useful in exploring new data or looking at how the data is changing after a wrangling operation. It could save repeatedly looking at the CSV file manually to make sure the change is implemented.&lt;/p&gt;

&lt;p&gt;Installing Visdat&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(&amp;quot;easypackages&amp;quot;)
packages(&amp;quot;visdat&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main Functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;vis_dat
vis_miss
vis_compare
vis_expect
vis_cor
vis_guess
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;General Exploration&lt;/p&gt;

&lt;p&gt;Note: &lt;code&gt;typical_data&lt;/code&gt; is a dataset that is included with the package and is useful to explore the functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;libraries(&amp;quot;tidyverse&amp;quot;, &amp;quot;visdat&amp;quot;)
vis_dat(typical_data)
vis_miss(typical_data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clustering the missing data in the columns&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;vis_miss(typical_data,
         cluster =  TRUE)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;long-wide-formats-example-for-gathering&#34;&gt;Long &amp;lt;-&amp;gt; Wide formats : example for gathering&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(&amp;quot;tidyverse&amp;quot;)

## Defining a sample tribble with several duplicates
a &amp;lt;- tribble(
    ~IDS, ~&amp;quot;client id 1&amp;quot;, ~&amp;quot;client id 2&amp;quot;, ~&amp;quot;client id 3&amp;quot;, ~&amp;quot;client id 4&amp;quot;, ~&amp;quot;old app&amp;quot;, ~&amp;quot;new app&amp;quot;,
    123, 767, 888,&amp;quot;&amp;quot; , &amp;quot;&amp;quot;, &amp;quot;yes&amp;quot; , &amp;quot;no&amp;quot;,
    222, 333, 455, 55, 677, &amp;quot;no&amp;quot;, &amp;quot;yes&amp;quot;,
    222, 333, 343, 55,677, &amp;quot;no&amp;quot;, &amp;quot;yes&amp;quot;
)


## Defining vector to form column names
vec1 &amp;lt;- seq(1:4)
vec2 &amp;lt;- &amp;quot;client id&amp;quot;
vec3 &amp;lt;- str_glue(&amp;quot;{vec2} {vec1}&amp;quot;)

## Gathering and removing duplicates
a %&amp;gt;%
    gather(
        key = &amp;quot;Client number&amp;quot;,
        value = &amp;quot;client ID&amp;quot;,
        vec3
    ) %&amp;gt;%
    unique()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;matrix&#34;&gt;Matrix&lt;/h2&gt;

&lt;h3 id=&#34;defining-a-matrix&#34;&gt;Defining a matrix&lt;/h3&gt;

&lt;p&gt;A matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns.&lt;/p&gt;

&lt;p&gt;A matrix is called two-dimensional, since there are rows and columns. It is constructed using the &lt;code&gt;matrix()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elements of the matrix&lt;/li&gt;
&lt;li&gt;&lt;code&gt;byrow&lt;/code&gt; to have the matrix filled by rows. By default, this is set to false.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;nrow&lt;/code&gt; for number of rows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;matrix(1:10,byrow = TRUE, nrow = 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Demonstrating the difference of not using &lt;code&gt;byrow&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;matrix(1:10, ncol = 2, nrow = 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;matrix(1:10, ncol = 2, nrow= 5 , byrow = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;naming-the-rows-and-the-columns&#34;&gt;Naming the rows and the columns&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rownames()&lt;/code&gt; and &lt;code&gt;colnames()&lt;/code&gt; can be used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;#Defining the row data
row_1 &amp;lt;- c(250, 300)
row_2 &amp;lt;- c(55, 350)

# Defining the matrix
my_matrix &amp;lt;- matrix(c(row_1, row_2), byrow = TRUE, nrow = 2)

# Defining row and column names
my_rownames &amp;lt;- c(&amp;quot;test_row1&amp;quot;, &amp;quot;test_row2&amp;quot;)
my_colnames &amp;lt;- c(&amp;quot;test_col1&amp;quot;, &amp;quot;test_col2&amp;quot;)

# Attaching row and column names to the created matrix
rownames(my_matrix) &amp;lt;- my_rownames
colnames(my_matrix) &amp;lt;- my_colnames

my_matrix

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sums-rowsums-and-colsums-adding-rows-rbind-and-columns-cbind&#34;&gt;Sums - &lt;code&gt;rowSums()&lt;/code&gt; and &lt;code&gt;colSums()&lt;/code&gt;, adding rows - &lt;code&gt;rbind()&lt;/code&gt; and columns - &lt;code&gt;cbind()&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;my_rowsums &amp;lt;-  rowSums(my_matrix)

# Adding a new column of the calculated sums
my_new_matrix &amp;lt;- cbind(my_matrix, my_rowsums)
my_new_matrix

# Adding a new row and calculating the sums again
row_3 &amp;lt;- c(200, 100 )
my_newest_matrix &amp;lt;- rbind(my_matrix, row_3)
my_new_rowsums &amp;lt;- rowSums(my_newest_matrix)
my_newest_matrix &amp;lt;- cbind(my_newest_matrix, my_new_rowsums)

my_newest_matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dates&#34;&gt;Dates&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The ISO 8601 format is the way R accepts and stores dates. This is basically in the yyyy-mm-dd format. Internally stored by R as the number of days since January 1, 1970.&lt;/li&gt;
&lt;li&gt;Alternative format year/month/day&lt;/li&gt;
&lt;li&gt;Dates are internally stored as numerics with some special characteristics over typical numerics.&lt;/li&gt;
&lt;li&gt;Current time from the system : &lt;code&gt;Sys.time()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Current date from the system : &lt;code&gt;Sys.Date()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Character vectors are most common source of creating dates.&lt;/li&gt;
&lt;li&gt;class of dates

&lt;ul&gt;
&lt;li&gt;could be a &lt;code&gt;date&lt;/code&gt; class catering to calendar dates.&lt;/li&gt;
&lt;li&gt;could also be a POSIX - Portable Operating System Interface class, which is commonly used in the finance world

&lt;ul&gt;
&lt;li&gt;POSIXlt and POSIXct allow holding a date.&lt;/li&gt;
&lt;li&gt;POSIXct is a way to represent datetime objects like &amp;ldquo;2015-01-22 08:39:40 EST&amp;rdquo;. This method is important for storing intraday financial data.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Using the simplest date class is generally the best strategy.&lt;/li&gt;
&lt;li&gt;There are other classes of date as well.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;as.date()&lt;/code&gt; can be used to convert the object to a date class.

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;format&lt;/code&gt; argument can facilitate conversion from different formats to the necessary ISO format.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Extractor functions

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;weekdays()&lt;/code&gt; can be used to extract the day of the week from a date object.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format()&lt;/code&gt; can be used to convert existing date objects to different date formats.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;months()&lt;/code&gt; for extracting the months of the date objects&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quarters()&lt;/code&gt; to extract the quarter in which the date object falls&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Dates can be subtracted, just like numerics.

&lt;ul&gt;
&lt;li&gt;The object must be in the Date format. Direct subtraction provides the difference in days.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;difftime(date1, date2, units = &amp;quot;secs&amp;quot;)&lt;/code&gt; can be used to find the difference in time, with the argument units specifying the output type

&lt;ul&gt;
&lt;li&gt;Argument &lt;code&gt;units&lt;/code&gt; should be one of “auto”, “secs”, “mins”, “hours”, “days”, “weeks”&lt;/li&gt;
&lt;li&gt;The 2nd argument &lt;code&gt;date2&lt;/code&gt;, will be subtracted from the first argument &lt;code&gt;date1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Formats of representing alternate date formats&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Y: 4-digit year (1982)&lt;/li&gt;
&lt;li&gt;y: 2-digit year (82)&lt;/li&gt;
&lt;li&gt;m: 2-digit month (01)&lt;/li&gt;
&lt;li&gt;d: 2-digit day of the month (13)&lt;/li&gt;
&lt;li&gt;A: weekday (Wednesday)&lt;/li&gt;
&lt;li&gt;a: abbreviated weekday (Wed)&lt;/li&gt;
&lt;li&gt;B: month (January)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;b: abbreviated month (Jan)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# Using the system date and time
todays_date &amp;lt;- Sys.Date()
todays_time &amp;lt;- Sys.time()
todays_date
todays_time

# Class of defined date and time
class(todays_date)
class(todays_time)

# Reading alternate formats of dates
test_date_alt_format &amp;lt;- &amp;quot;23/02/2019&amp;quot;
as.Date(test_date_alt_format, format = &amp;quot;%d/%m/%Y&amp;quot;)

test2_date_alt_format &amp;lt;- &amp;quot;Sep 25,2020&amp;quot;
as.Date(test2_date_alt_format, format = &amp;quot;%B %d,%Y&amp;quot;)

# Extractor functions
weekdays(as.Date(test2_date_alt_format, format = &amp;quot;%B %d,%Y&amp;quot;))

# Subtracting dates
date1 &amp;lt;- as.Date(&amp;quot;2030-02-20&amp;quot;)
date2 &amp;lt;- as.Date(&amp;quot;2040-03-30&amp;quot;)
date2 - date1
difftime(date2, date1, units = &#39;secs&#39;)
difftime(date1, date2, units = &#39;mins&#39;)

# Setting the weekdays as names()
dates3 &amp;lt;- c(date1, date2, as.Date(c(&amp;quot;2025-03-23&amp;quot;, &amp;quot;2015-04-25&amp;quot;)))
names(dates3) &amp;lt;- weekdays(dates3)
dates3

# Syntax example of using Not (relational operators)
a &amp;lt;- c(100,140,2,240, 300)
# checking where a is Not greater than 200
!(a &amp;gt; 200)

# Testing runif()

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;vectors&#34;&gt;Vectors&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;One dimensional collection of data.&lt;/li&gt;
&lt;li&gt;vectors need to contain a similar data type. To combine multiple data types, a data frame type object or a list is required.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;length()&lt;/code&gt; can be used with numeric type vectors to find the length of the vector. However the &lt;code&gt;nchar()&lt;/code&gt; function should be used for character type vectors (using &lt;code&gt;length()&lt;/code&gt; will provide an answer of 1)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A single number is also stored as a vector of length 1.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;a &amp;lt;- c(&amp;quot;This is a character type vector&amp;quot;, &amp;quot;which contains 2 strings&amp;quot;)
a
length(a) # the result will be 2 because there are 2 elements
nchar(a)  # Actual number of characters in each string

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;vectorised-functions&#34;&gt;Vectorised functions&lt;/h2&gt;

&lt;p&gt;Most functions in R are vectorised. The function will apply itself to each element of a vector. This concept is important to understand especially while progressing onto tidyeval style Functions.&lt;/p&gt;

&lt;p&gt;Example of multiple substitutions with the assignment operator which is a  vectorised function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;languages &amp;lt;- c(&amp;quot;English&amp;quot;, &amp;quot;Italian&amp;quot;, &amp;quot;Urdu&amp;quot;)
print(languages)
languages[c(2,3)] &amp;lt;- c(&amp;quot;Norwegian&amp;quot;, &amp;quot;Latin&amp;quot;)
print(languages)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lists&#34;&gt;Lists&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The list is a one dimensional collection of data, like a vector.&lt;/li&gt;
&lt;li&gt;The list data type is equivalent to the dictionary data type in Python.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;list()&lt;/code&gt; with the chosen data structures as the arguments. The list can contain multiple types of objects or data types.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lists are used to create Dataframes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;                                    # Creating a simple list of 4 elements, name, age, height, horn.sizre

my.list &amp;lt;- list(
name = &amp;quot;Shreyas&amp;quot;,
age = 776,
height = 167,
horn.size = 25
)

my.list
                                    # the tag names can be extracted using the names()
names(my.list)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Subsetting: using a &lt;code&gt;[]&lt;/code&gt; returns a subset of the list and using &lt;code&gt;[[]]&lt;/code&gt; returns the data inside the list being referenced.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A single bracket always means to filter a location. list[&lt;index&gt;] is actually a filtered list.&lt;/li&gt;
&lt;li&gt;Single brackets return a list and Double brackets return the element itself.&lt;/li&gt;
&lt;li&gt;A subset can be used on a dateframe to extract specific data.&lt;/li&gt;
&lt;li&gt;Syntax example with conditionals: &lt;code&gt;subset(dataframe, column1 &amp;gt; condition1 &amp;amp; column2 &amp;lt; condition2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The elements of the list can be named, by adding the element to the arguments while defining the list.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;adding names to an existing list can be done using the &lt;code&gt;names(list name)&lt;/code&gt; function.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;With a named list, the &lt;code&gt;$&lt;/code&gt; operator can also be used to access specific list items.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;items can be added to the list using &lt;code&gt;c()&lt;/code&gt;, which would look like &lt;code&gt;c(list_name, new_item_name = item_name)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Removing elements from a list can be done by assigning the item the NULL value.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Other list creating functions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;split()&lt;/code&gt; : &lt;code&gt;split(list-name, item-name)&lt;/code&gt;. This will create 2 lists separated by the item name specified.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsplit()&lt;/code&gt; : to unsplit a list. &lt;code&gt;unsplit(split-list-name, grouping)&lt;/code&gt; Similar syntax to the above.&lt;/li&gt;
&lt;li&gt;split-apply-combine class of problems. Example is where a particular factor is to be applied for a portion of the data and another factor for the other portion, and after which the 2 portions are recombined. For eg: offering customer A a discount of 10% and customer B a discount of 20% via splitting and them recombining the split parts into a common dataframe.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;attributes()&lt;/code&gt;: meta data of an object. For example the dim or dimension is an attribute of a matrix, and the names, row.names and class are common attributes of a dataframe.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;attr()&lt;/code&gt; to access a specific attribute. This takes 2 arguments at least. &lt;code&gt;attr(matrix_name, which = &amp;quot;desired attribute&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Applying functions to lists&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lapply&lt;/code&gt; is for lists.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;sapply&lt;/code&gt; : simplified apply works well with Vectors.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;people &amp;lt;- c(&amp;quot;shreyas&amp;quot;, &amp;quot;tom&amp;quot;, &amp;quot;harry&amp;quot;)
lapply(people, toupper)
                                # the first argument is the list and the 2nd argument is the function. Additional arguments to the function can also be supplied. This returns a new list and the old list remains unmodified.
lapply(people, paste, &amp;quot;hello&amp;quot;)
people
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples using lapply and other list and vector Manipulation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;                                        # Creating vectors of meals  and meal items

breakfast &amp;lt;- c(&amp;quot;eggs&amp;quot;, &amp;quot;bread&amp;quot;, &amp;quot;orange juice&amp;quot;)
lunch &amp;lt;- c(&amp;quot;pasta&amp;quot;, &amp;quot;coffee&amp;quot;)
meals &amp;lt;- list(breakfast = breakfast, lunch =  lunch)
meals
meals &amp;lt;- c(meals, list(dinner = c(&amp;quot;noodles&amp;quot;, &amp;quot;bread&amp;quot;)))
meals
names(meals)

                                        # Extracting dinner
dinner &amp;lt;- meals$dinner

                                        # Adding earlier meals to a separate list
early_meals &amp;lt;- c(meals[&amp;quot;breakfast&amp;quot;], meals[&amp;quot;lunch&amp;quot;])
early_meals

                                        # Finding the number of items in each meal.
number_items_meal &amp;lt;- lapply(meals , length)
number_items_meal

                                        # Write a function `add_pizza` that adds pizza to a given meal vector, and  returns the pizza-fied vector
add_pizza &amp;lt;- function(vector, string = &amp;quot;pizza&amp;quot;) {
  pizzafied &amp;lt;- paste(vector, string, sep = &amp;quot;-&amp;quot;)
  return(pizzafied)
  }

add_pizza(breakfast)

                                        # Create a vector `better_meals` that is all your meals, but with pizza!
updated_meals &amp;lt;- c(add_pizza(breakfast),
                   add_pizza(lunch),
                   add_pizza(dinner)
                   )
updated_meals

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;factors&#34;&gt;Factors&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;factor()&lt;/code&gt; can be used to store the unique levels of a vector.

&lt;ul&gt;
&lt;li&gt;The vector to be converted to a factor is passed in as an argument.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;levels()&lt;/code&gt; can be used to access the unique levels of a factor object.

&lt;ul&gt;
&lt;li&gt;Rename the levels by just passing a vector &lt;code&gt;levels(factor_object)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cut()&lt;/code&gt; can be used to break up a vector into specified buckets or based on specified intervals.

&lt;ul&gt;
&lt;li&gt;argument &amp;lsquo;breaks&amp;rsquo; to specify the demarcations in which the vector will be cut up.&lt;/li&gt;
&lt;li&gt;R treats the left side of the bucket as exclusive and the right side of the bucket as inclusive. This is represented by &amp;lsquo;(&amp;rsquo; and &amp;lsquo;]&amp;rsquo;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summary()&lt;/code&gt; can be used to provide the counts of items under each factor. This is best used on a factor object.&lt;/li&gt;
&lt;li&gt;Ordering and sub-setting vectors

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ordered()&lt;/code&gt; : R has an inbuilt system to order the object alphabetically.&lt;/li&gt;
&lt;li&gt;passing the &lt;code&gt;levels&lt;/code&gt; argument to &lt;code&gt;factor()&lt;/code&gt; along with the argument &lt;code&gt;ordered = T&lt;/code&gt;, with levels containing the desired order (written as least to greatest) will enable a custom ordering of factors.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drop = T&lt;/code&gt; argument to drop a level completely. Subsetting with [-1] only drops the object at the first position, but retains the level.&lt;/li&gt;
&lt;li&gt;R&amp;rsquo;s default behavior when creating data frames is to convert all characters into factors&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;working-with-categorical-data&#34;&gt;Working with categorical data:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;forcats::as_factor()&lt;/code&gt; : assigns factor values based on order in the vector&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;base::as.factor()&lt;/code&gt; : uses an alphabetical order. Assigns factor order based on the alphabetical order&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;ranking &amp;lt;- c(1:20)
head(ranking)
buckets &amp;lt;- c(0, 5, 10, 15, 20)
ranking_grouped &amp;lt;- cut(ranking, breaks = buckets)
head(ranking_grouped)
ranking_grouped
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dataframe&#34;&gt;Dataframe&lt;/h2&gt;

&lt;p&gt;Used to store a table of data. Multiple data types can be stored in a single dataframe. A matrix can store only a single data type.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Defined using &lt;code&gt;data.frame()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;colnames()&lt;/code&gt; : to rename the columns in a dataframe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subset()&lt;/code&gt; : to extract a particular subset of a dataframe. Compared to calling a column name, using this is more informative or robust.

&lt;ul&gt;
&lt;li&gt;first argument: name of the dataframe&lt;/li&gt;
&lt;li&gt;2nd argument: the condition or the column name within the dataframe&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A column can be deleted by assigning it NULL&lt;/li&gt;
&lt;li&gt;There is no need to use a &lt;code&gt;c()&lt;/code&gt; to add multiple objects to the dataframe. Directly add the vectors like &lt;code&gt;data.frame(variable 1, variable 2)&lt;/code&gt; and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;dataframe-peek-function-in-r&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Dataframe peek function in R&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;head()
tail()
str()
desc()
glimpse()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;package-installation--especially-for-data-science-and-ml&#34;&gt;Package installation (especially for data science and ML)&lt;/h2&gt;

&lt;p&gt;The package &lt;code&gt;easypackages&lt;/code&gt; enables quickly loading or installing multiple libraries. This snippet will enable installing multiple packages. In general, it is better to install packages one by one. They can however be called together.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packages(&amp;quot;easypackages&amp;quot;)
library(&amp;quot;easypackages&amp;quot;)
packages(&amp;quot;tidyverse&amp;quot;, &amp;quot;tidyquant&amp;quot;, &amp;quot;glmnet&amp;quot;, &amp;quot;rpart&amp;quot;, &amp;quot;rpart.plot&amp;quot;, &amp;quot;ranger&amp;quot;, &amp;quot;randomForest&amp;quot;, &amp;quot;xgboost&amp;quot;, &amp;quot;kernlab&amp;quot;, &amp;quot;visdat&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;basic-statistics-concepts&#34;&gt;Basic Statistics concepts&lt;/h2&gt;

&lt;h3 id=&#34;median&#34;&gt;Median&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;##&#39; Source: Conway, Drew; White, John Myles. Machine Learning for Hackers: Case Studies and Algorithms to Get You Started (p. 39). O&#39;Reilly Media. Kindle Edition.
##&#39; Additional comments are my own.
##&#39; Function to illustrate how a median is calculated for odd and even datasets

my.median  &amp;lt;- function(x){
                                        # Step 1:  Sort x ascending or descending
  sorted.x  &amp;lt;-  sort(x)
                                        # Find the length of x whether (odd number of digits or even). If odd : there are 2 medians. If even: there is a single median.
  if(length(x) %% 2 != 0){
    indices  &amp;lt;- c(length(x)/2 , length(x)/2 +1)
                                        # These numbers are used as indices for the initially sorted vector to return the exact median.
    return(mean(sorted.x[indices]))
}
else {
  index  &amp;lt;- ceiling(length(x)/2)
  return(sorted.x[index])
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;quantile&#34;&gt;Quantile&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;                                        # Defining a sample of numbers to calculate quantile.
a  &amp;lt;- c(seq(from = 1, to = 30), seq(from = 40, to = 50, by = 0.2))
quantile(a)

                                        # Defining bins or cuts for quantile. The default is 0.25.
quantile(a, probs =  seq(0,1,by = 0.2))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;promptdata-generate-shell-documentation-of-dataset&#34;&gt;&lt;code&gt;promptData()&lt;/code&gt; : generate shell documentation of dataset&lt;/h2&gt;

&lt;p&gt;If the filename argument is given as &amp;ldquo;NA&amp;rdquo;, the output will provide lists of the information. If no filename is specified, then an .Rd file will be created in the same working directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;promptData(sunspots, filename = NA)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;downloading-a-file-to-specific-location&#34;&gt;Downloading a file to specific location&lt;/h2&gt;

&lt;p&gt;With wget : -P is the flag for the prefix directory for the file being downloaded. The path will be created if it does not exist. If the file already exists, a duplicate will be created with the &amp;lsquo;.1&amp;rsquo; suffix. Since this is a string being passed to wger, the &amp;ldquo; and other characters have to be explicitly escaped.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;## Download file to specific location
system(&amp;quot;wget \&amp;quot;https://raw.githubusercontent.com/amrrs/sample_revenue_dashboard_shiny/master/recommendation.csv\&amp;quot; -P ./sales-rev-app/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;removing-user-installed-packages-alone&#34;&gt;Removing user installed packages alone&lt;/h2&gt;

&lt;p&gt;Sometimes, it is not possible to remove R completely. This is a nice snippet from an &lt;a href=&#34;https://www.r-bloggers.com/how-to-remove-all-user-installed-packages-in-r/&#34; target=&#34;_blank&#34;&gt;R-bloggers post&lt;/a&gt; to remove the user installed packages alone.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# create a list of all installed packages
 ip &amp;lt;- as.data.frame(installed.packages())
 head(ip)
# if you use MRO, make sure that no packages in this library will be removed
 ip &amp;lt;- subset(ip, !grepl(&amp;quot;MRO&amp;quot;, ip$LibPath))
# we don&#39;t want to remove base or recommended packages either\
 ip &amp;lt;- ip[!(ip[,&amp;quot;Priority&amp;quot;] %in% c(&amp;quot;base&amp;quot;, &amp;quot;recommended&amp;quot;)),]
# determine the library where the packages are installed
 path.lib &amp;lt;- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
 pkgs.to.remove &amp;lt;- ip[,1]
 head(pkgs.to.remove)
# remove the packages
 sapply(pkgs.to.remove, remove.packages, lib = path.lib)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rprofile-and-user-files&#34;&gt;Rprofile and user files&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?Startup&lt;/code&gt; in the R interpreter for information on how the R environment is started up.&lt;/li&gt;
&lt;li&gt;Note that the Rprofile.site and other user files are not setup by default. These have to be created by the user.&lt;/li&gt;
&lt;li&gt;The default CRAN repo can be set in the &lt;code&gt;Rprofile.site&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To find the installation location of R, use the &lt;code&gt;R.home()&lt;/code&gt; function with component specified as shown below. &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/base/html/Rhome.html&#34; target=&#34;_blank&#34;&gt;More information&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;R.home(component=&#39;home&#39;)
R.home(component=&#39;etc&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jupytext-for-conversion-to-rmd&#34;&gt;Jupytext for conversion to Rmd&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Jupytext can save Jupyter notebooks as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Markdown and R Markdown Documents,&lt;/li&gt;
&lt;li&gt;Julia, Python, R, Bash, Scheme, Clojure, Matlab, Octave, C++ and q/kdb+ scripts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mwouts/jupytext&#34; target=&#34;_blank&#34;&gt;Jupytext package&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The is a convenient tool to convert the jupyter notebook into multiple formats, and it also enables collaboration across documents.&lt;/p&gt;

&lt;p&gt;Installing Jupytext using conda:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda install -c conda-forge jupytext
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My most common usage of this tool is to convert jupyter notebooks (.ipynb) to Rmarkdown(Rmd). Deploying jupytext as a Library of Babel(LOB) Ingest makes it easy to be called from anywhere in Emacs.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--jupytext-ipynb-rmd&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jupytext $jup_notebook --to rmarkdown
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;package-installation--especially-for-data-science-and-ml-1&#34;&gt;Package installation (especially for data science and ML)&lt;/h2&gt;

&lt;p&gt;The package &lt;code&gt;easypackages&lt;/code&gt; enables quickly loading or installing multiple libraries. This snippet will enable installing multiple packages. In general, it is better to install packages one by one. They can however be called together.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packages(&amp;quot;easypackages&amp;quot;, )
library(&amp;quot;easypackages&amp;quot;)
packages(&amp;quot;tidyverse&amp;quot;, &amp;quot;tidyquant&amp;quot;, &amp;quot;glmnet&amp;quot;, &amp;quot;rpart&amp;quot;, &amp;quot;rpart.plot&amp;quot;, &amp;quot;ranger&amp;quot;, &amp;quot;randomForest&amp;quot;, &amp;quot;xgboost&amp;quot;, &amp;quot;kernlab&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-the-r-kernel-for-jupyter-notebooks&#34;&gt;Installing the R kernel for Jupyter notebooks&lt;/h2&gt;

&lt;p&gt;Reference: &lt;a href=&#34;https://github.com/IRkernel/IRkernel&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The easiest way for me to export org files to a notebook format will be using the Ipython notebook export available in Scimax. Installing the R kernel for Jupyter notebooks is as simple as installing an R package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packages(&#39;IRkernel&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To register the kernel in the current R installation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;IRKernel::installspec()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Per default IRkernel::installspec() will install a kernel with the name “ir” and a display name of “R”. For having multiple versions of R available as  kernels:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# in R 3.3
IRkernel::installspec(name = &#39;ir33&#39;, displayname = &#39;R 3.3&#39;)
# in R 3.2
IRkernel::installspec(name = &#39;ir32&#39;, displayname = &#39;R 3.2&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is possible to install the IRKernel package via Docker.&lt;/p&gt;

&lt;p&gt;Note: Some additional packages may be required before installing IRKernel. Try the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packages(c(&#39;repr&#39;, &#39;IRdisplay&#39;, &#39;evaluate&#39;, &#39;crayon&#39;, &#39;pbdZMQ&#39;, &#39;devtools&#39;, &#39;uuid&#39;, &#39;digest&#39;))
devtools::install_github(&#39;IRkernel/IRkernel&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;troubleshooting-with-r-version-dot&#34;&gt;Troubleshooting with R version.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;finding the R version being used is as simple as typing in version on the R console&lt;/li&gt;
&lt;li&gt;the shell command which R can also be used to find the path from R is being loaded.&lt;/li&gt;
&lt;li&gt;anaconda installs earlier versions of R. This has to be removed completely, so that a single version of R is accesed by R studio and R console and within Emacs as well.&lt;/li&gt;
&lt;li&gt;in my case, differing versions 3.4 and 3.5 of R were being accessed, which made package installation difficult.&lt;/li&gt;
&lt;li&gt;therefore, I uninstalled the older conda version and then downloaded the R pkg from CRAN as a fresh install on the mac.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;it is possible to set the default R version for the inferior ESS shell in Emacs as specified here &lt;a href=&#34;https://stackoverflow.com/questions/12574738/how-can-i-specify-the-r-version-opened-by-ess-session-in-emacs&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;version
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;which R
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-an-r-session-starts&#34;&gt;How an R session starts&lt;/h2&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html&#34; target=&#34;_blank&#34;&gt;https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;upgrading-packages-in-r--r-session&#34;&gt;Upgrading packages in R (R session)&lt;/h2&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://wiki.archlinux.org/index.php/R&#34; target=&#34;_blank&#34;&gt;Arch wiki&lt;/a&gt;
When you also need to rebuild packages which were built for an older version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;update.packages(ask=FALSE,checkBuilt=TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;when you also need to select a specific mirror (&lt;a href=&#34;https://cran.r-project.org/mirrors.html&#34; target=&#34;_blank&#34;&gt;https://cran.r-project.org/mirrors.html&lt;/a&gt;) to download the packages from (changing the url as needed):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;update.packages(ask=FALSE,checkBuilt=TRUE,repos=&amp;quot;https://cran.cnr.berkeley.edu/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use Rscript, which comes with r to update packages from a Shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Rscript -e &amp;quot;update.packages()&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-r-on-debian&#34;&gt;Installing R on Debian&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo cat &amp;gt;&amp;gt; /etc/apt/sources.list &amp;lt;&amp;lt; EOF
# adding mirror for installation of R
deb http://cran.rstudio.com/bin/linux/debian stretch-cran34/
EOF

sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using Debian&amp;rsquo;s GPG Key&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt install dirmngr
sudo apt-key adv --keyserver keys.gnupg.net --recv-key &#39;E19F5F87128899B192B1A2C2AD5F960A256A04AF&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Installing r-Base&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install r-base
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some pre-requisite libraries are required for installing various R Packages&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install libcurl4-openssl-dev
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Linux notes</title>
      <link>https://shreyas.ragavan.co/docs/linux-notes/</link>
      <pubDate>Sat, 06 Jul 2019 19:53:16 -0600</pubDate>
      <guid>https://shreyas.ragavan.co/docs/linux-notes/</guid>
      <description>

&lt;h2 id=&#34;installing-the-iosevka-font&#34;&gt;Installing the Iosevka font&lt;/h2&gt;

&lt;h3 id=&#34;on-debian-distros&#34;&gt;On Debian distros&lt;/h3&gt;

&lt;p&gt;There appear to be no packages for iosevka for debian. The prescribed method is to add the fonts to the fonts folder. The github issues point towards a PPA which can be added. However, this did not work for me, and I had to resort to manual means.&lt;/p&gt;

&lt;p&gt;Downloading the specified font version from github into a temp folder&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~/temp
wget &amp;quot;https://github.com/be5invis/Iosevka/releases/download/v2.2.1/01-iosevka-2.2.1.zip&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extracting the contents of the downloaded zip file to a folder named iosevka.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~/temp
unzip -u 01-iosevka-2.2.1.zip -d iosevka
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For system wide recognition, the ttf files have to be placed in  &lt;code&gt;usr/share/fonts&lt;/code&gt;  as per the debian wiki. Sudo permission is required for writing to this location. Optionally, the font folder can also be copied to &lt;code&gt;~/.local/share/fonts/&lt;/code&gt;, for a user specific setting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo cp -r ~/temp/iosevka /usr/share/fonts/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, it is a good idea to refresh the font cache&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;fc-cache -fv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To set the font in Emacs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(set-face-attribute &#39;default nil :family &amp;quot;ttf-iosevka&amp;quot; :height 140)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: The file permissions for the ttf files have to be set to &lt;code&gt;644&lt;/code&gt; to be usable. This should be checked if the above does not work.&lt;/p&gt;

&lt;h3 id=&#34;on-arch-antergos&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; On Arch / Antergos&lt;/h3&gt;

&lt;p&gt;Use AUR to install iosevka in Antergos / Arch as the package is already available.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yay -S ttf-iosevka
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting the font in Emacs. This should be added to the init. The font height could vary based on the monitor size.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(set-face-attribute &#39;default nil :family &amp;quot;ttf-iosevka&amp;quot; :height 120)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Installing iosevka in Debian:&lt;/p&gt;

&lt;p&gt;The font files have to be downloaded and placed in to the location &lt;code&gt;/usr/local/share/Fonts&lt;/code&gt; for system wide access.&lt;/p&gt;

&lt;h2 id=&#34;setup-gpg-agent-to-be-running-whenever-gpg-is-called&#34;&gt;Setup gpg-agent to be running whenever gpg is called&lt;/h2&gt;

&lt;p&gt;For some reason, it appears though the gpg-agent is shown to be running, this configuration is required to make sure that the entered keys are stored in the keyring.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat &amp;gt;&amp;gt; ~/.gnupg/gpg.conf &amp;lt;&amp;lt;EOF
no-greeting
no-permission-warning
lock-never
keyserver-options timeout=10
use-agent
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-tk-especially-for-being-able-to-select-the-cran-mirrors-in-r&#34;&gt;Install tk especially for being able to select the CRAN mirrors in R&lt;/h2&gt;

&lt;p&gt;This is pertinent to Arch based distros.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo pacman -S tk
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;git-global-config&#34;&gt;Git global config&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global user.email &amp;quot;abcs@gmail.com&amp;quot;
git config --global user.name &amp;quot;Mad Max&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;upgrading-a-debian-distro&#34;&gt;Upgrading a debian distro&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get update
sudo apt-get dist-upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;app-installation-in-debian-using-flatpak&#34;&gt;App installation in debian using flatpak&lt;/h2&gt;

&lt;p&gt;Some apps are not available in the so called stable debian software archives. Therefore alternative sources have to be established for the same.&lt;/p&gt;

&lt;p&gt;Installing flatpak on debian and adding the flatpak repository:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reboot after the above commands.&lt;/p&gt;

&lt;p&gt;Note: Calling a flatpak based app is rather verbose, and is better served by defining appropriate aliases.&lt;/p&gt;

&lt;h3 id=&#34;franz-multi-network-messenger&#34;&gt;Franz: Multi-network messenger&lt;/h3&gt;

&lt;p&gt;This app covers Slack and Whatsap and other networks. It still takes up about 1GB of RAM and the app itself is about 500MB, but it atleast covers all the platforms in one go and should be useful in the office.&lt;/p&gt;

&lt;p&gt;In addition, the &lt;code&gt;org.freedesktop.Platform&lt;/code&gt; package has to be installed. The latter gets installed automatically, when executed in the terminal.&lt;/p&gt;

&lt;p&gt;Pre-requisites for debian/ubuntu&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt install libx11-dev libxext-dev libxss-dev libxkbfile-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flatpak install flathub com.meetfranz.Franz
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;slack&#34;&gt;Slack:&lt;/h3&gt;

&lt;p&gt;The Slack app takes up a lot of memory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flatpak install flathub com.slack.Slack
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;swapping-control-and-capslock&#34;&gt;Swapping control and Capslock&lt;/h2&gt;

&lt;p&gt;Creating xmodmap script : Swapping control and capslock keys
Source: &lt;a href=&#34;https://www.emacswiki.org/emacs/MovingTheCtrlKey#toc8&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat &amp;gt; ~/.xmodmap &amp;lt;&amp;lt;EOF
!
! Swap Caps_Lock and Control_L
!
remove Lock = Caps_Lock
remove Control = Control_L
keysym Control_L = Caps_Lock
keysym Caps_Lock = Control_L
add Lock = Caps_Lock
add Control = Control_L
EOF

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Executing xmodmap on the configuration above&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;xmodmap ~/.xmodmap
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-above-command-should-be-added-as-the-last-command-in-the-autostart-option-of-dot-config&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; The above command should be added as the last command in the autostart option of ~/.config&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat &amp;gt; ~/.config/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-firefox-developer-edition&#34;&gt;Installing Firefox developer edition&lt;/h2&gt;

&lt;p&gt;The developer edition of Firefox contains interesting features, and it appears to perform better. The developer edition is available as a package on Arch Linux (AUR). For Debian, the procedure is a little round-about.&lt;/p&gt;

&lt;p&gt;The following procedure using flatpak is picked up from the &lt;a href=&#34;https://wiki.debian.org/Firefox&#34; target=&#34;_blank&#34;&gt;Debian wiki page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using flatpak&lt;/p&gt;

&lt;p&gt;Unofficial builds are provided by Fedora at &lt;a href=&#34;https://firefox-flatpak.mojefedora.Cz/&#34; target=&#34;_blank&#34;&gt;https://firefox-flatpak.mojefedora.Cz/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt install flatpak
sudo flatpak remote-add --from gnome https://sdk.gnome.org/gnome.flatpakrepo
sudo flatpak remote-add --from org.mozilla.FirefoxRepo https://firefox-flatpak.mojefedora.cz/org.mozilla.FirefoxRepo.flatpakrepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then for &amp;ldquo;developer edition&amp;rdquo; (aka &amp;ldquo;Beta&amp;rdquo;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flatpak install org.mozilla.FirefoxRepo org.mozilla.FirefoxDevEdition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and Running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flatpak run org.mozilla.FirefoxRepo org.mozilla.FirefoxNightly
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Debian wiki also describes  a method to add the flatpak installations to the Path. However, this is a newer feature and is unavailable at the moment on my machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo &#39;export PATH=$PATH:/var/lib/flatpak/exports/bin&#39; &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;emacs-can-be-installed-via-conda&#34;&gt;Emacs can be installed via Conda&lt;/h2&gt;

&lt;p&gt;The advantage of using conda is being able to quickly install reasonably recent versions of Emacs quickly on Debian type OS&amp;rsquo;s which often reference older (stable) versions of software packages by default. Using conda would avoid adding PPA&amp;rsquo;s or hunting for binaries or even compiling from source. Another advantage is that this approach can be used cross platform.&lt;/p&gt;

&lt;p&gt;One disadvantage of this method is that the package is installed into the miniconda / anaconda package installation path. Though the instillation script of miniconda adds the path for bash, it has to be manually set for any other shell like zsh. However, once this is done - there appear to be no issues in using Emacs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda install -c conda-forge emacs
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;virtualbox-resizing-virtual-disk-image-vdi&#34;&gt;Virtualbox: resizing virtual disk image - vdi&lt;/h2&gt;

&lt;p&gt;Reference: &lt;a href=&#34;http://derekmolloy.ie/resize-a-virtualbox-disk&#34; target=&#34;_blank&#34;&gt;http://derekmolloy.ie/resize-a-virtualbox-disk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It does not appear to be possible to expand the size of a fixed format vdi. The floating format has a disadvantage of a read-write overhead for expanding the disk image as it is utilised.&lt;/p&gt;

&lt;p&gt;However, as per the documentation, after the hard disk size reaches a stable stage, this overhead becomes negligible on an average.&lt;/p&gt;

&lt;p&gt;Therefore the vdi has to be copied (or cloned), and the floating format has to be selected. This is done using the copy option in the virtualbox media manager. Once copied, the expanded vdi image has to be attached to the guest OS.&lt;/p&gt;

&lt;p&gt;When the attachment is complete, the hardisk will show up in the virtualbox media manager app. Now the vdi size can be adjusted to the desired value.&lt;/p&gt;

&lt;p&gt;The next step is to download the live iso of gparted. This should be loaded as a storage device with the live CD option selected. With this loaded, the existing partitions have to be changed appropriately&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-1&#34;&gt;&lt;a href=&#34;#fn:fn-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. This step has to be done to enable Linux to recognise the expanded harddisk.&lt;/p&gt;

&lt;p&gt;Once this has been, the gparted iso can be removed and the guest OS can be booted as usual. However, the UUID of the paritions have to be changed appropriately. If not changed, there will be delay during boot, especially if the swap partition has been modified.&lt;/p&gt;

&lt;p&gt;The actual partition setup and the UUIDs can be viewed with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;lsblk -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The appropriate UUID has to be replaced in the file &lt;code&gt;/etc/fstab&lt;/code&gt;. Technically, the fstab file is generated by the command &lt;code&gt;mkinitcpio&lt;/code&gt;, but sometimes a manual change is necessary.&lt;/p&gt;

&lt;h2 id=&#34;downgrading-a-single-package-in-arch-linux&#34;&gt;Downgrading a single package in Arch linux&lt;/h2&gt;

&lt;p&gt;From the &lt;a href=&#34;https://wiki.archlinux.org/index.php/Arch%5FLinux%5FArchive&#34; target=&#34;_blank&#34;&gt;Arch linux wiki : archive&lt;/a&gt; : downgrading via downloading the Package from URL. Find the package you want under /packages and let pacman fetch it for installation. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pacman -U https://archive.archlinux.org/packages/ ... packagename.pkg.tar.xz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Downgrading via local cache&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pacman -U /var/cache/pacman/pkg/&amp;lt;package-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seems to be a very good idea to maintain a few older versions of packages in the cache, even at the expense of Harddisk space.&lt;/p&gt;

&lt;p&gt;Further options are provided at this &lt;a href=&#34;https://unix.stackexchange.com/questions/103859/arch-linux-pacman-specifying-package-version&#34; target=&#34;_blank&#34;&gt;Unix stack exchange discussion&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-1&#34;&gt;It is likely that the swap partition is the last partition, and the previous partition is the root which has to be extended. In this case, the swap has to be deleted and the root partiion should be expanded to the desired size, leaving behind room for the swap partition. The final unallocated space has to be used for a new extension partition and then a logical partition to create the linux-swap. &lt;em&gt;For some reason, there is a space of 1MB preceding the swap partition&lt;/em&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>MongoDB and NoSQL Databases</title>
      <link>https://shreyas.ragavan.co/docs/nosql-mongodb-notes/</link>
      <pubDate>Sat, 06 Jul 2019 12:12:19 -0600</pubDate>
      <guid>https://shreyas.ragavan.co/docs/nosql-mongodb-notes/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;These are my notes on NoSQL databases and the prime differences between them and SQL databases. The notes are mostly based off the Udemy course &lt;a href=&#34;https://www.udemy.com/introduction-to-mongodb/&#34; target=&#34;_blank&#34;&gt;Introduction to MongoDB&lt;/a&gt;, and therefore primarily focused on using MongoDB at the moment.&lt;/p&gt;

&lt;h3 id=&#34;methodology-and-tools&#34;&gt;Methodology and Tools&lt;/h3&gt;

&lt;h2 id=&#34;installing-mongodb&#34;&gt;Installing Mongodb&lt;/h2&gt;

&lt;p&gt;The instructions are available in the &lt;a href=&#34;https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/&#34; target=&#34;_blank&#34;&gt;mongoDB manual&lt;/a&gt;. This is for the Community edition, and on a Mac as welll as Linux machine (Antergos)&lt;/p&gt;

&lt;h3 id=&#34;mac&#34;&gt;Mac&lt;/h3&gt;

&lt;p&gt;If never installed before, tap the resource first.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap mongodb/brew
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Actual installation:
Note the version being specified. This could change in the future. It may be possible that specifying &lt;code&gt;mongodb-community&lt;/code&gt; along is sufficient to get the latest version, otherwise a specific version shellould be specified.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install mongodb-community@4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To know the packages available, a search could be performed using brew. However, the latest package 4.0 is not listed in the search.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew search mongodb-community
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;antergos--linux&#34;&gt;Antergos (Linux)&lt;/h3&gt;

&lt;p&gt;Mongodb and Compass are available in AUR. The development and beta versions of these packages are also available. &lt;em&gt;Note: the Arch wiki clearly states that the mongodb package builds from source and will take several hours to complete. The pre-compiled bin package is the better choice.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Searching for relevant Packages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yaourt -Ss mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Installing packages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yaourt -S mongodb-bin
yaourt -S mongodb-compass-community
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note that mongodb-compass does not install mongodb as a requirement or dependency. There also seem to be a lot of python 2 dependencies for mongodb. This can be viewed during the build process.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;configuration-files-and-paths&#34;&gt;Configuration files and paths&lt;/h3&gt;

&lt;p&gt;The following directories and files are created during the installation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the configuration file (/usr/local/etc/mongod.Conf)&lt;/li&gt;
&lt;li&gt;the log directory path (/usr/local/var/log/Mongodb)&lt;/li&gt;
&lt;li&gt;the data directory path (/usr/local/var/mongodb)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;running-mongodb&#34;&gt;Running mongoDB&lt;/h2&gt;

&lt;p&gt;It appears that the config file cannot be set without activating mongoDB as a service or a daemon first, the config file cannot be set.&lt;/p&gt;

&lt;p&gt;As a service via brew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew services start mongodb-community@4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting the configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongod --config /usr/local/etc/mongod.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check whether mongoDB is Running&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the above shows an error that the socket is already in use, which prevents mongodb from starting. I wonder if this is because of the earlier hugo server running at the same IP as specified in the config file.&lt;/p&gt;

&lt;p&gt;Perhaps a restart will help? This would not mean the process using the 27017 port woult magically stop.&lt;/p&gt;

&lt;p&gt;Error shell output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#+name: name2019-03-29T11:12:12.579-0600 I CONTROL  [main] Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols &#39;none&#39;
2019-03-29T11:12:12.590-0600 I CONTROL  [initandlisten] MongoDB starting : pid=7885 port=27017 dbpath=/data/db 64-bit host=Shreyass-MacBook-Pro-2.local
2019-03-29T11:12:12.590-0600 I CONTROL  [initandlisten] db version v4.0.7
2019-03-29T11:12:12.590-0600 I CONTROL  [initandlisten] git version: 1b82c812a9c0bbf6dc79d5400de9ea99e6ffa025
2019-03-29T11:12:12.590-0600 I CONTROL  [initandlisten] allocator: system
2019-03-29T11:12:12.590-0600 I CONTROL  [initandlisten] modules: none
2019-03-29T11:12:12.590-0600 I CONTROL  [initandlisten] build environment:
2019-03-29T11:12:12.590-0600 I CONTROL  [initandlisten]     distarch: x86_64
2019-03-29T11:12:12.590-0600 I CONTROL  [initandlisten]     target_arch: x86_64
2019-03-29T11:12:12.590-0600 I CONTROL  [initandlisten] options: {}
2019-03-29T11:12:12.591-0600 E STORAGE  [initandlisten] Failed to set up listener: SocketException: Address already in use
2019-03-29T11:12:12.611-0600 I CONTROL  [initandlisten] now exiting
2019-03-29T11:12:12.611-0600 I CONTROL  [initandlisten] shutting down with code:48
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One solution for this has been to change the port number while launching mongod Server. Since the port 2717 is busy, the subsequent (or an arbitrary) port number can be used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongod --port 27018
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This brought up a new error related to the path of the database. This can be seen below with dbpath = /data/db which does not exist.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;2019-03-29T21:01:31.704-0600 I CONTROL  [main] Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols &#39;none&#39;
2019-03-29T21:01:31.714-0600 I CONTROL  [initandlisten] MongoDB starting : pid=2791 port=27018 dbpath=/data/db 64-bit host=Shreyass-MacBook-Pro-2.local
2019-03-29T21:01:31.714-0600 I CONTROL  [initandlisten] db version v4.0.7
2019-03-29T21:01:31.714-0600 I CONTROL  [initandlisten] git version: 1b82c812a9c0bbf6dc79d5400de9ea99e6ffa025
2019-03-29T21:01:31.714-0600 I CONTROL  [initandlisten] allocator: system
2019-03-29T21:01:31.714-0600 I CONTROL  [initandlisten] modules: none
2019-03-29T21:01:31.714-0600 I CONTROL  [initandlisten] build environment:
2019-03-29T21:01:31.714-0600 I CONTROL  [initandlisten]     distarch: x86_64
2019-03-29T21:01:31.714-0600 I CONTROL  [initandlisten]     target_arch: x86_64
2019-03-29T21:01:31.714-0600 I CONTROL  [initandlisten] options: { net: { port: 27018 } }
2019-03-29T21:01:31.714-0600 I STORAGE  [initandlisten] exception in initAndListen: NonExistentPath: Data directory /data/db not found., terminating
2019-03-29T21:01:31.714-0600 I NETWORK  [initandlisten] shutdown: going to close listening sockets...
2019-03-29T21:01:31.741-0600 I NETWORK  [initandlisten] removing socket file: /tmp/mongodb-27018.sock
2019-03-29T21:01:31.741-0600 I CONTROL  [initandlisten] now exiting
2019-03-29T21:01:31.742-0600 I CONTROL  [initandlisten] shutting down with code:100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stack Overflow discussions indicate that there are atleast 2 possible ways to resolve this as shown below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create the /data/db folder and assign the user read and write permission for the same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo mkdir /data/db/
sudo chmod 600 /data/db
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start the mongod process in a specified directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongod --port 27018 --dbpath ~/temp/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have followed the latter approach to begin with, as the port number and path can always be changed.&lt;/p&gt;

&lt;h2 id=&#34;general-exploration-of-mongo-shell&#34;&gt;General exploration of mongo Shell&lt;/h2&gt;

&lt;p&gt;Type in &lt;code&gt;mongo&lt;/code&gt; in the terminal to enter the mongo shell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Showing a list of the available dbs. The admin, config and local dbs are created by default during installation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
show dbs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;use&lt;/code&gt; command can be employed to switch to db&amp;rsquo;s, or create dbs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
use test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Collection: similar to the concept of a bunch of tables in Sql. &lt;code&gt;db.createCollection(&#39;&amp;lt;name&amp;gt;&#39;)&lt;/code&gt;. Existing collections can be viewed with &lt;code&gt;show connections&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
use test
db.createCollection(&#39;test1&#39;)
show collections
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note that the name of the collection should be enclosed within single quotes and not double quotes.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;inserting-values-in-a-database-or-collection&#34;&gt;Inserting values in a Database or collection&lt;/h2&gt;

&lt;p&gt;The Insert method can be used to fill in entries that in a combination of keyword name pairs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
show dbs
db.user.insert({&#39;name&#39; : &#39;shreyas&#39;, &#39;height&#39;: 154})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding a few more users with a name and an Age.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
db.user.insert({&#39;name&#39;: &#39;joe&#39;, &#39;age&#39; : 22})
db.user.insert({&#39;name&#39;: &#39;sam&#39;, &#39;age&#39; : 56})
db.user.insert({&#39;name&#39;: &#39;siri&#39;, &#39;age&#39; : 87, &#39;height&#39; : 145})
db.user.insert({&#39;name&#39;: &#39;pitt&#39;, &#39;age&#39; : 60})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;manipulating-collections&#34;&gt;Manipulating collections&lt;/h2&gt;

&lt;p&gt;Listing all the entries in the &lt;code&gt;use&lt;/code&gt; collection can done with the find method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
db.user.find()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remove method to remove an Entry (document?)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
db.user.remove({&#39;name&#39; : &#39;joe&#39;})
db.user.find()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternate specification to remove age above 60&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
db.user.remove({&#39;age&#39; : 60})
db.user.find()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other than manually entering entries, there is no way to recover entries that are removed.&lt;/p&gt;

&lt;p&gt;If no arguments are specifiedd in remove, then all the collections are Removed, as shown below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
db.users.remove({})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;queries-using-find&#34;&gt;Queries using Find&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
show dbs
db.user.find()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Objectid is added by mongoDB. This is a unique key generated for each document.&lt;/p&gt;

&lt;p&gt;Grabbing just one user from the Collection/:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
db.user.find({&#39;name&#39;: &#39;sam&#39;})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Specifying a Condition, will match all the documents that match the condition specified&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
db.user.find({&amp;quot;name&amp;quot;:&amp;quot;siri&amp;quot;})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: 2 entries and object ID&amp;rsquo;s are being returned even when one document is present. This needs to be Checked.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Considering multiple search criterion. For example, not all the documents have the height parameter entered in. The &lt;code&gt;null&lt;/code&gt; parameter can be used to filter documents with empty attributes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
db.user.insert({&amp;quot;name&amp;quot;: &amp;quot;goldstone&amp;quot;, &amp;quot;age&amp;quot;: 50})
db.user.find({&#39;height&#39; : null})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finding documents or users with age greater than 40. &lt;code&gt;{$gt  : 40}&lt;/code&gt;. Similarly, use &lt;code&gt;$lt&lt;/code&gt; for lesser than.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
db.user.find({&#39;age&#39; : {$gt: 40}})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
db.user.find({&amp;quot;age&amp;quot;: {$lt : 60}})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updating-users-already-inserted-into-the-collection&#34;&gt;Updating users already inserted into the collection&lt;/h2&gt;

&lt;p&gt;Adding the height for Goldston, using &lt;code&gt;db.user.update()&lt;/code&gt;. The document to be updated has to be specified first, and then the updated entry has to be keyed in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
db.user.update({&amp;quot;name&amp;quot; : &amp;quot;goldstone&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;goldstone&amp;quot;, &amp;quot;height&amp;quot; : 167})
db.user.find({&amp;quot;name&amp;quot; : &amp;quot;goldstone&amp;quot;})
db.user.find({&amp;quot;height&amp;quot; : null})
db.user.update({&amp;quot;name&amp;quot; : &amp;quot;sam&amp;quot;}, {&amp;quot;name&amp;quot; : &amp;quot;sam&amp;quot;, &amp;quot;height&amp;quot; : 189})
db.user.find({&amp;quot;height&amp;quot; : null})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;data-types&#34;&gt;Data Types&lt;/h2&gt;

&lt;p&gt;String: enclosed within quotes.
Integer: Whole number. Can be positive, negative or zero.
Float: positive or negative. Does not have to be a whole number.
Boolean: true or false. Quotes are not to be used with Booleans, otherwise it would be converted to a string.&lt;/p&gt;

&lt;h2 id=&#34;primary-key&#34;&gt;Primary Key&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Unique for all documents in a collection&lt;/li&gt;
&lt;li&gt;Cannot have null values.&lt;/li&gt;
&lt;li&gt;Additional custom keys can be created and should be for easier filtering of the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;establishing-relationships&#34;&gt;Establishing Relationships&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;useful to create relationships between documents.&lt;/li&gt;
&lt;li&gt;One to one&lt;/li&gt;
&lt;li&gt;One to many&lt;/li&gt;
&lt;li&gt;many to one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example of one to many : where the same user id is the connecting property across multiple documents.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
use test2
db.createCollection(&amp;quot;one2onecoll1&amp;quot;)
db.createCollection(&amp;quot;one2onecoll2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
db.one2onecoll1.insert({
                          &amp;quot;user_id&amp;quot; : 3173,
                          &amp;quot;name&amp;quot; : &amp;quot;helen&amp;quot;,
                          &amp;quot;age&amp;quot; : 24})
db.one2onecoll1.insert({
                          &amp;quot;user_id&amp;quot; : 4545,
                          &amp;quot;name&amp;quot; : &amp;quot;jack&amp;quot;,
                          &amp;quot;age&amp;quot; : 45,
                      })

db.one2onecoll1.insert({
                          &amp;quot;user_id&amp;quot; : 67866,
                          &amp;quot;name&amp;quot; : &amp;quot;joe&amp;quot;,
                          &amp;quot;age&amp;quot; : 65,
                          &amp;quot;about&amp;quot; : &amp;quot;Lorem ipsum dolor sit amet&amp;quot;
                      })
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mongo
db.one2onecoll1.find()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;embedded-documents&#34;&gt;Embedded documents&lt;/h2&gt;

&lt;p&gt;Example of using arrays to establish Relationships. Example, a friend list in a social media network. Similarly, blog posts or comments can be stored as a list of parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;quot;_id&amp;quot; : ObjectID(&amp;quot;Sdinaskdas123fds&amp;quot;),
&amp;quot;name&amp;quot; : &amp;quot;Lydia&amp;quot;,
&amp;quot;user_id&amp;quot; : 78787
&amp;quot;friend_ids&amp;quot; : [ 6767, 78788, 99899, 12109 ]

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;embedded-documents-versus-collections&#34;&gt;Embedded documents versus collections&lt;/h2&gt;

&lt;p&gt;This depends on the data characteristics and should be designed such that all the necessary data could be accessed with a single query.&lt;/p&gt;

&lt;p&gt;Thinking Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook: Homepage is accessing only a specific amount of information.&lt;/li&gt;
&lt;li&gt;Reddit: Comments are not loaded unless the post is opened. So the comments could be stored as separate documents, so they are not loaded only when the posts are loaded.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Think about how to mimimise the unnecessary loading of data.&lt;/p&gt;

&lt;h2 id=&#34;mongodb-compass&#34;&gt;MongoDB compass&lt;/h2&gt;

&lt;p&gt;MongoDB compass is a GUI for MongoDB. It helps with the visualisation of data. &lt;a href=&#34;https://www.mongodb.com/download-center/compass?jmp=hero&#34; target=&#34;_blank&#34;&gt;Download link&lt;/a&gt;. &lt;em&gt;Note: the community edition should be downloaded&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Depending on the setup, the mongod (daemon?) has to be successfully running so that compass can connect to that instance.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>quotes</title>
      <link>https://shreyas.ragavan.co/docs/quotes/</link>
      <pubDate>Fri, 15 Mar 2019 11:43:00 -0600</pubDate>
      <guid>https://shreyas.ragavan.co/docs/quotes/</guid>
      <description>

&lt;h2 id=&#34;i-never-made-one-of-my-discoveries-through-the-process-of-rational-thinking-albert-einstein&#34;&gt;“I never made one of my discoveries through the process of rational thinking” ― &lt;code&gt;Albert Einstein&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;to-be-fully-alive-fully-human-and-completely-awake-is-to-be-continually-thrown-out-of-the-nest-dot-to-live-fully-is-to-be-always-in-no-man-s-land-to-experience-each-moment-as-completely-new-and-fresh-dot-to-live-is-to-be-willing-to-die-over-and-over-again-dot-pema-chödrön-when-things-fall-apart-heart-advice-for-difficult-times&#34;&gt;“To be fully alive, fully human, and completely awake is to be continually thrown out of the nest. To live fully is to be always in no-man’s-land, to experience each moment as completely new and fresh. To live is to be willing to die over and over again. ” ― &lt;code&gt;Pema Chödrön, When Things Fall Apart: Heart Advice for Difficult Times&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;perfectionism-can-t-survive-unless-it-is-fed-with-the-oxygen-of-indulgence-and-paranoia-and-irrationality-dot-link&#34;&gt;Perfectionism can’t survive unless it is fed with the oxygen of indulgence and paranoia and irrationality. &lt;a href=&#34;https://humanparts.medium.com/why-is-everyone-succeeding-but-me-29186494166b&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;creativity-like-human-life-itself-begins-in-darkness-dot-julia-cameron-the-artist-s-way&#34;&gt;“Creativity — like human life itself — begins in darkness.”— &lt;code&gt;Julia Cameron, The Artist’s Way&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;the-best-way-out-is-always-through-dot-robert-frost&#34;&gt;“The best way out is always through.” — &lt;code&gt;Robert Frost&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;if-you-plan-on-being-anything-less-than-you-are-capable-of-being-you-will-probably-be-unhappy-all-the-days-of-your-life-dot-abraham-maslow&#34;&gt;“If you plan on being anything less than you are capable of being, you will probably be unhappy all the days of your life.” ― &lt;code&gt;Abraham Maslow&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;success-is-going-from-failure-to-failure-without-losing-enthusiasm-dot-winston-churchill&#34;&gt;&amp;ldquo;Success is going from failure to failure without losing enthusiasm.&amp;rdquo; - &lt;code&gt;Winston Churchill&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;a-man-who-dares-to-waste-an-hour-of-time-has-not-discovered-the-value-of-his-life-dot-charles-darwin&#34;&gt;“A man who dares to waste an hour of time has not discovered the value of his life.”  —  &lt;code&gt;Charles Darwin&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;a-goal-without-a-plan-is-just-a-pipe-dream&#34;&gt;&amp;ldquo;A goal without a plan is just a pipe dream&amp;rdquo;&lt;/h2&gt;

&lt;h2 id=&#34;i-have-no-responsibility-to-live-up-to-what-others-expect-of-me-dot-that-s-their-mistake-not-my-failing-dot-richard-feynman&#34;&gt;&amp;ldquo;I have no responsibility to live up to what others expect of me. That&amp;rsquo;s their mistake, not my failing.&amp;rdquo; &amp;ndash; &lt;code&gt;Richard Feynman&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;you-just-can-t-differentiate-between-a-robot-and-the-very-best-of-humans-isaac-asimov&#34;&gt;&amp;ldquo;You just can&amp;rsquo;t differentiate between a robot and the very best of humans&amp;rdquo; - &lt;code&gt;Isaac Asimov&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;nobody-succeeds-beyond-his-or-her-wildest-expectations-unless-he-or-she-begins-with-some-wild-expectations-dot-ralph-charell&#34;&gt;“Nobody succeeds beyond his or her wildest expectations unless he or she begins with some wild expectations.” - &lt;code&gt;Ralph Charell&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;be-a-philosopher-but-amidst-all-your-philosophy-be-still-a-man-dot-david-hume-an-enquiry-concerning-human-understanding&#34;&gt;&amp;ldquo;Be a philosopher; but, amidst all your philosophy, be still a man.” - &lt;code&gt;David Hume, An enquiry concerning human understanding&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;make-your-interests-gradually-wider-and-more-impersonal-until-bit-by-bit-the-walls-of-the-ego-recede-and-your-life-becomes-increasingly-merged-in-the-universal-life-dot-bertrand-russell&#34;&gt;&amp;ldquo;Make your interests gradually wider and more impersonal, until bit by bit the walls of the ego recede, and your life becomes increasingly merged in the universal life.&amp;rdquo; - &lt;code&gt;Bertrand Russell&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;i-don-t-like-that-man-dot-i-must-get-to-know-him-better-dot-abraham-lincoln&#34;&gt;“I don&amp;rsquo;t like that man. I must get to know him better.” - &lt;code&gt;Abraham Lincoln&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;always-remember-that-to-argue-and-win-is-to-break-down-the-reality-of-the-person-you-are-arguing-against-dot-it-is-painful-to-lose-your-reality-so-be-kind-even-if-you-are-right-dot-haruki-murakami&#34;&gt;“Always remember that to argue, and win, is to break down the reality of the person you are arguing against. It is painful to lose your reality, so be kind, even if you are right.” - &lt;code&gt;Haruki Murakami&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;when-i-write-i-feel-like-an-armless-legless-man-with-a-crayon-in-my-mouth-dot-kurt-vonnegut&#34;&gt;When I write, I feel like an armless legless man with a crayon in my mouth. - &lt;code&gt;Kurt Vonnegut&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;life-is-too-short-to-not-read-the-very-best-book-you-know-of-right-now-dot-patrick-collison-founder-of-stripe&#34;&gt;&amp;ldquo;Life is too short to not read the very best book you know of right now.&amp;rdquo; -  &lt;code&gt;Patrick Collison, Founder of Stripe&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;when-you-have-exhausted-all-possibilities-remember-this-you-haven-t-thomas-edison&#34;&gt;&amp;ldquo;When you have exhausted all possibilities, remember this - you haven&amp;rsquo;t&amp;rdquo; - &lt;code&gt;Thomas Edison&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;knowledge-has-to-be-improved-challenged-and-increased-constantly-or-it-vanishes-dot-dr-dot-peter-drucker&#34;&gt;“Knowledge has to be improved, challenged, and increased constantly, or it vanishes.” — &lt;code&gt;Dr.Peter Drucker&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;you-take-away-our-top-20-employees-and-we-become-a-mediocre-company-bill-gates&#34;&gt;&amp;ldquo;You take away our top 20 employees and we become a mediocre company&amp;rdquo; - &lt;code&gt;Bill Gates&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;it-took-me-thirty-years-to-draw-that-masterpiece-in-thirty-seconds-dot-pablo-picasso&#34;&gt;“It took me thirty years to draw that masterpiece in thirty seconds.” - &lt;code&gt;Pablo Picasso&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&#34;inspiration-is-for-amateurs-dot-the-rest-of-us-just-show-up-and-get-to-work-dot-chuck-close&#34;&gt;Inspiration is for amateurs. The rest of us just show up and get to work. - &lt;code&gt;Chuck Close&lt;/code&gt;&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>
