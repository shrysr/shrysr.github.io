<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shreyas Ragavan on Shreyas Ragavan</title>
    <link>https://shrysr.github.io/</link>
    <description>Recent content in Shreyas Ragavan on Shreyas Ragavan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 -0600</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using ESS for Datascience</title>
      <link>https://shrysr.github.io/docs/ess-datascience-r/</link>
      <pubDate>Fri, 15 Mar 2019 11:43:00 -0600</pubDate>
      
      <guid>https://shrysr.github.io/docs/ess-datascience-r/</guid>
      <description>

&lt;p&gt;RStudio is a formidable IDE to work with and offers an environment to seamlessly work with multiple languages beyond R. It is especially convenient for tasks involving frequent visualisation of data frames and plots, and for use with Shiny app development.&lt;/p&gt;

&lt;p&gt;However, the text (i.e code) editing capabalities are still significantly lacking compared to the likes of Emacs and Vim. Besides this, it does not offer a seamless interface integrating task, time management and multi-language programming environments to the extent available within Org-mode via Emacs. Enter ESS !&lt;/p&gt;

&lt;p&gt;This is an evolving document of how I use ESS  and will be a useful guide to anybody starting out with ESS especially for R based workflows. My ESS configuration is mostly available in my Dotemacs documentation. However this is a deeper dive into ESS workflows for data science projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Emacs Speaks Statistics (ESS) is an add-on package for GNU Emacs. It is designed to support editing of scripts and interaction with various statistical analysis programs such as R, S-Plus, SAS, Stata and OpenBUGS/JAGS. Although all users of these statistical analysis programs are welcome to apply ESS, advanced users or professionals who regularly work with text-based statistical analysis scripts, with various statistical languages/programs, or with different operating systems might benefit from it the most.&lt;/p&gt;

&lt;p&gt;The rationale for developing ESS is that most statistical analysis systems provide a more or less sophisticated graphical user interface (GUI). However, their full power is only available using their scripting language. Furthermore, complex statistical analysis projects require a high degree of automation and documentation which can only be handled by creating statistical analysis scripts. Unfortunately, many statistics packages provide only weak text editor functionality and show major differences between them. Without a unified text editor user interface additional effort is required from the user to cope with limited functionality and with text editor differences.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ess.r-project.org/&#34; target=&#34;_blank&#34;&gt;ESS website&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://ess.r-project.org/index.php?Section=documentation&amp;amp;subSection=manuals&#34; target=&#34;_blank&#34;&gt;Different versions of the ESS manual&lt;/a&gt; are available online and it is worth a frequent read to aid familiarisation with the commands and features available. The ESS mailing list is also worth subscribing to.&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;While it seems that ESS is reasonably popular, it was surprising to find relatively few examples of configurations on the web. The &lt;a href=&#34;https://www.emacswiki.org/emacs/EmacsSpeaksStatistics&#34; target=&#34;_blank&#34;&gt;Emacs ESS wikipage&lt;/a&gt; and &lt;a href=&#34;https://emacs.readthedocs.io/en/latest/ess%5F%5Femacs%5Fspeaks%5Fstatistics.html&#34; target=&#34;_blank&#34;&gt;Yi Tang&amp;rsquo;s Emacs configuration&lt;/a&gt; are among the few useful resources I&amp;rsquo;ve been able to find.&lt;/p&gt;

&lt;h2 id=&#34;starting-a-new-project&#34;&gt;Starting a new project&lt;/h2&gt;

&lt;p&gt;Typically, I start with a fresh Org-mode document for a new project in a repository of its own. This is as easy as &lt;code&gt;M-x nb-new&lt;/code&gt; in Scimax. This initialises a new git repository in the designated projects folder. Currently, I have each such project as a submodule of the main project repo.&lt;/p&gt;

&lt;p&gt;It may seem convenient to include libraries and a variety of other customisations in the .Rrofile startup. However, as mentioned in the initial comments of this &lt;a href=&#34;https://stackoverflow.com/questions/1189759/expert-r-users-whats-in-your-rprofile&#34; target=&#34;_blank&#34;&gt;SO Discussion&lt;/a&gt;, in the interest of reproducibility - it is better to have a script run commands at the beginning of each session. Alternately, one could use a package like YASnippet to insert snippets of frequently used code.&lt;/p&gt;

&lt;h2 id=&#34;org-documents-for-literate-programming&#34;&gt;Org documents for literate programming&lt;/h2&gt;

&lt;p&gt;Being a fan of literate programming, my code is usually embedded into Org-babel source blocks in line with the explanations or analysis.&lt;/p&gt;

&lt;p&gt;For longer projects, I often define a Yasnippet extension for the source code blocks specifying a unique session name to cater to that project. This prevents mixing up of variables and environments between projects as I switch, and I can search and insert snippets with the handy &lt;code&gt;ivy-yasnippet&lt;/code&gt; package that allows previews of snippets before insertion.&lt;/p&gt;

&lt;p&gt;Typically, I enter the major mode from the Org-Babel source block (&lt;code&gt;C-c &#39;&lt;/code&gt; inside a source block) to enable access to mode specific features like command completion, variable access and so on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is worth noting that when entering a major mode from a source block, the correct or desired ESS process has to be attached, especially if you are simultaneously using multiple sessions. This can be done with the &lt;code&gt;C-c C-s&lt;/code&gt; command after entering the major mode buffer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;frequently-used-ess-commands&#34;&gt;Frequently used ESS commands&lt;/h2&gt;

&lt;p&gt;Though there are many commands available - the ones listed below are worth noting. Going through the ESS manual is definitely worth the effort to understand detailed descriptions of these commands. Another simple way to search for commands within ESS is using the &lt;code&gt;M-x&lt;/code&gt; command and type in &amp;lsquo;ess&amp;rsquo; to view the commands available.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;M-p&lt;/code&gt;, &lt;code&gt;M-n&lt;/code&gt; : Previous and next command in comint input history.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-r&lt;/code&gt;      : Regex search of input history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-x&lt;/code&gt;  : List of objects in the environment. Prepend &lt;code&gt;C-u&lt;/code&gt; to print to console. Note that it is possible to list commands of libraries by prepending numbers to &lt;code&gt;C-c C-x&lt;/code&gt;. The default prefix is the global environment, which is a prefix of 1, i.e &lt;code&gt;C-1 C-c C-x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-v&lt;/code&gt;  : Help at point.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-q&lt;/code&gt;  : Ess-quit. This is important to use when exiting an R session. Using this makes sure that temporary buffers are quit. Such buffers can pile up very easily as you use the help documentation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-z&lt;/code&gt;  : Switch between the R script and the process buffer. This is a nifty feature especially when when using&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-M-x&lt;/code&gt;    : Sends the current selected region or function or paragraph.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-d v&lt;/code&gt;: (ess-display-vignettes) this is a handy method to browse all the available vignettes. This opens up a buffer, which contains links to vignettes in multiple formats (PDF, Rmd, Rnw). Note that the vignettes of a newsly installed package is loaded only after being loaded with the library function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-e w&lt;/code&gt; : Resizing the display to adapt to a buffer that has changed dimension. i.e if I split the R terminal buffer which changes it&amp;rsquo;s size - this command will enable the output to be better adjusted to the buffer size and thus enable better readability.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;window-configuration&#34;&gt;Window configuration&lt;/h2&gt;

&lt;p&gt;The ESS manual has a helpful snippet if you prefer your window arrangement similar to Rstudio&amp;rsquo;s, which is quite sensible as such. The width values can be modified as required.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq display-buffer-alist
      &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*R Dired&amp;#34;&lt;/span&gt;
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; right)
         (slot &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)
         (window-width &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.33&lt;/span&gt;)
         (reusable-frames &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*R&amp;#34;&lt;/span&gt;
         (display-buffer-reuse-window display-buffer-at-bottom)
         (window-width &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.35&lt;/span&gt;)
         (reusable-frames &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*Help&amp;#34;&lt;/span&gt;
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; right)
         (slot &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
         (window-width &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.33&lt;/span&gt;)
         (reusable-frames &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;rmarkdown-polymode&#34;&gt;Rmarkdown : Polymode&lt;/h2&gt;

&lt;p&gt;Polymode makes it easy to work with Rmd, Rnw, Snw format documents within Emacs. The only configuration necessary for this Is&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;poly-markdown&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;poly-R&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; MARKDOWN&lt;/span&gt;
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;auto-mode-alist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\.md&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; poly-markdown-mode))

&lt;span style=&#34;color:#75715e&#34;&gt;;; R modes&lt;/span&gt;
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;auto-mode-alist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\.Snw&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; poly-noweb+r-mode))
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;auto-mode-alist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\.Rnw&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; poly-noweb+r-mode))
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;auto-mode-alist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\.Rmd&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; poly-markdown+r-mode))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;exporting&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Exporting&lt;/h2&gt;

&lt;p&gt;When sharing documents, it is necessary to convert to a format non-Emacs users can user. My current approach is to use &lt;code&gt;ox-ipynb&lt;/code&gt; package to export to as a jupyter notebook, and then the excellent jupytext package to convert to Rmd.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Incremental improvements can lead to significant gains</title>
      <link>https://shrysr.github.io/post/32266f09-c9b9-48ff-9c48-e2348eeda33d/</link>
      <pubDate>Sat, 19 Jan 2019 19:33:00 -0700</pubDate>
      
      <guid>https://shrysr.github.io/post/32266f09-c9b9-48ff-9c48-e2348eeda33d/</guid>
      <description>&lt;p&gt;While reading the book &lt;a href=&#34;https://jamesclear.com/atomic-habits&#34; target=&#34;_blank&#34;&gt;Atomic Habits by James Clear&lt;/a&gt;, I was reflecting that my choice of embracing &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34; target=&#34;_blank&#34;&gt;Emacs&lt;/a&gt; and progressively gaining mastery over it was intimately connected with the philosophy preached in the book.&lt;/p&gt;

&lt;p&gt;My efforts initially started out with a craving for a system to quantify and manage my tasks, habits, notes, blog writing, job applications and projects in a custom environment, and to be able to build toolkits of code to perform repetitive tasks. As mentioned in an &lt;a href=&#34;../2b0b2c79-3f6e-4079-a07d-9e382fda8954&#34;&gt;earlier blog post&lt;/a&gt;
, I tried several approaches before settling on Emacs. The idea was to find or create a single system to track everything of importance in my life (with ease and efficiency). This was instead of a fragmented approach of using multiple tools and techniques, for example, Sublime Text / Atom as a text editor and &lt;a href=&#34;https://todoist.com/?lang=en&#34; target=&#34;_blank&#34;&gt;Todoist&lt;/a&gt; as a task management tool.&lt;/p&gt;

&lt;p&gt;I started with a vanilla configuration of Emacs and painstakingly borrowed (and eventually) modified lisp snippets to implement desired &amp;lsquo;features&amp;rsquo; or behaviors. It was a just a couple of features every week, initially focused on Org mode&amp;rsquo;s behavior alone. That was nearly 3 years ago. As of now, I am able to manage my blog [hugo], view my email [mu4e], browse the web [w3m], seamlessly capture notes / ideas / tasks from (almost) anywhere [Org mode], chat on IRC, build multi-language code notebooks with ease [Org babel]. All the above provide me significant advantages in speed and efficiency which still have plenty of potential to improve.&lt;/p&gt;

&lt;p&gt;Sure, I certainly appear closer to my goal today.. however, I did not know if it was a pipe dream when I started out. It was often extremely frustrating, right from memorizing the &amp;lsquo;crazy&amp;rsquo; keybindings in Emacs, to struggling with getting a lisp snippet to work as expected.&lt;/p&gt;

&lt;p&gt;Choosing Emacs had unexpected rewards as well. For example, the need of synchronizing my notes and Emacs configuration with multiple machines led me to Git. &lt;a href=&#34;https://magit.vc/&#34; target=&#34;_blank&#34;&gt;Magit&amp;rsquo;s&lt;/a&gt; easily accessible commands and relatively visual interface has been a massive help in getting things done with Git, despite not having any deep technical knowledge of how Git works.&lt;/p&gt;

&lt;p&gt;My journey with Emacs is testament that an incremental, compounding improvement over time can ultimately result in significant gains. It is also important to acknowledge that I am standing on the shoulder of giants and the awesome &lt;a href=&#34;https://github.com/jkitchin/scimax&#34; target=&#34;_blank&#34;&gt;Scimax&lt;/a&gt; is a cornerstone in my toolkit.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nteract : An interactive computing environment</title>
      <link>https://shrysr.github.io/post/a642fab6-6704-4e57-9f97-43e7dd8d9caa/</link>
      <pubDate>Sat, 19 Jan 2019 19:30:00 -0700</pubDate>
      
      <guid>https://shrysr.github.io/post/a642fab6-6704-4e57-9f97-43e7dd8d9caa/</guid>
      <description>&lt;p&gt;A &lt;a href=&#34;https://slides.com/villetuulos/human-centric-machine-learning-infrastructure-qcon-2018/#/&#34; target=&#34;_blank&#34;&gt;slide deck from Netflix&lt;/a&gt;, mentions using Nteract as their programming notebook, and prompted a mini exploration.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&#34;https://moderndata.plot.ly/nteract-revolutionizing-notebook-experience/&#34; target=&#34;_blank&#34;&gt;blog post by Safia Abdalla&lt;/a&gt;, (a maintainer/ developer of Nteract) introduces Nteract as an open source, desktop-based, interactive computing application that was designed to overcome a bunch of limitations in Jupyter Notebook&amp;rsquo;s design philosophy. One key difference (among many others) is the ability to execute code in a variety of languages within a single notebook, and it also appears that that the electron based desktop app should make it easier for beginners to start coding.&lt;/p&gt;

&lt;p&gt;Along similar lines, this &lt;a href=&#34;https://blog.nteract.io/nteract-building-on-top-of-jupyter-9cfbccdd4c1d&#34; target=&#34;_blank&#34;&gt;blog post&lt;/a&gt; is a nice primer to the evolution of Ipython, Jupyter Notebooks and Nteract, from the plain vanilla Python console, which was the starting point. Beyond the illuminating definition that the Jupyter notebook is an &amp;lsquo;establishment of well-defined protocols and formats&amp;rsquo;, and is not just a console or a programming notebook, the blog post provides a deeper insight into how these protocols are implemented and communicate with interpreters or Jupyter kernels.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&#34;https://www.reddit.com/r/Python/comments/6w1zh3/nteract%5Fvs%5Fjupyter%5Fnotebook/&#34; target=&#34;_blank&#34;&gt;reddit discussion&lt;/a&gt; has a few interesting pros and cons regarding using nteract.&lt;/p&gt;

&lt;p&gt;While I can see the value of computing notebooks like Jupyter and Nteract, I do think that these do not come close to the functionality and ease that can be achieved with Org mode and Emacs, which have been in existence a lot longer. I was able to intuitively transition to using multiple language code &amp;lsquo;notebooks&amp;rsquo; using Org mode. This &lt;a href=&#34;https://news.ycombinator.com/item?id=11296843&#34; target=&#34;_blank&#34;&gt;reddit thread&lt;/a&gt; and &lt;a href=&#34;https://lepisma.github.io/2016/11/02/org-babel/&#34; target=&#34;_blank&#34;&gt;blog post&lt;/a&gt; elucidate the advantages of using Babel and Org mode over Jupyter notebooks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Technical notes : Research paper on learning/teaching data science</title>
      <link>https://shrysr.github.io/post/44d30b28-0de8-4211-afad-18fe22323bf3/</link>
      <pubDate>Sat, 19 Jan 2019 19:30:00 -0700</pubDate>
      
      <guid>https://shrysr.github.io/post/44d30b28-0de8-4211-afad-18fe22323bf3/</guid>
      <description>&lt;p&gt;Title: Navigating Diverse Data Science Learning: Critical Reflections Towards Future Practice&lt;/p&gt;

&lt;p&gt;Author: Yehia Elkhatib&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://arxiv.org/pdf/1807.03750v1.pdf&#34; target=&#34;_blank&#34;&gt;Download link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This are my notes on the above paper, which mainly deals with detailing the methods explored and implemented to impart a high quality of education in data science. The paper also provides an interesting breakup of the different roles in data science workflows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The importance of being able to work in a team is highlighted. Working in isolation for a data scientist almost renders the results meaningless.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Considering the typically diverse backgrounds of DS practitioners, it is difficult to devise a curriculum that caters to everybody. This factor is certainly critical to consider before taking up any formal university courses. I would not want to spend a great deal of time and money in learning obsolete techniques or technologies.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There are differences in learning rates based on the background, and past academic environments. In particular, most students do not seem to realize that the best learning takes place in a &amp;lsquo;social&amp;rsquo; manner. Besides addressing the above, several aspects of effective learning and aligning the curriculum and teaching methodology to the typical industrial workflows are explored in this paper.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The literature references of past studies and research would certainly make interesting reads. However, they are more relevant to those in the teaching line. An interesting approach would be to read between the lines to extract the best practices for students to learn rapidly and effectively. However, there are many direct resources and techniques to approach the latter.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DS Roles :- Core.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Janitor&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;data cleaning, pre-processing&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scout&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;EDA, early insights&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Analyst&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;identifying patterns, initial hypothesis, evidence of unforeseen narratives)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decision&lt;/strong&gt; &lt;strong&gt;Builder&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;automate decision making, ML, DL&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Curator&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;storage formats across interfaces, data governance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineer&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Manage the interface between development and production products, efficiency and reliability of data interaction.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Auxiliary roles : these roles come into the picture as the DS team grows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Domain specialist&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;data significance, sources of bias&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Infrastructure manager&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;support to build and operate, beyond the data engineer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Communicator&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Communicating explanatory and confirmatory analyses, setting up systems to interact with the audiences outside the DS team&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Facilitator&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;A/B experiments, additional support to the communicator.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Notes from the movie Whiplash</title>
      <link>https://shrysr.github.io/post/5fc69e19-e330-4dd9-9317-7280a9c93966/</link>
      <pubDate>Sat, 19 Jan 2019 19:37:00 -0700</pubDate>
      
      <guid>https://shrysr.github.io/post/5fc69e19-e330-4dd9-9317-7280a9c93966/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/Whiplash%5F%25282014%5Ffilm%2529&#34; target=&#34;_blank&#34;&gt;Whiplash: Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whiplash is a fascinating movie on many levels regarding a topic that interests me deeply&amp;hellip; How to progressively perform, and strive to become the very best in a chosen field. Personally, I found each step of the movie riveting and would recommend it to anybody who would find the above question even mildly interesting. The movie&amp;rsquo;s climax  was immensely interesting, inspiring and supported by great acting.  At any rate, the movie induced a blog post !&lt;/p&gt;

&lt;p&gt;The story revolves around the mind and life of a student who wants to be among the greats in his field, and the way he deals with an abrasive, abusive and unorthodox teacher whose intentions are to bring out the best in a student. No movie is perfect - while some points in Whiplash do appear extreme and therefore relatively unrealistic - the overriding message and theme conveyed certainly rings out clearly, in an engaging plot.&lt;/p&gt;

&lt;p&gt;I could relate to the following pointers from the movie:&lt;/p&gt;

&lt;h2 id=&#34;leverage-stress-to-achieve-new-levels-of-insight-and-performance&#34;&gt;Leverage stress to achieve new levels of insight and performance&lt;/h2&gt;

&lt;p&gt;The belief of the teacher, that the best performance or attributes hidden inside a person can come out only via repeated, unexpected and  stressful prodding. I&amp;rsquo;m not sure if this works as shown in the movie, but I have found unexpected insights at times of extreme stress, that have were taken forward to habits that changed my life.&lt;/p&gt;

&lt;h2 id=&#34;weathering-criticism&#34;&gt;Weathering criticism&lt;/h2&gt;

&lt;p&gt;The mental conditioning required to weather and beat intense, sharp,
depressing criticism along with verbal and physical abuse from a
mentor or teacher and use the same as a motive force for
self-improvement and eventually superlative performance. Though there
are examples of extreme abrasiveness in leaders like Steve Jobs - such
an approach would not be tolerated by most people today.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I know other stories of people working under such mentors,
striving to learn and gain their approval and eventually winning
the same. These efforts paid off by resulting in skills, thinking
patterns and a superior mental conditioning. Finding such a mentor
at the formative stage is probably the best thing to happen to
anybody.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An effective strategy to find mentors is to shadow people on Linked in and learn from their profiles and activity. Some of them may be willing to connect and invest time in mentoring.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Another possibility to find like minded people and mentors would be to join the communities of on-line courses, like Datacamp and Dataquest, who have lively channels in Slack for paid members.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;getting-back-up-after-a-fall&#34;&gt;Getting back up after a fall&lt;/h2&gt;

&lt;p&gt;Everybody breaks. Just as the promising student in Whiplash
breaks. But the champions among us rally, to stage a comeback and
performance that make history.&lt;/p&gt;

&lt;p&gt;Regularly surpassing the level of deliberate knowledge of your own performance, and thus improvement by exactly being able to measure your performance and pinpoint mistakes. This point is portrayed in a very interesting manner in Whiplash, where the teacher expects the student to know exactly what mistake is being made.&lt;/p&gt;

&lt;h2 id=&#34;be-great-not-good&#34;&gt;Be Great, not Good&lt;/h2&gt;

&lt;p&gt;Rejecting the &amp;lsquo;Good&amp;rsquo; or &amp;lsquo;Good enough&amp;rsquo; feedback from anybody. The goal is to be &lt;em&gt;Great&lt;/em&gt;, not good. The goal should be to strive to set the precedent and not just follow a beaten track. The pinpoint focus should be on progressive improvement to become the best, and that entails never being satisfied and to be ruthless in rooting out flaws.&lt;/p&gt;

&lt;h2 id=&#34;achieving-balance-mind-body-surroundings&#34;&gt;Achieving Balance : mind + body + surroundings&lt;/h2&gt;

&lt;p&gt;Great performance is about that perfect balance between the body, mind and environment to leverage the best result possible. I view the scene where the student survives a car crash, just to reach a performance and then not being able to perform, as a good example of overreaching, without strengthening the core, and thus inviting instability.&lt;/p&gt;

&lt;h2 id=&#34;go-off-the-beaten-track-and-lose-yourself&#34;&gt;Go off the beaten track and Lose yourself&lt;/h2&gt;

&lt;p&gt;It was the ending of Whiplash that truly drove me to comprehend the points so far. It is twisted, unexpected and led me to truly enjoy the movie and appreciate that: despite the above points being reasonably discernible - the human mind and nature is exceedingly complex. Stability and reasoning are not the only keystones to the foundation of greatness. There has to be a &lt;em&gt;healthy&lt;/em&gt; mix of some form of abnormal obsession thrown in, to make a stellar performance what it is. However, can this be practically repeated on a regular basis?&lt;/p&gt;

&lt;h2 id=&#34;learning-velocity-and-flow&#34;&gt;Learning velocity and Flow&lt;/h2&gt;

&lt;p&gt;There are several bodies of research work available today that can be studied to get closer to consciously stimulating a great performance. One such example is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://unmistakablecreative.com/podcast/unlocking-the-talent-code-with-dan-coyle&#34; target=&#34;_blank&#34;&gt;Unlocking the Talent Code With Dan Coyle&lt;/a&gt; on the Unmistakable
Creatives podcast provides an insight in line with the points seen
above, into what constitute outliers and performers. The interesting
concept of &amp;lsquo;Learning velocity&amp;rsquo; is explained by Dan with a lucid
example. It is surmised that progress and maximum learning to become
better occurs &lt;em&gt;at&lt;/em&gt; the boundary line dividing what we know at the
moment, and the unknown skills that beckon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That point sems to be an amalgamation of several factors, that are typically present when someone is in &amp;lsquo;flow&amp;rsquo;. Perhaps this flow can be described as a heightened sense of what is, and what should be and the energy to strive and achieve what should be.. It certainly does feel logical to think that we become better by pushing that boundary.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Literate Programming - Emacs, Howard Abrams and Library of Babel</title>
      <link>https://shrysr.github.io/post/6953c104-a8b3-4779-aad3-c33032beb111/</link>
      <pubDate>Sat, 19 Jan 2019 19:25:00 -0700</pubDate>
      
      <guid>https://shrysr.github.io/post/6953c104-a8b3-4779-aad3-c33032beb111/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m an admirer of &lt;a href=&#34;https://www.linkedin.com/in/howardeabrams/&#34; target=&#34;_blank&#34;&gt;Howard Abrams&lt;/a&gt;, especially because his posts and videos show the awesome power of doing things in Emacs, and the importance of writing clean and logical code. Watching his videos and reading his posts make me feel like I was born yesterday and I am just getting started. But more importantly, they also fire up my imagination regarding the possibilities out there and the potential to create glorious workflows.&lt;/p&gt;

&lt;p&gt;Howard&amp;rsquo;s tutorial on &lt;a href=&#34;//www.howardism.org/Technical/Emacs/literate-programming-tutorial.html&#34; target=&#34;_blank&#34;&gt;Literate Programming&lt;/a&gt;, combined with his &lt;a href=&#34;https://www.youtube.com/watch?v=dljNabciEGg&#34; target=&#34;_blank&#34;&gt;Literate Devops with Emacs video&lt;/a&gt; are among the best ways to get started with understanding the power of using Org Mode and Org-Babel to create complex, inter-connected, multi-language programs / documents / research that are of course well documented (this being one basic tenet of literate programming). Essentially, Org Mode and Org-Babel enable a high quality programming environment in a single Org mode buffer or document. The said environment is significantly more feature rich compared to Jupyter notebooks, especially being supported by it&amp;rsquo;s foundation in Emacs.&lt;/p&gt;

&lt;p&gt;Though I&amp;rsquo;ve been using Org files for a while now for all my programming explorations, I&amp;rsquo;ve been bothered about my sub-par workflows. I could not easily reference other code blocks and snippets and recipes for a new document or project. It was inefficient and time consuming to locate the necessary snippet and re-write or re-paste the code in the new source blocks. I was not making much progress plodding through the vast documentation of org-babel.&lt;/p&gt;

&lt;p&gt;Therefore, I was thrilled to discover the &lt;a href=&#34;https://orgmode.org/worg/org-contrib/babel/library-of-babel.html&#34; target=&#34;_blank&#34;&gt;Library of Babel&lt;/a&gt; through Howard&amp;rsquo;s tutorial, which can be used to add files to a global library that is accessible from anywhere! Did I mention that it involves hitting barely 3 keys, and any number of arguments can be passed to these source blocks? I&amp;rsquo;m not sure such a feature is available with any other IDE.&lt;/p&gt;

&lt;p&gt;In addition, the above tutorial clearly elucidates how different languages can be combined together, and the video elucidates typical Devops procedures, which are easily taken care of with appropriate arguments and headers to the source code blocks. For example, all the source code blocks could be tangled into appropriately named and located script files using a single argument. These tutorials tied up bits and pieces of info in my head from various sources and was invaluable in enhancing my understanding of using Emacs and Org-Babel&lt;/p&gt;

&lt;p&gt;The Library of Babel can be made persistent across sessions by loading a specified org-file from which the named source code blocks are automatically read in. It is surprising that the internet does not seem to contain more references and examples using the Library of Babel. Perhaps there are some caveats that I am yet to encounter. One question that arises is whether the Library of Babel is automatically updated when the source code block is updated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Emacs &#43; Scimax configuration</title>
      <link>https://shrysr.github.io/docs/sr-config/</link>
      <pubDate>Tue, 09 Apr 2019 15:49:48 -0600</pubDate>
      
      <guid>https://shrysr.github.io/docs/sr-config/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This is my literate, Org-mode based configuration for Emacs, which are essentially customisations built on top of the starter-kit Scimax. View a nicely rendered version with easy navigation &lt;a href=&#34;https://shrysr.github.io/docs/sr-config/&#34; target=&#34;_blank&#34;&gt;on my website&lt;/a&gt;, or if you prefer: &lt;a href=&#34;https://github.com/shrysr/dotemacs&#34; target=&#34;_blank&#34;&gt;on github&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scimax - Awesome editing for scientists and engineers. Scimax is an Emacs starterkit for scientists and engineers. It provides a comprehensive configuration of Emacs for scientific programming and publishing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jkitchin&#34; target=&#34;_blank&#34;&gt;John Kitchin&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Scimax specific variables have their own heading to make it &amp;lsquo;easier&amp;rsquo; to experiment with other starter-kits.&lt;/p&gt;

&lt;p&gt;The style of documentation is particularly influenced by the &lt;a href=&#34;https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org&#34; target=&#34;_blank&#34;&gt;dotemacs config&lt;/a&gt; of &lt;a href=&#34;https://github.com/angrybacon&#34; target=&#34;_blank&#34;&gt;Mathieu Marques&lt;/a&gt;, which I found very engaging to read.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The configuration posted on my website and github repo are updated from time to time, and may be older than the version I am using everyday.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;this-configuration&#34;&gt;This configuration&lt;/h2&gt;

&lt;p&gt;Scimax&amp;rsquo;s init calls the &lt;code&gt;user.el&lt;/code&gt; script placed in the user folder. The following snippet is placed in &lt;code&gt;user.el&lt;/code&gt; to load this org file and then my encrypted personal configuration. This org file and the tangled emacs-lisp script is also available in a &lt;a href=&#34;https://github.com/shrysr/dotemacs&#34; target=&#34;_blank&#34;&gt;github repo&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Adding some external packages like reveal for presentations&lt;/span&gt;
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;load-path&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/external_packages/&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Loading this file that you are viewing, which I name sr-config.org&lt;/span&gt;
(org-babel-load-file (&lt;span style=&#34;color:#a6e22e&#34;&gt;expand-file-name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sr-config.org&amp;#34;&lt;/span&gt; user-emacs-directory))

&lt;span style=&#34;color:#75715e&#34;&gt;;; Loading secret config containing personal information&lt;/span&gt;
(org-babel-load-file (&lt;span style=&#34;color:#a6e22e&#34;&gt;expand-file-name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sr-secrets.org.gpg&amp;#34;&lt;/span&gt; user-emacs-directory))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;garbage-collect&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;using-this-configuration&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Using this configuration&lt;/h4&gt;

&lt;p&gt;You may need to set &lt;code&gt;:tangle no&lt;/code&gt; in the headers for the code snippets that you do not need, and set the location of directories for org files, org agenda etc.&lt;/p&gt;

&lt;p&gt;A bunch these scripts are not tangled and kept for testing or reference purposes. The tangled &lt;code&gt;config.el&lt;/code&gt; contains the actual configuration that I use.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Method 1&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone Scimax&lt;/li&gt;
&lt;li&gt;Add the above snippet to &lt;code&gt;user.el&lt;/code&gt; in the user directory. Update the file name and paths as required.&lt;/li&gt;
&lt;li&gt;Place this org file in the user directory.&lt;/li&gt;
&lt;li&gt;Run the provided script for installing the packages needed for Scimax. Once that is done, &lt;code&gt;user.el&lt;/code&gt; will call this org file.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Method 2&lt;/p&gt;

&lt;p&gt;Pick up snippets that you like from the &lt;code&gt;config.el&lt;/code&gt; file, which is tangled from this org file, and only includes the snippets that I actually use.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;other-literate-emacs-configs&#34;&gt;Other literate Emacs configs&lt;/h2&gt;

&lt;p&gt;These references were used for exploration and inspiration.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://karl-voit.at/2017/06/03/emacs-org/&#34; target=&#34;_blank&#34;&gt;Karl Voit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org&#34; target=&#34;_blank&#34;&gt;Mathieu Marques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://writequit.org/org/&#34; target=&#34;_blank&#34;&gt;Lee Hinman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pages.sachachua.com/.emacs.d/Sacha.html&#34; target=&#34;_blank&#34;&gt;Sacha Chua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Bernt Hansen&amp;rsquo;s very detailed Org-mode config&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;tangle-org-mode-config-on-save&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Tangle org mode config on save&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-14 Thu 13:14] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Need to add a condition of check: tangle if the file does not exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://thewanderingcoder.com/2015/02/literate-emacs-configuration/&#34; target=&#34;_blank&#34;&gt;https://thewanderingcoder.com/2015/02/literate-emacs-configuration/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a nice code snippet to automate the tangling on saving the config. This saves time while starting up Emacs&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun sr/tangle-on-save-emacs-config-org-file()
  (interactive)
  (if (string= &lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-file-name&lt;/span&gt; (file-truename &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/sr-config.org&amp;#34;&lt;/span&gt;))
      (org-babel-tangle-file  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/sr-config.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/sr-config.el&amp;#34;&lt;/span&gt;)
    )
  )

(defun sr/tangle-if-file-absent ()
  (interactive)
  (if &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;file-exists-p&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/sr-config.el&amp;#34;&lt;/span&gt;)
    (org-babel-tangle-file  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/sr-config.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/sr-config.el&amp;#34;&lt;/span&gt;)
    )
  )
&lt;span style=&#34;color:#75715e&#34;&gt;;; (add-hook &amp;#39;after-save-hook &amp;#39;sr/dotemacs-export)&lt;/span&gt;
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;after-save-hook&lt;/span&gt;
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sr/tangle-on-save-emacs-config-org-file&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;os-level-variables&#34;&gt;OS Level variables &lt;code&gt;[0/0]&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Since I switch between a Linux machine and a Mac frequently, it is better to define variables that can be used to set other variables depending on the OS.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Get current system&amp;#39;s name&lt;/span&gt;
(defun insert-system-name()
  (interactive)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get current system&amp;#39;s name&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;system-name&lt;/span&gt;))
  )

&lt;span style=&#34;color:#75715e&#34;&gt;;; Get current system type&lt;/span&gt;
(defun insert-system-type()
  (interactive)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get current system type&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt; system-type))
  )

&lt;span style=&#34;color:#75715e&#34;&gt;;; Check if system is Darwin/Mac OS X&lt;/span&gt;
(defun system-type-is-darwin ()
  (interactive)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Return true if system is darwin-based (Mac OS X)&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;string-equal&lt;/span&gt; system-type &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;darwin&amp;#34;&lt;/span&gt;)
  )

&lt;span style=&#34;color:#75715e&#34;&gt;;; Check if system is GNU/Linux&lt;/span&gt;
(defun system-type-is-gnu ()
  (interactive)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Return true if system is GNU/Linux-based&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;string-equal&lt;/span&gt; system-type &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gnu/linux&amp;#34;&lt;/span&gt;)
  )
(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Completed OS Level variables load&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;pdf-tools&#34;&gt;PDF Tools&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-18 Mon 14:30] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Install epdfinfo via &amp;lsquo;brew install pdf-tools&amp;rsquo; and then install the
pdf-tools elisp via the use-package below. To upgrade the epdfinfo
server, use &amp;lsquo;brew upgrade pdf-tools&amp;rsquo; prior to upgrading to newest
pdf-tools package using Emacs package system. If things get messed up,
just do &amp;lsquo;brew uninstall pdf-tools&amp;rsquo;, wipe out the elpa pdf-tools
package and reinstall both as at the start.  source:
&lt;a href=&#34;https://emacs.stackexchange.com/questions/13314/install-pdf-tools-on-emacs-macosx&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/13314/install-pdf-tools-on-emacs-macosx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package pdf-tools
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (custom-set-variables
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(pdf-tools-handle-upgrades &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; Use brew upgrade pdf-tools instead in the mac&lt;/span&gt;
  (setq pdf-info-epdfinfo-program &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/bin/epdfinfo&amp;#34;&lt;/span&gt;)
  (pdf-tools-install)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;better-defaults&#34;&gt;Better defaults&lt;/h2&gt;

&lt;p&gt;I need to explore the changed made by this package. For now, it is loaded right in the beginning so that it does not overwrite other customisations down the line.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package better-defaults
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loaded better-defaults package&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;crypto-setup&#34;&gt;Crypto setup&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq epa-file-encrypt-to &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shreyas@fastmail.com&amp;#34;&lt;/span&gt;))
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-crypt&lt;/span&gt;)
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-modules&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-crypt&lt;/span&gt;)
                                        &lt;span style=&#34;color:#75715e&#34;&gt;; Encrypt all entries before saving&lt;/span&gt;
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crypt&amp;#34;&lt;/span&gt;)))
                                        &lt;span style=&#34;color:#75715e&#34;&gt;; GPG key to use for encryption. nil for symmetric encryption&lt;/span&gt;
(setq org-crypt-key &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
(setq org-crypt-disable-auto-save &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(setq org-crypt-tag-matcher &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;locked&amp;#34;&lt;/span&gt;)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loaded crypto setup&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;github-token-access&#34;&gt;github token access&lt;/h3&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://emacs.stackexchange.com/questions/40994/using-auth-source-with-magit-and-bitbucket&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/40994/using-auth-source-with-magit-and-bitbucket&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fill the out the following details before executing the script. Machine can be found be executing &amp;lsquo;hostname&amp;rsquo; in shell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat &amp;gt; ~/.gh.authinfo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;machine shrysr@github.com password ABCD
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;M-x epa-encrypt-file&lt;/code&gt; and point towards the above file and choose your key. This will generate the .gpg file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq auth-sources &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((:source &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/.my.authinfo.gpg&amp;#34;&lt;/span&gt;)))
(setq magit-process-find-password-functions &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(magit-process-password-auth-source))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;emacs-general-config&#34;&gt;Emacs General config&lt;/h2&gt;

&lt;h3 id=&#34;remove-trailing-whitespace-at-the-end-of-lines&#34;&gt;Remove trailing whitespace at the end of lines&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;before-save-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;delete-trailing-whitespace&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;remove-at-the-start-of-ivy-commands&#34;&gt;Remove &amp;lsquo;^&amp;rsquo; at the start of ivy commands&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq ivy-initial-inputs-alist &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;package-installation&#34;&gt;Package installation&lt;/h3&gt;

&lt;h4 id=&#34;package-list&#34;&gt;Package list&lt;/h4&gt;

&lt;p&gt;Though the use-package approach is a lot more elegant, I also like to have a list of all my installed packages. In any case, this is more in line with my earlier configurations. As things evolve, I will probably shift completely to the use-package method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq package-list &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(diminish
                     ztree
                     org-gcal
                     w3m
                     org-trello
                     org-web-tools
                     auto-indent-mode
                     ob-sql-mode
                     dash
                     org-super-agenda
                     workgroups2
                     switch-window
                     ess
                     ess-R-data-view
                     interleave
                     deft
                     org-bookmark-heading
                     writeroom-mode
                     evil
                     evil-leader
                     polymode
                     poly-R
                     helm-ag
                     writegood-mode
                     artbollocks-mode
                     multiple-cursors
                     ox-reveal
                     better-defaults
                     jedi jedi-core
                     ag ein
                     ein-mumamo
                     ido-vertical-mode
                     company-jedi
                     conda
                     spacemacs-theme
                     elfeed-goodies
                     helpful
                     browse-kill-ring
                     ivy-yasnippet
                     speed-type
                     clojure-mode
                     cider
                     helm-dash
                     org-projectile
                     bash-completion
                     elmacro
                     helm-org-rifle
                     sx define-word))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;fetch-and-install-missing-packages&#34;&gt;Fetch and install missing packages&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;fetch the list of packages available&lt;/span&gt;
(unless package-archive-contents
  (package-refresh-contents))

&lt;span style=&#34;color:#75715e&#34;&gt;;; install the missing packages&lt;/span&gt;
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;switch-window-configuration&#34;&gt;Switch-window configuration&lt;/h3&gt;

&lt;p&gt;Source link: &lt;a href=&#34;https://github.com/dimitri/switch-window&#34; target=&#34;_blank&#34;&gt;https://github.com/dimitri/switch-window&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package switch-window
  :config
  &lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;

  (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;switch-window&lt;/span&gt;)

  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x o&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;switch-window&lt;/span&gt;)
  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x 1&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;switch-window-then-maximize&lt;/span&gt;)
  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x 2&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;switch-window-then-split-below&lt;/span&gt;)
  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x 3&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;switch-window-then-split-right&lt;/span&gt;)
  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x 0&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;switch-window-then-delete&lt;/span&gt;)

  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x 4 d&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;switch-window-then-dired&lt;/span&gt;)
  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x 4 f&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;switch-window-then-find-file&lt;/span&gt;)
  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x 4 m&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;switch-window-then-compose-mail&lt;/span&gt;)
  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x 4 r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;switch-window-then-find-file-read-only&lt;/span&gt;)

  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x 4 C-f&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;switch-window-then-find-file&lt;/span&gt;)
  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x 4 C-o&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;switch-window-then-display-buffer&lt;/span&gt;)

  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x 4 0&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;switch-window-then-kill-buffer&lt;/span&gt;)

  &lt;span style=&#34;color:#75715e&#34;&gt;;; selecting minibuffer&lt;/span&gt;
  (setq switch-window-minibuffer-shortcut &lt;span style=&#34;color:#e6db74&#34;&gt;?z&lt;/span&gt;)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;create-intermediate-directories-while-saving-files&#34;&gt;Create intermediate directories while saving files&lt;/h3&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://superuser.com/questions/131538/can-i-create-directories-that-dont-exist-while-creating-a-new-file-in-emacs&#34; target=&#34;_blank&#34;&gt;https://superuser.com/questions/131538/can-i-create-directories-that-dont-exist-while-creating-a-new-file-in-emacs&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defadvice find-file (before make-directory-maybe (filename &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; wildcards) activate)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Create parent directory if not exists while visiting file.&amp;#34;&lt;/span&gt;
  (unless (&lt;span style=&#34;color:#a6e22e&#34;&gt;file-exists-p&lt;/span&gt; filename)
    (let ((dir (&lt;span style=&#34;color:#a6e22e&#34;&gt;file-name-directory&lt;/span&gt; filename)))
      (unless (&lt;span style=&#34;color:#a6e22e&#34;&gt;file-exists-p&lt;/span&gt; dir)
        (make-directory dir)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;shortcuts-and-registers&#34;&gt;Shortcuts and registers&lt;/h3&gt;

&lt;h4 id=&#34;registers&#34;&gt;Registers&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(set-register &lt;span style=&#34;color:#e6db74&#34;&gt;?n&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/notes.org&amp;#34;&lt;/span&gt;))
(set-register &lt;span style=&#34;color:#e6db74&#34;&gt;?l&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/application_letters/letter.md&amp;#34;&lt;/span&gt;))
(set-register &lt;span style=&#34;color:#e6db74&#34;&gt;?k&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/application_letters/Cover_letter_Shreyas_R.pdf&amp;#34;&lt;/span&gt;))
(set-register &lt;span style=&#34;color:#e6db74&#34;&gt;?p&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/org_cv/CV_Shreyas_Ragavan.pdf&amp;#34;&lt;/span&gt;))
(set-register &lt;span style=&#34;color:#e6db74&#34;&gt;?r&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/org_cv/CV_Shreyas_Ragavan.org&amp;#34;&lt;/span&gt;))
(set-register &lt;span style=&#34;color:#e6db74&#34;&gt;?t&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/todo-global.org&amp;#34;&lt;/span&gt;))
(set-register &lt;span style=&#34;color:#e6db74&#34;&gt;?i&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/dotemacs/.emacs.d/new-init.org&amp;#34;&lt;/span&gt;))
(set-register &lt;span style=&#34;color:#e6db74&#34;&gt;?j&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/mrps_canjs.org&amp;#34;&lt;/span&gt;))
(set-register &lt;span style=&#34;color:#e6db74&#34;&gt;?f&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/sr-cust/&amp;#34;&lt;/span&gt;))
(set-register &lt;span style=&#34;color:#e6db74&#34;&gt;?d&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/datascience.org&amp;#34;&lt;/span&gt;))
(set-register &lt;span style=&#34;color:#e6db74&#34;&gt;?m&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/&amp;#34;&lt;/span&gt;))
(set-register &lt;span style=&#34;color:#e6db74&#34;&gt;?g&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_gits/&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;google-this&#34;&gt;Google this&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-s g&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;google-this-mode-submap&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;ivy-yasnippet&#34;&gt;ivy-yasnippet&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-s i&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ivy-yasnippet&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;mu4e-related&#34;&gt;Mu4e related&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-s u&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mu4e-update-mail-and-index&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-s m&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mu4e~headers-jump-to-maildir&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x m&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mu4e-compose-new&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;org-related&#34;&gt;Org related&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x t&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-insert-todo-heading&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c d&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-time-stamp&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-s s&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-save-all-org-buffers&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-s j&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-journal-new-entry&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;shortcuts-for-punching-in-and-out&#34;&gt;Shortcuts for punching in and Out&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-&amp;lt;f9&amp;gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sr/punch-in&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-&amp;lt;f9&amp;gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sr/punch-out&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;shortcuts-for-org-brain&#34;&gt;Shortcuts for org-Brain&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-s v&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-brain-visualize&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-s r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-brain-refile&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;setting-the-super-and-hyper-key&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Setting the super and hyper Key&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(if system-name-is-darwin
    (progn
      (setq mac-right-command-modifier &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hyper&lt;/span&gt;)
      (setq mac-right-option-modifier &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;super&lt;/span&gt;)
      )
  )

(if system-name-is-gnu
    (progn
      (setq right-command-)
      )
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;yanking-links-in-org-format&#34;&gt;yanking links in org format&lt;/h3&gt;

&lt;p&gt;Source: sacha chua.&lt;/p&gt;

&lt;p&gt;Enables inserting a URL into an org document as &amp;lsquo;[&lt;URL&gt;][link]&amp;rsquo; by tapping F6 after copying the URL. This is useful to reduce clutter with long links, and even include links in headings.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun my/yank-more ()
  (interactive)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[[&amp;#34;&lt;/span&gt;)
  (yank)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;][link]]&amp;#34;&lt;/span&gt;))
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f6&amp;gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my/yank-more&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;export-setup&#34;&gt;Export setup&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ox-org&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ox-word&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ox-md&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/ox-ipynb/ox-ipynb.el&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;markdown-config&#34;&gt;Markdown config&lt;/h3&gt;

&lt;p&gt;Setting pandoc as the markdown command for live previews. The default command is &lt;code&gt;markdown&lt;/code&gt;, which could be installed as a separate package.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq markdown-command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pandoc&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;org-bookmark-heading&#34;&gt;org-bookmark-heading&lt;/h3&gt;

&lt;p&gt;For some reason, the default bookmark behavior in org mode is that the bookmark is not linked to the org-id. This means that if the heading is shifted somewhere, the bookmark becomes useless! The remedy seems to be using the package org-bookmark-Heading&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package org-bookmark-heading
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :defer &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-bookmark-heading&lt;/span&gt;)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;export-async&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Export async&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-14 Thu 16:03] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This requires a separate init file to be setup that enables Emacs to launch a separate process to export large files. It would be better as a vanilla emacs file.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-export-async-init-file
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expand-file-name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;async-export.el&amp;#34;&lt;/span&gt; user-emacs-directory)
      )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ob-async&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Ob-async&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-14 Thu 16:02] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This should enable evaluating code in org babel source blocks asynchronously. The header in the source block should have the async enabled.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package ob-async
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;marking&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Marking&lt;/h3&gt;

&lt;p&gt;I want a way to efficiently mark a location in a long script and jump around these locations (forward and backwards). The &lt;code&gt;transient-mark-mode&lt;/code&gt; and the different mark-rings need to be leveraged to do accomplish this. First step is to set a mark using &lt;code&gt;C-spc C-spc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Adopting the approach described at &lt;a href=&#34;https://masteringemacs.org/article/fixing-mark-commands-transient-mark-mode&#34; target=&#34;_blank&#34;&gt;Mastering Emacs&lt;/a&gt;. This enables a single key for a mark to activate and then deactivate, thus creating a mark.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun push-mark-no-activate ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pushes &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`point&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; to &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`mark-ring&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; and does not activate the region
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled&amp;#34;&lt;/span&gt;
  (interactive)
  (push-mark (&lt;span style=&#34;color:#a6e22e&#34;&gt;point&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pushed mark to ring&amp;#34;&lt;/span&gt;))

(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-`&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;push-mark-no-activate&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;tmm-menu&lt;/code&gt; command&amp;rsquo;s shortcut &lt;code&gt;M-`&lt;/code&gt; is much better served by &lt;code&gt;M-x counsel-tmm&lt;/code&gt; where search is possible.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun jump-to-mark ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jumps to the local mark, respecting the &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`mark-ring&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; order.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  This is the same as using \\[set-mark-command] with the prefix argument.&amp;#34;&lt;/span&gt;
  (interactive)
  (set-mark-command &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-`&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jump-to-mark&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;semantic-mode&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Semantic Mode&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Semantic is a package that provides language-aware editing commands based on &amp;lsquo;source-code parsers&amp;rsquo;. When enabled, each file you visit is automatically parsed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tuhdo.github.io/helm-intro.html&#34; target=&#34;_blank&#34;&gt;https://tuhdo.github.io/helm-intro.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(semantic-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;completed-loading-message&#34;&gt;Completed loading message&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loaded Emacs general config&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;//* TODO Crux  - basic movement&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://jamiecollinson.com/blog/my-emacs-config/&#34; target=&#34;_blank&#34;&gt;https://jamiecollinson.com/blog/my-emacs-config/&lt;/a&gt;
Contains functions from  Prelude. I should check this out in more detail.&lt;/p&gt;

&lt;p&gt;Set C-a to move to the first non-whitespace character on a line, and then to toggle between that and the beginning of the line.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package crux
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :bind ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; crux-move-beginning-of-line)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;dired&#34;&gt;Dired&lt;/h2&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org&#34; target=&#34;_blank&#34;&gt;https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package dired
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
  :delight dired-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dired&amp;#34;&lt;/span&gt;
  :preface
  (defun me/dired-directories-first ()
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sort dired listings with directories first before adding marks.&amp;#34;&lt;/span&gt;
    (save-excursion
      (let (buffer-read-only)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;forward-line&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
        (sort-regexp-fields &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^.*$&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[ ]*.&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;point&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;point-max&lt;/span&gt;)))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;set-buffer-modified-p&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)))
  &lt;span style=&#34;color:#75715e&#34;&gt;;:hook ;(dired-mode . dired-hide-details-mode)&lt;/span&gt;
  :config
  (advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dired-readin&lt;/span&gt; :after &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;me/dired-directories-first)
  (setq-default
   dired-auto-revert-buffer &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
   dired-dwim-target &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
   dired-hide-details-hide-symlink-targets &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
   dired-listing-switches &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-alh&amp;#34;&lt;/span&gt;
   dired-ls-F-marks-symlinks &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
   dired-recursive-copies &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;always&lt;/span&gt;))

(use-package dired-x
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
  :preface
  (defun me/dired-revert-after-command (command &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; output &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;)
    (revert-buffer))
  :config
  (advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dired-smart-shell-command&lt;/span&gt; :after &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;me/dired-revert-after-command))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loaded Dired customisation&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;swiper&#34;&gt;Swiper&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 16:50] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
I use swiper for a general search. However &lt;a href=&#34;#helm-swoop&#34;&gt;helm-swoop&lt;/a&gt; is awesome.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-s&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;swiper&lt;/span&gt;)
(setq ivy-display-style &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fancy&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; advise swiper to recenter on exit&lt;/span&gt;
(defun bjm-swiper-recenter (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; args)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;recenter display after swiper&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;recenter&lt;/span&gt;)
  )
(advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;swiper&lt;/span&gt; :after &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;bjm-swiper-recenter)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loaded Swiper customisation&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;easier-selection&#34;&gt;Easier selection&lt;/h2&gt;

&lt;h3 id=&#34;expand-region&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Expand region&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:27]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Explore how this works&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package expand-region
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :bind (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; er/expand-region))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loaded easier selection&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;git-related&#34;&gt;git related&lt;/h2&gt;

&lt;h3 id=&#34;git-gutter&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Git gutter&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:30]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Started using this today. It is actually very convenient to quickly view the changes made in the document. There is a function to pop up the changes at that location. I need to learn more about using this tool effectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package git-gutter
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (global-git-gutter-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t&lt;/span&gt;)
  :diminish git-gutter-mode)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;magit-settings&#34;&gt;magit settings&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq magit-revert-buffers &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;silent&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;time-machine-for-git&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Time machine for git&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-08 Fri 13:21] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Launched by &lt;code&gt;M-x git-timemachine&lt;/code&gt;, this lets you navigate through the commit history with a single key press! This is especially awesome for tracking changes to a particular snippet of code.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:30]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to evaluate this. The purpose is for stepping through the history of a file recorded in git. This should be very interesting.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package git-timemachine
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;completed-loading-message-1&#34;&gt;Completed loading message&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loaded git related config&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;writeroom-customisations&#34;&gt;Writeroom customisations&lt;/h2&gt;

&lt;p&gt;The goal is to enable a customised zen writing mode, especially facilitating blog posts and other longer forms of writing. As of now, there are customisations for the width, and calling the art-bollocks mode when writeroom mode is enabled.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(with-eval-after-load &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;writeroom-mode&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; writeroom-mode-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-s-,&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;writeroom-decrease-width)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; writeroom-mode-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-s-.&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;writeroom-increase-width)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; writeroom-mode-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-s-=&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;writeroom-adjust-width))

(advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text-scale-adjust&lt;/span&gt; :after
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;visual-fill-column-adjust)

&lt;span style=&#34;color:#75715e&#34;&gt;;;  loading artbollocks whenever the writeroom mode is called in particular.&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;autoload&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;artbollocks-mode&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;artbollocks-mode&amp;#34;&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;writeroom-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;artbollocks-mode&lt;/span&gt;)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loaded writeroom customisations&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ess-configuration&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; ESS configuration &lt;code&gt;[0/0]&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-19 Tue 10:14] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Using the tabviewer application for Antergos.&lt;a href=&#34;https://bbs.archlinux.org/viewtopic.php?id=156295&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-09 Sat 12:36] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Set this up with use-package and explore further customisations. As of now, I use yasnippet to insert commonly used operators like the assign and pipe operators.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;main-configuration&#34;&gt;Main configuration&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package ess
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :defer &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ess&lt;/span&gt;)
  (setq ess-describe-at-point-method &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
  (setq ess-switch-to-end-of-proc-buffer &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (setq ess-rutils-keys &lt;span style=&#34;color:#ae81ff&#34;&gt;+1&lt;/span&gt;)
  (setq ess-eval-visibly &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nil&lt;/span&gt;)
  (setq ess-use-flymake &lt;span style=&#34;color:#ae81ff&#34;&gt;+1&lt;/span&gt;)
  (setq ess-use-company &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (setq ess-history-file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/.Rhistory&amp;#34;&lt;/span&gt;)
  (setq ess-use-ido &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (setq ess-roxy-hide-show-p &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;;;(speedbar-add-supported-extension &amp;#34;.R&amp;#34;)&lt;/span&gt;
  (setq comint-scroll-to-bottom-on-input &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (setq comint-scroll-to-bottom-on-output &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (setq comint-move-point-for-output &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  )

&lt;span style=&#34;color:#75715e&#34;&gt;;;(require &amp;#39;ess-R-data-view)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;(require &amp;#39;ess-rutils)&lt;/span&gt;

(use-package ess-view
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :defer &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (if (system-type-is-darwin)
      (setq ess-view--spreadsheet-program
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Applications/Tad.app/Contents/MacOS/Tad&amp;#34;&lt;/span&gt;
            )
    )
  (if (system-type-is-gnu)
      (setq ess-view--spreadsheet-program
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tabview&amp;#34;&lt;/span&gt;
            )
    )
  )


(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loaded ESS configuration&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ess-buffer-display-config&#34;&gt;ESS Buffer display Config&lt;/h3&gt;

&lt;p&gt;Setting buffer display setting for ESS, similar to Rstudio. This is taken from the ESS Manual. This seems most convenient as of now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq display-buffer-alist
      &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*R Dired&amp;#34;&lt;/span&gt;
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; right)
         (slot &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)
         (window-width &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.33&lt;/span&gt;)
         (reusable-frames &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*R&amp;#34;&lt;/span&gt;
         (display-buffer-reuse-window display-buffer-at-bottom)
         (window-width &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.35&lt;/span&gt;)
         (reusable-frames &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*Help&amp;#34;&lt;/span&gt;
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; right)
         (slot &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
         (window-width &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.33&lt;/span&gt;)
         (reusable-frames &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;icicles&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Icicles&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-28 Thu 16:01] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The default key bindings of icicles changes the org source block edit shortcut. However, the package appears very interesting so far, if not a bit slow to respond. Switching over to icicles will need some research for making sure none of the existing keybindings and workflows are crippled. This package cannot be installed via Melpa. The easiest method appears to be to download the files as a zip folder from the &lt;a href=&#34;https://github.com/emacsmirror/icicles&#34; target=&#34;_blank&#34;&gt;icicle git repository&lt;/a&gt;. The automatic install script draws files from the Emacs wiki, which at times may be down. As such icicles can be switched off by using &lt;code&gt;M-x icy-mode&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/external_packages/icicles-install.el&amp;#34;&lt;/span&gt;)
(setq icicle-download-dir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/external_packages/icicle_packages/&amp;#34;&lt;/span&gt;)
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;load-path&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/external_packages/icicle_packages/&amp;#34;&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;icicles&lt;/span&gt;)
(icy-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;lintr&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; lintr&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-11 Mon 07:21] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
It appears there is no package called lintr. This needs further investigation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This package is deemed necessary to enable flymake in ESS. Without it, there is significantly more lag while the suggestions / corrections are generated in ESS modes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package lintr
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;multiple-cursors&#34;&gt;Multiple Cursors&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package multiple-cursors
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-S-c C-S-c&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mc/edit-lines&lt;/span&gt;)
  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-&amp;gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mc/mark-next-like-this&lt;/span&gt;)
  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-&amp;lt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mc/mark-previous-like-this&lt;/span&gt;)
  (global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c C-&amp;lt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mc/mark-all-like-this&lt;/span&gt;)
  )

(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loaded MC&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ox-reveal-presentations&#34;&gt;ox-reveal - presentations&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package ox-reveal
  :ensure ox-reveal
  :defer &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (setq org-reveal-root &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://cdn.jsdelivr.net/reveal.js/3.0.0/&amp;#34;&lt;/span&gt;)
  (setq org-reveal-mathjax &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  )

(use-package htmlize
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loaded ox-reveal cust&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;org-mode-related&#34;&gt;Org-mode related&lt;/h2&gt;

&lt;h3 id=&#34;default-org-directory-and-setting-it-as-the-agenda-file-directory&#34;&gt;Default org directory and setting it as the agenda file directory&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq
 org-directory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/&amp;#34;&lt;/span&gt;
 org-agenda-files &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/&amp;#34;&lt;/span&gt;)
 )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;org-notes-into-log-drawer&#34;&gt;Org-notes into log drawer&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve been inserting org notes into the body of the text, since I do not make extensive use of the log book in the agenda and prefer active time stamped notes and the org-journal and org-projectile to take down &amp;lsquo;linked&amp;rsquo; log notes. However, I would like the notes to be inserted after any properties drawers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-log-state-notes-insert-after-drawers &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(setq org-log-redeadline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;time&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;enabling-org-capture-and-org-protocol&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Enabling org capture and org protocol&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:55]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to actually get org-capture via external browser protocol working. Not sure if I need to require org-capture in scimax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://www.diegoberrocal.com/blog/2015/08/19/org-protocol/&#34; target=&#34;_blank&#34;&gt;http://www.diegoberrocal.com/blog/2015/08/19/org-protocol/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-capture&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-protocol&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ensuring-archive-files-are-also-in-org-mode&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Ensuring archive files are also in org mode&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:31]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
check whether the add-to-list function is sufficient.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;find-file-hooks&lt;/span&gt;
          (lambda ()
            (let ((file (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-file-name&lt;/span&gt;)))
              (when (and file (&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;file-name-directory&lt;/span&gt; file) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/archive/&amp;#34;&lt;/span&gt;))
                (org-mode)))))

(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;auto-mode-alist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\.org_archive\\&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; org-mode))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;archiving-mechanics&#34;&gt;Archiving mechanics&lt;/h3&gt;

&lt;p&gt;Archive organised by Top level headings in the original file and with Tag preservation&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun my-org-inherited-no-file-tags ()
  (let ((tags (org-entry-get &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ALLTAGS&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;selective&lt;/span&gt;))
        (ltags (org-entry-get &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TAGS&amp;#34;&lt;/span&gt;)))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapc&lt;/span&gt; (lambda (tag)
            (setq tags
                  (replace-regexp-in-string (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; tag &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; tags)))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt; org-file-tags (when ltags (split-string ltags &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))))
    (if (string= &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; tags) &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; tags)))

(defadvice org-archive-subtree (around my-org-archive-subtree-low-level activate)
  (let ((tags (my-org-inherited-no-file-tags))
        (org-archive-location
         (if (save-excursion (org-back-to-heading)
                             (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;gt;&lt;/span&gt; (org-outline-level) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;car&lt;/span&gt; (split-string org-archive-location &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;::&amp;#34;&lt;/span&gt;))
                     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;::* &amp;#34;&lt;/span&gt;
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;car&lt;/span&gt; (org-get-outline-path)))
           org-archive-location)))
    ad-do-it
    (with-current-buffer (find-file-noselect (org-extract-archive-file))
      (save-excursion
        (while (org-up-heading-safe))
        (org-set-tags-to tags)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;org-id&#34;&gt;org-id&lt;/h3&gt;

&lt;p&gt;Using the org-id for reference to headings ensures that even if the heading changes, the links will still work.&lt;/p&gt;

&lt;p&gt;In addition, I would like an org id to be created every time the capture is used. This facilitates using packages like org-brain which rely extensively on org-id&amp;rsquo;s.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-id-method (quote uuidgen))
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-capture-prepare-finalize-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-id-get-create&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;setting-custom-keywords-with-fast-access&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Setting custom keywords with fast access&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 12:19] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This requires a complete reload of org to come in effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-todo-keywords
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((sequence &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TODO(t)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NEXT(n)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CANCEL(c)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POSTPONED(p)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DONE(d)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;STABLE(s)&amp;#34;&lt;/span&gt;)
        (sequence &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TEST(T)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BUG(b)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KNOWNCAUSE(k)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FIXED(f)&amp;#34;&lt;/span&gt;)
        (sequence &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt; )))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;cosmetics-for-org&#34;&gt;Cosmetics for org&lt;/h3&gt;

&lt;h3 id=&#34;refiling-settings&#34;&gt;Refiling settings&lt;/h3&gt;

&lt;h4 id=&#34;refile-target-level-for-search&#34;&gt;Refile target level for search&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-refile-targets
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; :maxlevel &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
        (org-agenda-files :maxlevel &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;general-refile-settings&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; General refile settings&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:33]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Needs further review and optimisation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-refile-use-outline-path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&lt;/span&gt;)
(setq org-outline-path-complete-in-steps &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
(setq org-reverse-note-order &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(setq org-refile-allow-creating-parent-nodes &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;confirm&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;also-refer-refiling-hydra--refiling&#34;&gt;&lt;a href=&#34;#refiling&#34;&gt;Also refer Refiling hydra&lt;/a&gt;&lt;/h4&gt;

&lt;h3 id=&#34;agenda-mechanics&#34;&gt;Agenda mechanics&lt;/h3&gt;

&lt;h4 id=&#34;weekday-starts-on-monday&#34;&gt;Weekday starts on Monday&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-agenda-start-on-weekday &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;display-heading-tags-farther-to-the-right&#34;&gt;Display heading tags farther to the right&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-agenda-tags-column &lt;span style=&#34;color:#ae81ff&#34;&gt;-150&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;agenda-customisation&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Agenda customisation&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:26]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to clear up the search functions, enabling complete search in journal files. Archive and some external directories are included, since they are explictly in org mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-agenda-custom-commands
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Simple agenda view&amp;#34;&lt;/span&gt;
         ((tags &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;recurr&amp;#34;&lt;/span&gt;
		((org-agenda-overriding-header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Recurring Tasks&amp;#34;&lt;/span&gt;)))
          (agenda &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
          (todo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)))
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt; agenda &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Office mode&amp;#34;&lt;/span&gt; ((org-agenda-tag-filter-preset &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-course&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-habit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-someday&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-book&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-emacs&amp;#34;&lt;/span&gt;))))
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qc&amp;#34;&lt;/span&gt; tags &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+commandment&amp;#34;&lt;/span&gt;)
	(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt; tags &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+org&amp;#34;&lt;/span&gt;)
	(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt; agenda &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Today&amp;#34;&lt;/span&gt; ((org-agenda-tag-filter-preset &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+work&amp;#34;&lt;/span&gt;))))
	(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;W&amp;#34;&lt;/span&gt; todo-tree &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WAITING&amp;#34;&lt;/span&gt;)
	(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Custom queries&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; gives label to &amp;#34;q&amp;#34;&lt;/span&gt;
	(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ds related&amp;#34;&lt;/span&gt;)	 &lt;span style=&#34;color:#75715e&#34;&gt;;; gives label to &amp;#34;d&amp;#34;&lt;/span&gt;
	(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ds&amp;#34;&lt;/span&gt; agenda &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Datascience&amp;#34;&lt;/span&gt; ((org-agenda-tag-filter-preset &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+datascience&amp;#34;&lt;/span&gt;))))
	(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qw&amp;#34;&lt;/span&gt; agenda &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MRPS&amp;#34;&lt;/span&gt; ((org-agenda-tag-filter-preset &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+canjs&amp;#34;&lt;/span&gt;))))
	(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qa&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Archive tags search&amp;#34;&lt;/span&gt; org-tags-view &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
         ((org-agenda-files (file-expand-wildcards &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/*.org*&amp;#34;&lt;/span&gt;))))
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Journal Search&amp;#34;&lt;/span&gt; search &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;((org-agenda-text-search-extra-files (file-expand-wildcards &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/journal/&amp;#34;&lt;/span&gt;))))
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt; search &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	 ((org-agenda-files &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/&amp;#34;&lt;/span&gt;))
	  (org-agenda-text-search-extra-files )))
	)
      )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;include-gpg-files-in-agenda-generation&#34;&gt;Include gpg files in agenda generation&lt;/h4&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://emacs.stackexchange.com/questions/36542/include-org-gpg-files-in-org-agenda&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/36542/include-org-gpg-files-in-org-agenda&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; (unless (string-match-p &amp;#34;\\.gpg&amp;#34; org-agenda-file-regexp)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   (setq org-agenda-file-regexp&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;         (replace-regexp-in-string &amp;#34;\\\\\\.org&amp;#34; &amp;#34;\\\\.org\\\\(\\\\.gpg\\\\)?&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                                   org-agenda-file-regexp)))&lt;/span&gt;

(setq org-agenda-file-regexp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\`\\\([^.].*\\.org\\\|[0-9]\\\{8\\\}\\\(\\.gpg\\\)?\\\)\\&amp;#39;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;expanding-search-locations&#34;&gt;Expanding search locations&lt;/h4&gt;

&lt;p&gt;I initially included my journal location to the agenda search. However it is very slow compared to using grep/rgrep/ag. Therefore, the agenda full text search is now limited to the project directory and the org-brain directory. The snippet below enables searching recursively within folders.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-agenda-text-search-extra-files &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(agenda-archives))

(setq org-agenda-text-search-extra-files (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;append&lt;/span&gt;
						(&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt;
						 (lambda (directory)
						   (directory-files-recursively
						    directory org-agenda-file-regexp))
						 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_projects/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/brain/&amp;#34;&lt;/span&gt;))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;adding-org-archive-for-text-search-dot-optimise-this&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Adding org archive for text search. Optimise this&lt;/h4&gt;

&lt;p&gt;:CREATED:  &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2019-02-07 Thu 08:29&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-agenda-text-search-extra-files &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(agenda-archives))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;enable-default-fuzzy-search-like-in-google&#34;&gt;Enable default fuzzy search like in google&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-agenda-search-view-always-boolean &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;enable-sticky-agenda&#34;&gt;Enable sticky agenda&lt;/h4&gt;

&lt;p&gt;Experimenting with this setting.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-agenda-sticky &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;org-habit&#34;&gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; org-habit&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 13:20] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Adding a require has brought org-habit back on track.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:50] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Appears the use-package config for org-habit is not correct and there is some issue in downloading it as a package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want to shift the org habit graph in the agenda further out right so as to leave enough room for the headings to be visible.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-habit&lt;/span&gt;)
(setq org-habit-graph-column &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;capture-mechanics&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Capture mechanics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:24]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
need to clean this up.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;capture-templates&#34;&gt;Capture templates&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-capture-templates
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Task entry&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tt&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Todo - Fast&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/todo-global.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@Inbox&amp;#34;&lt;/span&gt;)
	 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** TODO %?&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Todo -BGR&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/bgr.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#BGR #Inbox&amp;#34;&lt;/span&gt;)
	 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** TODO %?&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;te&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Todo - Emacs&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/todo-global.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@Emacs notes and tasks&amp;#34;&lt;/span&gt;)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** TODO %?&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;td&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Datascience inbox&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/datascience.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@Datascience @Inbox&amp;#34;&lt;/span&gt;)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** TODO %?&amp;#34;&lt;/span&gt;)
	(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tm&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mail Link Todo&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/todo-global.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@Inbox&amp;#34;&lt;/span&gt;)
	 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** TODO Mail: %a &amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Link/Snippet&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/link_database.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.UL Unfiled Links&amp;#34;&lt;/span&gt;)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** %? %a &amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Protocol info&amp;#34;&lt;/span&gt; entry &lt;span style=&#34;color:#75715e&#34;&gt;;; &amp;#39;w&amp;#39; for &amp;#39;org-protocol&amp;#39;&lt;/span&gt;
         (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/link_database.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.UL Unfiled Links&amp;#34;&lt;/span&gt;)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*** %a, \n %:initial&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Notes&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ne&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Emacs note&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/todo-global.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@Emacs notes and tasks&amp;#34;&lt;/span&gt;)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** %?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nn&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;General note&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/notes.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@NOTES&amp;#34;&lt;/span&gt;)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** %?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nd&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Datascience note&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/datascience.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@Datascience @Notes&amp;#34;&lt;/span&gt;)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** %?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BGR stuff&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gi&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Inventory project&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gil&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Daily log&amp;#34;&lt;/span&gt; entry (file+olp+datetree &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/bgr.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Inventory management Project&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** %? %i&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Commandment&amp;#34;&lt;/span&gt; entry (file+datetree &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/lifebook.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** %? %i :commandment:&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Job search&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/mrps_canjs.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MRPS #CANJS&amp;#34;&lt;/span&gt;)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** TODO %? %i &amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Website&amp;#34;&lt;/span&gt; plain
         (function org-website-clipper)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %a %T\n&amp;#34;&lt;/span&gt; :immediate-finish &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Journal entry&amp;#34;&lt;/span&gt; entry (function org-journal-find-location)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %(format-time-string org-journal-time-format) %?&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Whole article capture&amp;#34;&lt;/span&gt; entry
         (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/full_article_archive.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; :empty-lines &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** %a, %T\n %:initial&amp;#34;&lt;/span&gt; :empty-lines &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clocking capture&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ct&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clock TODO&amp;#34;&lt;/span&gt; entry (clock) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** TODO %?&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cn&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clock Note&amp;#34;&lt;/span&gt; entry (clock) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** %?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Review note&amp;#34;&lt;/span&gt; entry (file+weektree &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/lifebook.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#Personal #Reviews&amp;#34;&lt;/span&gt;)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** %?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;#34;&lt;/span&gt;)
         ))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;closing-org-capture-frame-on-abort&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Closing org-capture frame on abort&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-13 Wed 07:35] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This basically ensures a clean exit in case of aborting a capture.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:53]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Needs further review.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://stackoverflow.com/questions/23517372/hook-or-advice-when-aborting-org-capture-before-template-selection&#34; target=&#34;_blank&#34;&gt;http://stackoverflow.com/questions/23517372/hook-or-advice-when-aborting-org-capture-before-template-selection&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defadvice org-capture
    (after make-full-window-frame activate)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Advise capture to be the only window when used as a popup&amp;#34;&lt;/span&gt;
  (if (&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacs-capture&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;frame-parameter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&lt;/span&gt;))
      (delete-other-windows)))

(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Advise capture-finalize to close the frame&amp;#34;&lt;/span&gt;
  (if (&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacs-capture&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;frame-parameter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&lt;/span&gt;))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;controlling-org-capture-buffers&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Controlling org-capture buffers&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-13 Wed 08:01] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This interferes with org-journal&amp;rsquo;s capture format.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I dislike the way org-capture disrupts my current window, and shows me the capture buffer, and the target buffer as well. I would prefer a small pop up window, and then a revert back to the existing windows once the capture is completed or aborted. However this does not seem possible without modifying Org-mode&amp;rsquo;s source code. This is a workaround described at &lt;a href=&#34;https://stackoverflow.com/questions/54192239/open-org-capture-buffer-in-specific-Window&#34; target=&#34;_blank&#34;&gt;https://stackoverflow.com/questions/54192239/open-org-capture-buffer-in-specific-Window&lt;/a&gt; ,which partially resolves the issue by enabling just a single capture buffer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun my-org-capture-place-template-dont-delete-windows (oldfun args)
  (cl-letf (((&lt;span style=&#34;color:#a6e22e&#34;&gt;symbol-function&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;delete-other-windows&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ignore&lt;/span&gt;))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt; oldfun args)))

(with-eval-after-load &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org-capture&amp;#34;&lt;/span&gt;
  (advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-capture-place-template&lt;/span&gt; :around &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my-org-capture-place-template-dont-delete-windows&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;version-control-and-backup-of-files&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; version control and backup of files&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:15]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to check out how this works and whether this is still necessary, since I am using Git.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq delete-old-versions &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)
(setq version-control &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;org-noter&#34;&gt;org-noter&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Org-noter’s purpose is to let you create notes that are kept in sync when you scroll through the document, but that are external to it - the notes themselves live in an Org-mode file. As such, this leverages the power of Org-mode (the notes may have outlines, latex fragments, babel, etc…) while acting like notes that are made inside the document. Also, taking notes is very simple: just press i and annotate away!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/weirdNox&#34; target=&#34;_blank&#34;&gt;Gonçalo Santos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package org-noter
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :defer &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (setq org-noter-set-auto-save-last-location &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;persp-projectile&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Persp-projectile&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/howardabrams/dot-files/blob/master/emacs.org#perspective&#34; target=&#34;_blank&#34;&gt;Refer Howard&amp;rsquo;s config snippet&lt;/a&gt; to setup a test.&lt;/p&gt;

&lt;h3 id=&#34;org-projectile&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; org-projectile&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:42]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
need to optimise further and convert to use-package style. Also need a way to capture Notes from projects, in addition to tasks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting off with the basic configuration posted in org-projectile github repo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package org-projectile
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :bind ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c n p&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; org-projectile-project-todo-completing-read)
         (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; org-capture))
  :config
  (setq org-projectile-projects-file
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/project-tasks.org&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;;; (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files))) ;; Not necessary as my task projects are a part of the main org folder&lt;/span&gt;
  (push (org-projectile-project-todo-entry) org-capture-templates)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;org-gcal-customisation&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; org-gcal customisation&lt;/h3&gt;

&lt;h3 id=&#34;property-customisation&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Property customisation&lt;/h3&gt;

&lt;h4 id=&#34;optimise-created-and-planned-property-tags&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Optimise CREATED and PLANNED property tags&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:10]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Needs further review and optimisation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using an active date tag on the heading itself makes the org document look ugly, and makes navigation difficult. This is better entered into a property drawer. Two properties should work well - CREATED (inactive date-time tag) and PLANNED (active date-time tag). This will enable me to filter based on property in the future and easily archive older or irrelevant tasks. When the task is shifted or postponed, only the PLANNED property is changed, leaving clear reference of the created date.&lt;/p&gt;

&lt;p&gt;The above is implemented only for tasks with a TODO heading. For now, I want to test using Notes with an inactive date-time tag, which can be individually setup via the capture templates. The attempt is to have a clear separation between tasks and notes.&lt;/p&gt;

&lt;p&gt;This is a modified version of the snippet at &lt;a href=&#34;https://emacs.stackexchange.com/questions/35751/how-to-add-a-created-field-to-any-todo-task&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/35751/how-to-add-a-created-field-to-any-todo-task&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun sr/log-todo-creation-date (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; ignore)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Log TODO creation time in the property drawer under the key &amp;#39;CREATED&amp;#39;.&amp;#34;&lt;/span&gt;
  (when (and (org-get-todo-state)
             (not (org-entry-get &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CREATED&amp;#34;&lt;/span&gt;)))
    (org-entry-put &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CREATED&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;format-time-string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[%Y-%m-%d %a]&amp;#34;&lt;/span&gt;))
    (org-entry-put &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PLANNED&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;format-time-string&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr&lt;/span&gt; org-time-stamp-formats)))
    ))

(advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-insert-todo-heading&lt;/span&gt; :after &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;sr/log-todo-creation-date)
(advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-insert-todo-heading-respect-content&lt;/span&gt; :after &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;sr/log-todo-creation-date)
(advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-insert-todo-subheading&lt;/span&gt; :after &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;sr/log-todo-creation-date)
(advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-capture&lt;/span&gt; :after &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;sr/log-todo-creation-date)
(advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-projectile-project-todo-completing-read&lt;/span&gt; :after &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;sr/log-todo-creation-date)

&lt;span style=&#34;color:#75715e&#34;&gt;;; (require &amp;#39;org-expiry)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; ;; Configure it a bit to my liking&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; (setq&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;  org-expiry-created-property-name &amp;#34;CREATED&amp;#34; ; Name of property when an item is created&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;  org-expiry-inactive-timestamps   nil         ; Don&amp;#39;t have everything in the agenda view&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;  )&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; (defun mrb/insert-created-timestamp()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   &amp;#34;Insert a CREATED property using org-expiry.el for TODO entries&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   (org-expiry-insert-created)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   (org-back-to-heading)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   (org-end-of-line)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   (insert &amp;#34; &amp;#34;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   )&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; ;; Whenever a TODO entry is created, I want a timestamp&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; ;; Advice org-insert-todo-heading to insert a created timestamp using org-expiry&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; (defadvice org-insert-todo-heading (after mrb/created-timestamp-advice activate)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   &amp;#34;Insert a CREATED property using org-expiry.el for TODO entries&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   (mrb/insert-created-timestamp)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   )&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; ;; Make it active&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; (ad-activate &amp;#39;org-insert-todo-heading)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; (require &amp;#39;org-capture)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; (defadvice org-capture (after mrb/created-timestamp-advice activate)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   &amp;#34;Insert a CREATED property using org-expiry.el for TODO entries&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;    					; Test if the captured entry is a TODO, if so insert the created&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;    					; timestamp property, otherwise ignore&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   (mrb/insert-created-timestamp))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; ;;  (when (member (org-get-todo-state) org-todo-keywords-1)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; ;;    (mrb/insert-created-timestamp)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   (ad-activate &amp;#39;org-capture)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;enabling-adding-tags-in-the-capture-window&#34;&gt;Enabling adding tags in the capture window&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Add feature to allow easy adding of tags in a capture window&lt;/span&gt;
(defun mrb/add-tags-in-capture()
  (interactive)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Insert tags in a capture window without losing the point&amp;#34;&lt;/span&gt;
  (save-excursion
    (org-back-to-heading)
    (org-set-tags)))
&lt;span style=&#34;color:#75715e&#34;&gt;;; Bind this to a reasonable key&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; org-capture-mode-map &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\C-c\C-t&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mrb/add-tags-in-capture&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;org-web-clipper&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; org web clipper&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:11]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
This works fine now. However, it would be nice to find a way to strip the headers and menu columns and other unnecessary information before capture.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://www.bobnewell.net/publish/35years/webclipper.html&#34; target=&#34;_blank&#34;&gt;http://www.bobnewell.net/publish/35years/webclipper.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; org-eww and org-w3m should be in your org distribution, but see&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; note below on patch level of org-eww.&lt;/span&gt;
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-eww&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-w3m&lt;/span&gt;)
(defvar org-website-page-archive-file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/full_article_archive.org&amp;#34;&lt;/span&gt;)
(defun org-website-clipper ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;When capturing a website page, go to the right place in capture file,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   but do sneaky things. Because it&amp;#39;s a w3m or eww page, we go
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   ahead and insert the fixed-up page content, as I don&amp;#39;t see a
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   good way to do that from an org-capture template alone. Requires
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   Emacs 25 and the 2017-02-12 or later patched version of org-eww.el.&amp;#34;&lt;/span&gt;
  (interactive)

  &lt;span style=&#34;color:#75715e&#34;&gt;;; Check for acceptable major mode (w3m or eww) and set up a couple of&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; browser specific values. Error if unknown mode.&lt;/span&gt;

  (cond
   ((&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; major-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w3m-mode&lt;/span&gt;)
    (org-w3m-copy-for-org-mode))
   ((&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; major-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eww-mode&lt;/span&gt;)
    (org-eww-copy-for-org-mode))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Not valid -- must be in w3m or eww mode&amp;#34;&lt;/span&gt;)))

  &lt;span style=&#34;color:#75715e&#34;&gt;;; Check if we have a full path to the archive file.&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Create any missing directories.&lt;/span&gt;

  (unless (&lt;span style=&#34;color:#a6e22e&#34;&gt;file-exists-p&lt;/span&gt; org-website-page-archive-file)
    (let ((dir (&lt;span style=&#34;color:#a6e22e&#34;&gt;file-name-directory&lt;/span&gt; org-website-page-archive-file)))
      (unless (&lt;span style=&#34;color:#a6e22e&#34;&gt;file-exists-p&lt;/span&gt; dir)
        (make-directory dir))))

  &lt;span style=&#34;color:#75715e&#34;&gt;;; Open the archive file and yank in the content.&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Headers are fixed up later by org-capture.&lt;/span&gt;

  (find-file org-website-page-archive-file)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;goto-char&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;point-max&lt;/span&gt;))
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Leave a blank line for org-capture to fill in&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; with a timestamp, URL, etc.&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n\n&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Insert the web content but keep our place.&lt;/span&gt;
  (save-excursion (yank))
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Don&amp;#39;t keep the page info on the kill ring.&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Also fix the yank pointer.&lt;/span&gt;
  (setq kill-ring (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr&lt;/span&gt; kill-ring))
  (setq kill-ring-yank-pointer kill-ring)
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Final repositioning.&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;forward-line&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;org-babel&#34;&gt;Org-babel&lt;/h3&gt;

&lt;h4 id=&#34;loading-language-base&#34;&gt;Loading language base&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(org-babel-do-load-languages
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-babel-load-languages&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((clojure &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
   (scheme &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
   (sqlite &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
   (R &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
   &lt;span style=&#34;color:#75715e&#34;&gt;;(jupyter . t)&lt;/span&gt;
   )
 )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;clojure-and-cider&#34;&gt;Clojure and cider&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cider&lt;/span&gt;)
(setq org-babel-clojure-backend &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cider&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;org-trello&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Org-trello&lt;/h3&gt;

&lt;h3 id=&#34;clock-customisation&#34;&gt;Clock Customisation&lt;/h3&gt;

&lt;h4 id=&#34;continuous-clocking-punch-in-out-approach&#34;&gt;Continuous clocking + punch in/out approach&lt;/h4&gt;

&lt;p&gt;This approach and code snippets are adapted (and shamelessly borrowed) from &lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Bernt Hansen&amp;rsquo;s approach&lt;/a&gt;. While Bernt follows a complex approach of clocking into parent tasks - my current workflow favors clocking in directly to set clocking headlines within projects, which are placed in my org-projectile todo task file.&lt;/p&gt;

&lt;p&gt;I have a default continuous clock after punching in (defined by org-id) which will cater to general re-organisation, including capturing notes, refiling , email etc. Other tasks or even mini projects can be directly clocked into when required. These mini-projets are often just located within my org-agenda files and not as a separate git repositoy. Every time I am on my computer, whether on Emacs or not, I would like the automatic clock to capture time, unless it is being clocked to a specific project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Defining default Task&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defvar sr/organization-task-id &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a8712a47-a648-477f-bdbf-d6004a0cc70b&amp;#34;&lt;/span&gt;)

(defun sr/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find sr/organization-task-id &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;marker&lt;/span&gt;)
    (org-clock-in &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Punch in&lt;/p&gt;

&lt;p&gt;Bernt Hansen shares that he has a default punch in and punch out task that keeps the clock on all day. I think this will work for me as well. Other than work and projects, most of the time I am tinkering with Emacs, or writing a journal note or trying to re-organise my stuff. By using a punch in and out, I can track how much time I am engaged with a computer, other than specific projects.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun sr/punch-in (arg)
    (interactive &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;)
  (setq sr/keep-clock-running &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (sr/clock-in-organization-task-as-default))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Punch Out&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun sr/punch-out ()
  (interactive)
  (setq sr/keep-clock-running &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
  (when (org-clock-is-active)
    (org-clock-out))
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Advising clock Out&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun sr/clock-out-maybe ()
  (when (and sr/keep-clock-running
             (not org-clock-clocking-in)
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;marker-buffer&lt;/span&gt; org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (sr/clock-in-organization-task-as-default)))

(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-clock-out-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sr/clock-out-maybe&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;append&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;org-mru-clock&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; org-mru-clock&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-14 Thu 10:16] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Issue is with the org-mru-select-recent-task command - it doesn&amp;rsquo;t jump to the specified task and always pesudo messes up the format of the headings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a handy package to quickly select past tasks which have been clocked in.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package org-mru-clock
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :bind ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-s 1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; org-mru-clock-in)
          (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c C-x C-j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; org-mru-clock-select-recent-task))
  :init
  (setq org-mru-clock-how-many &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
        org-mru-clock-completing-read &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;ivy-completing-read))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;do-not-log-or-consider-0-clocks&#34;&gt;Do not log or consider 0 Clocks&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-clock-out-remove-zero-time-clocks &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;set-idle-timer-for-clocked-task&#34;&gt;set idle timer for clocked task&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; setting idle timer to 15 minutes&lt;/span&gt;
(setq org-clock-idle-time &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;show-clocked-task-history-and-enable-re-clocking&#34;&gt;Show clocked task history and enable re-clocking&lt;/h4&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://writequit.org/denver-emacs/presentations/2017-04-11-time-clocking-with-org.html&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This should enable me to quickly clock back into specific tasks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Show lot of clocking history so it&amp;#39;s easy to pick items off the `C-c I` list&lt;/span&gt;
(setq org-clock-history-length &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;)

(defun eos/org-clock-in ()
  (interactive)
  (org-clock-in &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)))

(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c I&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;eos/org-clock-in)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c O&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;org-clock-out)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;org-brain&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Org-Brain&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;org-brain implements a variant of concept mapping in Emacs, using org-mode.&lt;/p&gt;

&lt;p&gt;You can think of org-brain as a combination of a wiki and a mind map, where each wiki page / mind map node is an org-mode file which resides in your org-brain-path, or a headline with an ID property in one of those files. These are called entries. Entries can be linked together, and you can then view the network of links as a mind map, using M-x org-brain-visualize&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Kungsgeten/org-brain&#34; target=&#34;_blank&#34;&gt;org-brain on github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package org-brain
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :init
  (setq org-brain-path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/brain/&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;;; ;; For Evil users&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; (with-eval-after-load &amp;#39;evil&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;   (evil-set-initial-state &amp;#39;org-brain-visualize-mode &amp;#39;emacs))&lt;/span&gt;
  :config
  (setq org-id-track-globally &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (setq org-id-locations-file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/.org-id-locations&amp;#34;&lt;/span&gt;)
  (push &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Brain&amp;#34;&lt;/span&gt; plain (function org-brain-goto-end)
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %i%?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;#34;&lt;/span&gt; :empty-lines &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        org-capture-templates)
  (setq org-brain-visualize-default-choices &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;all&lt;/span&gt;)
  (setq org-brain-title-max-length &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))

(defun org-brain-deft ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Use &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`deft&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; for files in &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`org-brain-path&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#34;&lt;/span&gt;
  (interactive)
  (let ((deft-directory org-brain-path)
        (deft-recursive &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
        (deft-extensions &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org&amp;#34;&lt;/span&gt;)))
    (deft)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;org-journal&#34;&gt;Org journal&lt;/h3&gt;

&lt;h4 id=&#34;base-config&#34;&gt;Base config&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package org-journal
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :defer &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :custom
  (org-journal-dir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/journal/&amp;#34;&lt;/span&gt;)
  (org-journal-file-format &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%Y%m%d&amp;#34;&lt;/span&gt;)
  (org-journal-enable-agenda-integration &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;setting-org-capture-template-for-journal&#34;&gt;setting org-capture template for Journal&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun org-journal-find-location ()
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Open today&amp;#39;s journal, but specify a non-nil prefix argument in order to&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; inhibit inserting the heading; org-capture will insert the heading.&lt;/span&gt;
  (org-journal-new-entry &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Position point on the journal&amp;#39;s top-level heading so that org-capture&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; will add the new entry as a child entry.&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;goto-char&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;point-min&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;figure-out-easy-encryption-approach-for-org-journal&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Figure out easy encryption approach for org journal&lt;/h4&gt;

&lt;h3 id=&#34;org-sticky-header&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Org sticky Header &lt;code&gt;[0/1]&lt;/code&gt;&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Explore further options : example full path or customised path to be shown&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This package displays in the header-line the Org heading for the node that’s at the top of the window. This way, if the heading for the text at the top of the window is beyond the top of the window, you don’t forget which heading the text belongs to. The display can be customized to show just the heading, the full outline path, or the full outline path in reverse.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/alphapapa/org-sticky-header/blob/master/README.org&#34; target=&#34;_blank&#34;&gt;org-sticky-header&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is especially useful for free form longer Documentation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package org-sticky-header
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (org-sticky-header-mode)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;org-wild-notifier&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Org wild Notifier&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-28 Thu 13:48] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This seems to be able to do exactly what I am looking for. However there are unexplained errors while starting up the package.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package org-wild-notifier
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :custom
  (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-wild-notifier&lt;/span&gt;)
  (org-wild-notifier-mode)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;sauron&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Sauron&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package sauron
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sauron&lt;/span&gt;)
  (setq sauron-modules &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(sauron-org sauron-notifications))
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;deft&#34;&gt;Deft&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Deft is an Emacs mode for quickly browsing, filtering, and editing directories of plain text notes, inspired by Notational Velocity. It was designed for increased productivity when writing and taking notes by making it fast and simple to find the right file at the right time and by automating many of the usual tasks such as creating new files and saving files.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jblevins.org/projects/deft/&#34; target=&#34;_blank&#34;&gt;Deft project&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package deft
  :bind (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f8&amp;gt; d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; deft)
  :commands (deft)
  :config (setq deft-directory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/brain//&amp;#34;&lt;/span&gt;
                deft-extensions &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;md&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;txt&amp;#34;&lt;/span&gt;)
                deft-recursive &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
                ))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;helm&#34;&gt;Helm&lt;/h2&gt;

&lt;h3 id=&#34;helm-ext&#34;&gt;helm-ext&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Extensions to helm, which I find useful but are unlikely to be accepted in the upstream. A collection of dirty hacks for helm!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cute-jumper/helm-ext&#34; target=&#34;_blank&#34;&gt;https://github.com/cute-jumper/helm-ext&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package helm-ext
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (helm-ext-ff-enable-skipping-dots &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Testing the auto path expansion&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;(helm-ff-ext-enable-auto-path-expansion t)&lt;/span&gt;
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;enabling-helm-mode-and-activation-for-specific-functions&#34;&gt;Enabling Helm mode and activation for specific functions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-06 Wed 17:26] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
I tried using Ivy for a period. However, Helm&amp;rsquo;s interface is simply a lot more pleasing and there are actually several additional actions that can be performed via helm itself.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-04 Mon 15:48] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Though I preferred Helm initially for several commands - I realised that scimax has several useful customisations for the ivy and counsel packages. Overall ivy is also lighter than helm and therefore these customisations are being discarded for now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I prefer using Helm for specific functions like M-x, find files and bookmarks and switching buffers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-x&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;helm-M-x&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;;; Enable fuzzy match for helm-M-x&lt;/span&gt;
(setq helm-M-x-fuzzy-match &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x r b&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;helm-filtered-bookmarks)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x C-f&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;helm-find-files)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x b&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;helm-mini)

(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;helm-config&lt;/span&gt;)
(helm-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;setting-sources-for-helm&#34;&gt;Setting sources for helm&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-04 Mon 15:49] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The scimax hotspots can be customised with an improved function that only requires commands locations to be separately defined. This resolved the helm-recentf problem.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 14:55] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This is still causing issues: the recentf list has to be cleared via helm-mini first.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 16:28] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This was needed as it seems helm was not sourcing from recentf file lists. With this source list defined, it provides options to choose from recent files, bookmarks, open buffers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example: setting these sources enables my bookmarks to be available along with my buffers, enabling a jump to either.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq helm-mini-default-sources &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(helm-source-buffers-list
                                  helm-source-recentf
                                  helm-source-bookmarks
                                  helm-source-bookmark-set
                                  helm-source-buffer-not-found))

(setq helm-buffers-list-default-sources &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(helm-source-buffers-list
                                          helm-source-recentf
                                          helm-source-bookmarks
                                          helm-source-bookmark-set
                                          helm-source-buffer-not-found))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;helm-semantic&#34;&gt;helm-semantic&lt;/h3&gt;

&lt;p&gt;This needs &lt;a href=&#34;#semantic-mode&#34;&gt;Semantic Mode&lt;/a&gt; enabled, and is a really cool function that enables jumping around variables and functions in a script file with fuzzy matching !&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq helm-semantic-fuzzy-match &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
      helm-imenu-fuzzy-match &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;persistent-follow-mode-for-helm&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Persistent follow mode for Helm&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 07:46]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to find exactly what this does&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(custom-set-variables
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(helm-follow-mode-persistent &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;helm-ag-and-helm-org-rifle-with-refiling-set-to-helm-org-rifle&#34;&gt;&lt;code&gt;helm-ag&lt;/code&gt; and &lt;code&gt;helm-org-rifle&lt;/code&gt;, with refiling set to &lt;code&gt;helm-org-rifle&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;helm-ag&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;helm-org-rifle&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c C-w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;helm-org-rifle--refile)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;helm-swoop&#34;&gt;helm-swoop&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 16:53] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This is an awesome find. Helm swoop changes the search pattern depending on the location of the cursor. Therefore, while placed on an org headline, calling helm-swoop will preset the search pattern to have headings. The same is true for source code blocks! Fantastic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://writequit.org/org/#orgheadline92&#34; target=&#34;_blank&#34;&gt;https://writequit.org/org/#orgheadline92&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package helm-swoop
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :bind ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-i&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; helm-swoop)
         (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-I&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; helm-swoop-back-to-last-point)
         (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c M-i&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; helm-multi-swoop))
  :config
  &lt;span style=&#34;color:#75715e&#34;&gt;;; When doing isearch, hand the word over to helm-swoop&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; isearch-mode-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-i&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;helm-swoop-from-isearch&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;;; From helm-swoop to helm-multi-swoop-all&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; helm-swoop-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-i&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;helm-multi-swoop-all-from-helm-swoop&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Save buffer when helm-multi-swoop-edit complete&lt;/span&gt;
  (setq helm-multi-swoop-edit-save &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;;; If this value is t, split window inside the current window&lt;/span&gt;
        helm-swoop-split-with-multiple-windows &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;;; Split direcion. &amp;#39;split-window-vertically or &amp;#39;split-window-horizontally&lt;/span&gt;
        helm-swoop-split-direction &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;split-window-vertically&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;;; If nil, you can slightly boost invoke speed in exchange for text color&lt;/span&gt;
        helm-swoop-speed-or-color &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;helm-loading-completed&#34;&gt;Helm Loading completed&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loaded Helm customisations&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;flycheck&#34;&gt;Flycheck&lt;/h2&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://writequit.org/org/&#34; target=&#34;_blank&#34;&gt;https://writequit.org/org/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;basic-config&#34;&gt;Basic config&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-09 Sat 11:51] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
disabling flycheck for the moment and enabling flymake&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package flycheck
  :defer &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
  :bind ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-g M-n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; flycheck-next-error)
         (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-g M-p&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; flycheck-previous-error)
         (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-g M-=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; flycheck-list-errors))
  :init (global-flycheck-mode)
  :diminish flycheck-mode
  :config
  (progn
    (setq-default flycheck-disabled-checkers &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(emacs-lisp-checkdoc json-jsonlint json-python-json ess iess))
    (use-package flycheck-pos-tip
      :init (flycheck-pos-tip-mode))
    (use-package helm-flycheck
      :init (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; flycheck-mode-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c ! h&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;helm-flycheck&lt;/span&gt;))
    (use-package flycheck-haskell
      :init (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flycheck-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;flycheck-haskell-setup))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;replacing-flycheck-with-flymake&#34;&gt;Replacing flycheck with flymake&lt;/h3&gt;

&lt;p&gt;This is especially for python modules at the moment.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(when (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flycheck&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (setq elpy-modules (&lt;span style=&#34;color:#a6e22e&#34;&gt;delq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elpy-module-flymake&lt;/span&gt; elpy-modules))
  (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elpy-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flycheck-mode&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;scheme-setup&#34;&gt;Scheme setup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;References

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://praveen.kumar.in/2011/03/06/gnu-emacs-and-mit-scheme-on-mac-os-x/&#34; target=&#34;_blank&#34;&gt;http://praveen.kumar.in/2011/03/06/gnu-emacs-and-mit-scheme-on-mac-os-x/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq scheme-program-name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Applications/MIT-GNU-Scheme.app/Contents/Resources/mit-scheme&amp;#34;&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xscheme&lt;/span&gt;)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loaded scheme setup&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;hydras-and-some-custom-functions&#34;&gt;Hydras and some custom functions&lt;/h2&gt;

&lt;h3 id=&#34;refiling&#34;&gt;Refiling&lt;/h3&gt;

&lt;p&gt;Adapted from &lt;a href=&#34;https://emacs.stackexchange.com/questions/8045/org-refile-to-a-known-fixed-location&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/8045/org-refile-to-a-known-fixed-location&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;source: &lt;a href=&#34;https://gist.github.com/mm--/60e0790bcbf8447160cc87a66dc949ab&#34; target=&#34;_blank&#34;&gt;https://gist.github.com/mm--/60e0790bcbf8447160cc87a66dc949ab&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also see&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun my/refile (file headline &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; arg)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Refile to a specific location.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;With a &amp;#39;C-u&amp;#39; ARG argument, we jump to that location (see
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`org-refile&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;).
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Use &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`org-agenda-refile&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; in &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`org-agenda&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; mode.&amp;#34;&lt;/span&gt;
  (let* ((pos (with-current-buffer (or (&lt;span style=&#34;color:#a6e22e&#34;&gt;get-buffer&lt;/span&gt; file) &lt;span style=&#34;color:#75715e&#34;&gt;;Is the file open in a buffer already?&lt;/span&gt;
				       (find-file-noselect file)) &lt;span style=&#34;color:#75715e&#34;&gt;;Otherwise, try to find the file by name (Note, default-directory matters here if it isn&amp;#39;t absolute)&lt;/span&gt;
		(or (org-find-exact-headline-in-buffer headline)
		    (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t find headline &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`%s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; headline))))
	 (filepath (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-file-name&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;marker-buffer&lt;/span&gt; pos))) &lt;span style=&#34;color:#75715e&#34;&gt;;If we&amp;#39;re given a relative name, find absolute path&lt;/span&gt;
	 (rfloc (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; headline filepath &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; pos)))
    (if (and (&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; major-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-agenda-mode&lt;/span&gt;) (not (and arg (&lt;span style=&#34;color:#a6e22e&#34;&gt;listp&lt;/span&gt; arg)))) &lt;span style=&#34;color:#75715e&#34;&gt;;Don&amp;#39;t use org-agenda-refile if we&amp;#39;re just jumping&lt;/span&gt;
	(org-agenda-refile &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; rfloc)
      (org-refile arg &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; rfloc))))

(defun josh/refile (file headline &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; arg)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Refile to HEADLINE in FILE. Clean up org-capture if it&amp;#39;s activated.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;With a `C-u` ARG, just jump to the headline.&amp;#34;&lt;/span&gt;
  (interactive &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;)
  (let ((is-capturing (and (&lt;span style=&#34;color:#a6e22e&#34;&gt;boundp&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-capture-mode&lt;/span&gt;) org-capture-mode)))
    (cond
     ((and arg (&lt;span style=&#34;color:#a6e22e&#34;&gt;listp&lt;/span&gt; arg))	    &lt;span style=&#34;color:#75715e&#34;&gt;;Are we jumping?&lt;/span&gt;
      (my/refile file headline arg))
     &lt;span style=&#34;color:#75715e&#34;&gt;;; Are we in org-capture-mode?&lt;/span&gt;
     (is-capturing      	&lt;span style=&#34;color:#75715e&#34;&gt;;Minor mode variable that&amp;#39;s defined when capturing&lt;/span&gt;
      (josh/org-capture-refile-but-with-args file headline arg))
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
      (my/refile file headline arg)))
    (when (or arg is-capturing)
      (setq hydra-deactivate &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))))

(defun josh/org-capture-refile-but-with-args (file headline &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; arg)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Copied from &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`org-capture-refile&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; since it doesn&amp;#39;t allow passing arguments. This does.&amp;#34;&lt;/span&gt;
  (unless (&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; (org-capture-get :type &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;local&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;entry&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;
     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Refiling from a capture buffer makes only sense for &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`entry&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-type templates&amp;#34;&lt;/span&gt;))
  (let ((pos (&lt;span style=&#34;color:#a6e22e&#34;&gt;point&lt;/span&gt;))
	(base (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-base-buffer&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;current-buffer&lt;/span&gt;)))
	(org-capture-is-refiling &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
	(&lt;span style=&#34;color:#a6e22e&#34;&gt;kill-buffer&lt;/span&gt; (org-capture-get :kill-buffer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;local&lt;/span&gt;)))
    (org-capture-put :kill-buffer &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
    (org-capture-finalize)
    (save-window-excursion
      (with-current-buffer (or base (&lt;span style=&#34;color:#a6e22e&#34;&gt;current-buffer&lt;/span&gt;))
	(org-with-wide-buffer
	 (&lt;span style=&#34;color:#a6e22e&#34;&gt;goto-char&lt;/span&gt; pos)
	 (my/refile file headline arg))))
    (when &lt;span style=&#34;color:#a6e22e&#34;&gt;kill-buffer&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;kill-buffer&lt;/span&gt; base))))

(defmacro josh/make-org-refile-hydra (hydraname file keyandheadline)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Make a hydra named HYDRANAME with refile targets to FILE.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;KEYANDHEADLINE should be a list of cons cells of the form (\&amp;#34;key\&amp;#34; . \&amp;#34;headline\&amp;#34;)&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(defhydra &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;hydraname (:color blue :after-exit (unless (or hydra-deactivate
							     current-prefix-arg) &lt;span style=&#34;color:#75715e&#34;&gt;;If we&amp;#39;re just jumping to a location, quit the hydra&lt;/span&gt;
						   (josh/org-refile-hydra/body)))
     &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;file
     &lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;(cl-loop for kv in keyandheadline
		collect (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;car&lt;/span&gt; kv) (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;josh/refile&lt;/span&gt; file (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr&lt;/span&gt; kv) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;current-prefix-arg&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr&lt;/span&gt; kv)))
     (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cancel&amp;#34;&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; Here we&amp;#39;ll define our refile headlines&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;&lt;/span&gt;

(josh/make-org-refile-hydra josh/org-refile-hydra-file-ds
			    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/datascience.org&amp;#34;&lt;/span&gt;
			    ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@Datascience @Inbox&amp;#34;&lt;/span&gt;)
			     (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@Datascience @Notes&amp;#34;&lt;/span&gt;)))

(josh/make-org-refile-hydra josh/org-refile-hydra-file-bgr
			    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/bgr.org&amp;#34;&lt;/span&gt;
			    ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#BGR #Inbox&amp;#34;&lt;/span&gt;)
			     (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#questions @ BGR&amp;#34;&lt;/span&gt;)
                             (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Inventory management Project&amp;#34;&lt;/span&gt;)))

(josh/make-org-refile-hydra josh/org-refile-hydra-file-todoglobal
			    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;todo-global.org&amp;#34;&lt;/span&gt;
			    ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;Emacs Stuff&amp;#34;&lt;/span&gt;)
			     (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;someday&amp;#34;&lt;/span&gt;)))

(defhydra josh/org-refile-hydra (:foreign-keys run)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Refile&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; josh/org-refile-hydra-file-ds/body &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;File A&amp;#34;&lt;/span&gt; :exit &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; josh/org-refile-hydra-file-bgr/body &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;File B&amp;#34;&lt;/span&gt; :exit &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; josh/org-refile-hydra-file-todoglobal/body &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;File C&amp;#34;&lt;/span&gt; :exit &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; org-refile-goto-last-stored &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jump to last refile&amp;#34;&lt;/span&gt; :exit &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cancel&amp;#34;&lt;/span&gt;))

(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f8&amp;gt; r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;josh/org-refile-hydra/body&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;window-manipulation&#34;&gt;Window manipulation&lt;/h3&gt;

&lt;p&gt;Source : Hydra documentation&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;  Hydras for window configuration. Using the deluxe&lt;/span&gt;
(defhydra hydra-window ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Movement^^        ^Split^         ^Switch^		^Resize^
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;----------------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_h_ ←       	_v_ertical    	_b_uffer		_q_ X←
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_j_ ↓        	_x_ horizontal	_f_ind files	_w_ X↓
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_k_ ↑        	_z_ undo      	_a_ce 1		_e_ X↑
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_l_ →        	_Z_ reset      	_s_wap		_r_ X→
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_F_ollow		_D_lt Other   	_S_ave		max_i_mize
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_SPC_ cancel	_o_nly this   	_d_elete
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;h&amp;#34;&lt;/span&gt; windmove-left )
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; windmove-down )
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;k&amp;#34;&lt;/span&gt; windmove-up )
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; windmove-right )
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; hydra-move-splitter-left)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt; hydra-move-splitter-down)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt; hydra-move-splitter-up)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt; hydra-move-splitter-right)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; helm-mini)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;f&amp;#34;&lt;/span&gt; helm-find-files)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt; follow-mode)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; (lambda ()
         (interactive)
         (ace-window &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
         (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ace-window-end-once-hook&lt;/span&gt;
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hydra-window/body&lt;/span&gt;))
   )
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v&amp;#34;&lt;/span&gt; (lambda ()
         (interactive)
         (split-window-right)
         (windmove-right))
   )
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt; (lambda ()
         (interactive)
         (split-window-below)
         (windmove-down))
   )
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; (lambda ()
         (interactive)
         (ace-window &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
         (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ace-window-end-once-hook&lt;/span&gt;
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hydra-window/body&lt;/span&gt;)))
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt; save-buffer)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt; delete-window)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt; (lambda ()
         (interactive)
         (ace-window &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
         (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ace-window-end-once-hook&lt;/span&gt;
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hydra-window/body&lt;/span&gt;))
   )
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt; delete-other-windows)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt; ace-maximize-window)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt; (progn
         (winner-undo)
         (setq this-command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;winner-undo&lt;/span&gt;))
   )
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt; winner-redo)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SPC&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
  )

(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f8&amp;gt; w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hydra-window/body&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;helm-do-ag-in-specific-locations&#34;&gt;helm-do-ag in specific locations&lt;/h3&gt;

&lt;p&gt;Reference: &lt;a href=&#34;https://emacs.stackexchange.com/questions/44128/function-to-do-helm-do-ag-for-a-specific-project&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/44128/function-to-do-helm-do-ag-for-a-specific-project&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;in-project-directory&#34;&gt;In project directory&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun helm-do-ag-projects ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Grep string in Project directory&amp;#34;&lt;/span&gt; (interactive)
  (let ((rootdir (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_projects/&amp;#34;&lt;/span&gt;)))
    (let ((helm-ag-command-option (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; helm-ag-command-option &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)))
      (helm-do-ag rootdir))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;scimax-config-directory&#34;&gt;Scimax config directory&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun helm-do-ag-emacs-config ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Grep string in Emacs custom code&amp;#34;&lt;/span&gt;
  (interactive)
  (let ((rootdir (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/sr-cust/&amp;#34;&lt;/span&gt;)))
    (let ((helm-ag-command-option (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; helm-ag-command-option &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)))
      (helm-do-ag rootdir))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;journal-directory&#34;&gt;Journal directory&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun helm-do-ag-journal ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Grep string in journal&amp;#34;&lt;/span&gt;
  (interactive)
  (let ((specfile (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/journal/&amp;#34;&lt;/span&gt;)))
    (let ((helm-ag-command-option (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; helm-ag-command-option &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)))
      (helm-ag-this-file rootdir))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;bgr-file&#34;&gt;BGR file&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun helm-do-ag-bgr ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Grep string in BGR file&amp;#34;&lt;/span&gt;
  (interactive)
  (let ((specfile (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/bgr.org&amp;#34;&lt;/span&gt;)))
    (let ((helm-ag-command-option (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; helm-ag-command-option &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)))
      (helm-do-ag-this-file specfile))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;defining-hydra&#34;&gt;Defining hydra&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defhydra shrysr/hydra-helm-ag-do-menu ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Helm-do-ag in specified locations
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;^location^  ^command^
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;----------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;e:        emacs custom config
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b:        bgr file
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;o:        org files
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;j:        journal search
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt; helm-do-ag-emacs-config)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; helm-do-ag-journal :color blue)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt; helm-do-ag-projects)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt; helm-do-ag-org)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; quit-window &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quit&amp;#34;&lt;/span&gt; :color red))

(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f8&amp;gt; h&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shrysr/hydra-helm-ag-do-menu/body&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;frame-configurations-fo-magit-and-project-launch&#34;&gt;Frame configurations fo magit and project launch&lt;/h3&gt;

&lt;h4 id=&#34;scimax-magit-and-windows&#34;&gt;Scimax - magit and windows&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; scimax directory magit status&lt;/span&gt;
(defun sr/windows-magit-scimax ()
  (interactive)
  (ace-delete-other-windows)
  (dired &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/&amp;#34;&lt;/span&gt;)
  (switch-window-then-split-right &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
  (magit-status &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/&amp;#34;&lt;/span&gt;)
  (switch-window)
  (split-window-vertically)
  (dired-up-directory)
  (windmove-right)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;org-files-magit-and-windows&#34;&gt;Org files - magit and windows&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; my_org magit status&lt;/span&gt;
(defun sr/windows-magit-org ()
  (interactive)
  (ace-delete-other-windows)
  (magit-status &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/&amp;#34;&lt;/span&gt;)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;project-directory-magit-and-windows&#34;&gt;Project directory - magit and windows&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; magit status&lt;/span&gt;
(defun sr/windows-magit-projects ()
  (interactive)
  (ace-delete-other-windows)
  (switch-window-then-split-right &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
  (magit-status &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_projects/&amp;#34;&lt;/span&gt;)
  (switch-window)
  (dired &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_projects/&amp;#34;&lt;/span&gt;)
  (switch-window)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;project-switch-and-windows&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Project: Switch and windows&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-10 Sun 07:09] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Experiment with helm-swoop functions to target only top level headings&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun sr/windows-projects ()
  (interactive)
  (ace-delete-other-windows)
  (switch-window-then-split-right &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
  (projectile-switch-project)
  (switch-window)
  (find-file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/project-tasks.org&amp;#34;&lt;/span&gt;)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;widen&lt;/span&gt;)
  (helm-org-rifle-current-buffer)
  (org-narrow-to-subtree)
  (outline-show-children)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;defining-hydra-1&#34;&gt;Defining Hydra&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defhydra sr/process-window-keys ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Key^^   ^Workflow^
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;--------------------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;o       org magit
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s       scimax magit
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;p       projects magit
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;w       select project and set window config
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SPC     exit
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt; sr/windows-magit-org )
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt; sr/windows-magit-projects )
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; sr/windows-magit-scimax )
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt; sr/windows-projects)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SPC&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
  )

(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f8&amp;gt; m&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sr/process-window-keys/body&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;loading-completed&#34;&gt;Loading completed&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loaded Hydras&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;elfeed-customisation&#34;&gt;Elfeed customisation&lt;/h2&gt;

&lt;h3 id=&#34;elfeed-basic-customisations&#34;&gt;Elfeed Basic + Customisations&lt;/h3&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://heikkil.github.io/blog/2015/05/09/notes-from-elfeed-entries/&#34; target=&#34;_blank&#34;&gt;http://heikkil.github.io/blog/2015/05/09/notes-from-elfeed-entries/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Elfeed configuration source :&lt;/span&gt;
(use-package elfeed
  :bind (:map elfeed-search-mode-map
              (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-show-all)
              (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-show-emacs)
              (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-show-daily)
              (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-save-db-and-bury))
  :init
  (setq my/default-elfeed-search-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@1-month-ago +unread !sport &amp;#34;&lt;/span&gt;)
  (setq-default elfeed-search-filter my/default-elfeed-search-filter)
  (setq elfeed-db-direcory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/elfeeddb&amp;#34;&lt;/span&gt;)
  :config
  (elfeed-org)
  (elfeed-goodies/setup)

  &lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; linking and capturing&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;

  (defun elfeed-link-title (entry)
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Copy the entry title and URL as org link to the clipboard.&amp;#34;&lt;/span&gt;
    (interactive)
    (let* ((link (elfeed-entry-link entry))
           (title (elfeed-entry-title entry))
           (titlelink (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[[&amp;#34;&lt;/span&gt; link &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;][&amp;#34;&lt;/span&gt; title &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]]&amp;#34;&lt;/span&gt;)))
      (when titlelink
        (kill-new titlelink)
        (x-set-selection &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PRIMARY&lt;/span&gt; titlelink)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yanked: %s&amp;#34;&lt;/span&gt; titlelink))))

  &lt;span style=&#34;color:#75715e&#34;&gt;;; show mode&lt;/span&gt;

  (defun elfeed-show-link-title ()
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Copy the current entry title and URL as org link to the clipboard.&amp;#34;&lt;/span&gt;
    (interactive)
    (elfeed-link-title elfeed-show-entry))

  (defun elfeed-show-quick-url-note ()
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fastest way to capture entry link to org agenda from elfeed show mode&amp;#34;&lt;/span&gt;
    (interactive)
    (elfeed-link-title elfeed-show-entry)
    (org-capture &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;)
    (yank)
    (org-capture-finalize))

  (bind-keys :map elfeed-show-mode-map
             (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-show-link-title)
             (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-show-quick-url-note))

  &lt;span style=&#34;color:#75715e&#34;&gt;;; search mode&lt;/span&gt;

  (defun elfeed-search-link-title ()
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Copy the current entry title and URL as org link to the clipboard.&amp;#34;&lt;/span&gt;
    (interactive)
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
               when (elfeed-entry-link entry)
               do (elfeed-link-title entry))))

  (defun elfeed-search-quick-url-note ()
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;In search mode, capture the title and link for the selected
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     entry or entries in org aganda.&amp;#34;&lt;/span&gt;
    (interactive)
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
               do (elfeed-untag entry &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unread&lt;/span&gt;)
               when (elfeed-entry-link entry)
               do (elfeed-link-title entry)
               do (org-capture &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;)
               do (yank)
               do (org-capture-finalize)
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapc&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;elfeed-search-update-entry entries))
      (unless (use-region-p) (&lt;span style=&#34;color:#a6e22e&#34;&gt;forward-line&lt;/span&gt;))))

  (bind-keys :map elfeed-search-mode-map
             (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-search-link-title)
             (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-search-quick-url-note))

   &lt;span style=&#34;color:#75715e&#34;&gt;;;functions to support syncing .elfeed between machines&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;makes sure elfeed reads index from disk before launching&lt;/span&gt;
  (defun bjm/elfeed-load-db-and-open ()
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrapper to load the elfeed db from disk before opening&amp;#34;&lt;/span&gt;
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  &lt;span style=&#34;color:#75715e&#34;&gt;;;write to disk when quiting&lt;/span&gt;
  (defun bjm/elfeed-save-db-and-bury ()
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrapper to save the elfeed db to disk before burying buffer&amp;#34;&lt;/span&gt;
    (interactive)
    (elfeed-db-save)
    (quit-window))
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;elfeed-org-and-elfeed-goodies-setup&#34;&gt;Elfeed-org and elfeed-goodies setup &lt;code&gt;[/]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Using an org source is the easiest way to organise my RSS feeds for reading with Elfeed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; use an org file to organise feeds&lt;/span&gt;
(use-package elfeed-org
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (setq rmh-elfeed-org-files (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/elfeed.org&amp;#34;&lt;/span&gt;))
  )

(use-package elfeed-goodies
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :init
  (elfeed-goodies/setup)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;consider-storing-the-feed-sources-here-in-org-format&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Consider storing the Feed sources here in org format&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-17 Sun 18:11] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This will need an export to a source org file per the settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;loading-completed-1&#34;&gt;Loading completed&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loaded Elfeed customisations&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;w3m-customisation&#34;&gt;w3m customisation&lt;/h2&gt;

&lt;p&gt;w3m is a suprisingly able browser that is able to cater to most websites, except those that are a little too rich with java and etc. Being within Emacs, and launching almost instantly with significantly less overhead in terms of RAM no matter how many tabs are open - it is also easy to customise the behavior as needed and is an excellent method of distraction free browsing.&lt;/p&gt;

&lt;p&gt;However, it pays to have handy shortcuts to open a link in the default browser of the OS. This is especially to cater to heavier websites. The w3m package would need to be installed using the package manager of the OS to use w3m.&lt;/p&gt;

&lt;p&gt;A few snippets were sourced from: &lt;a href=&#34;http://beatofthegeek.com/2014/02/my-setup-for-using-emacs-as-web-browser.html&#34; target=&#34;_blank&#34;&gt;http://beatofthegeek.com/2014/02/my-setup-for-using-emacs-as-web-browser.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;setting-default-browser-to-be-w3m&#34;&gt;Setting default browser to be w3m&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;(setq browse-url-browser-function &amp;#39;browse-url-default-browser)&lt;/span&gt;
(setq browse-url-browser-function &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w3m-goto-url-new-session&lt;/span&gt;)
(setq w3m-default-display-inline-images &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;appending-http-to-web-addresses-entered-by-hand&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Appending HTTP to web addresses entered by hand&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 07:40]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Check whether this is necessary&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;when I want to enter the web address all by hand&lt;/span&gt;
(defun w3m-open-site (site)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Opens site in new w3m session with &amp;#39;http://&amp;#39; appended&amp;#34;&lt;/span&gt;
  (interactive
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;read-string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter website address(default: w3m-home):&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; w3m-home-page &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; )))
  (w3m-goto-url-new-session
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://&amp;#34;&lt;/span&gt; site)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;changing-w3m-shortcuts-for-better-tabbed-browsing&#34;&gt;Changing w3m shortcuts for better tabbed browsing&lt;/h3&gt;

&lt;p&gt;Source:  Sacha Chua : &lt;a href=&#34;http://sachachua.com/blog/2008/09/emacs-and-w3m-making-tabbed-browsing-easier/&#34; target=&#34;_blank&#34;&gt;http://sachachua.com/blog/2008/09/emacs-and-w3m-making-tabbed-browsing-easier/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(eval-after-load &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w3m&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(progn
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; w3m-mode-map &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w3m-previous-buffer&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; w3m-mode-map &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w3m-next-buffer&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; w3m-mode-map &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w3m-close-window&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;default-external-browser-settings&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Default external browser settings&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 07:37]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to have this change depending whether the OS is Linux or Mac OS&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun wicked/w3m-open-current-page-in-default-browser ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Open the current URL in Mozilla Firefox.&amp;#34;&lt;/span&gt;
  (interactive)
  (browse-url-default-browser w3m-current-url)) &lt;span style=&#34;color:#75715e&#34;&gt;;; (1)&lt;/span&gt;

(defun wicked/w3m-open-link-or-image-in-default-browser ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Open the current link or image in Firefox.&amp;#34;&lt;/span&gt;
  (interactive)
  (browse-url-default-browser (or (w3m-anchor) &lt;span style=&#34;color:#75715e&#34;&gt;;; (2)&lt;/span&gt;
                                         (w3m-image)))) &lt;span style=&#34;color:#75715e&#34;&gt;;; (3)&lt;/span&gt;

(eval-after-load &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w3m&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(progn
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; w3m-mode-map &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wicked/w3m-open-current-page-in-default-browser&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; w3m-mode-map &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;O&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wicked/w3m-open-link-or-image-in-default-browser&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;wikipedia-search&#34;&gt;Wikipedia search&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun wikipedia-search (search-term)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Search for SEARCH-TERM on wikipedia&amp;#34;&lt;/span&gt;
  (interactive
   (let ((term (if mark-active
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-substring&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;region-beginning&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;region-end&lt;/span&gt;))
                 (word-at-point))))
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;read-string&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wikipedia (%s):&amp;#34;&lt;/span&gt; term) &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; term)))
   )
  (browse-url
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://en.m.wikipedia.org/w/index.php?search=&amp;#34;&lt;/span&gt;
    search-term
    ))
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;access-hacker-news&#34;&gt;Access Hacker News&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun hn ()
  (interactive)
  (browse-url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://news.ycombinator.com&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;open-specific-browser-depending-on-the-url&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Open specific browser depending on the URL&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-07 Thu 11:59] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This is worth setting up. It would be convenient for frequently visited websites like reddit and others, to open in the external browser, especially as they do not render well within w3m.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source : &lt;a href=&#34;http://ergoemacs.org/emacs/emacs%5Fset%5Fdefault%5Fbrowser.Html&#34; target=&#34;_blank&#34;&gt;http://ergoemacs.org/emacs/emacs%5Fset%5Fdefault%5Fbrowser.Html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; use browser depending on url&lt;/span&gt;
(setq
 browse-url-browser-function
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wikipedia\\.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; browse-url-firefox)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; browse-url-chromium)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thefreedictionary\\.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; eww-browse-url)
  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; browse-url-default-browser)
  ))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ediff&#34;&gt;ediff&lt;/h2&gt;

&lt;p&gt;I have to diff between org files pretty often, and need the headings to be unfolded.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://emacs.stackexchange.com/questions/21335/prevent-folding-org-files-opened-by-ediff&#34; target=&#34;_blank&#34;&gt;http://emacs.stackexchange.com/questions/21335/prevent-folding-org-files-opened-by-ediff&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Check for org mode and existence of buffer&lt;/span&gt;
(defun f-ediff-org-showhide (buf command &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; cmdargs)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;If buffer exists and is orgmode then execute command&amp;#34;&lt;/span&gt;
  (when buf
    (when (&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-local-value&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;major-mode&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;get-buffer&lt;/span&gt; buf)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-mode&lt;/span&gt;)
      (save-excursion (&lt;span style=&#34;color:#a6e22e&#34;&gt;set-buffer&lt;/span&gt; buf) (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt; command cmdargs)))))

(defun f-ediff-org-unfold-tree-element ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unfold tree at diff location&amp;#34;&lt;/span&gt;
  (f-ediff-org-showhide ediff-buffer-A &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-reveal&lt;/span&gt;)
  (f-ediff-org-showhide ediff-buffer-B &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-reveal&lt;/span&gt;)
  (f-ediff-org-showhide ediff-buffer-C &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-reveal&lt;/span&gt;))

(defun f-ediff-org-fold-tree ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fold tree back to top level&amp;#34;&lt;/span&gt;
  (f-ediff-org-showhide ediff-buffer-A &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hide-sublevels&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
  (f-ediff-org-showhide ediff-buffer-B &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hide-sublevels&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
  (f-ediff-org-showhide ediff-buffer-C &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hide-sublevels&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))

(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ediff-select-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f-ediff-org-unfold-tree-element&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ediff-unselect-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f-ediff-org-fold-tree&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;hugo&#34;&gt;Hugo&lt;/h2&gt;

&lt;h3 id=&#34;function-to-create-specific-properties-for-a-blog-post&#34;&gt;Function to create specific properties for a blog post&lt;/h3&gt;

&lt;p&gt;Modified this function from:&lt;/p&gt;

&lt;h4 id=&#34;defining-content-directory&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Defining content directory&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:06]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to check if this is still required since I have switche to ox-hugo&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defvar hugo-content-dir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_gits/hugo-sr/content/post/&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Path to Hugo&amp;#39;s content directory&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;ensuring-properties-exist-and-creating-if-they-dont-exist&#34;&gt;Ensuring properties exist and creating if they dont exist&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun hugo-ensure-property (property)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Make sure that a property exists. If not, it will be created.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Returns the property name if the property has been created, otherwise nil.&amp;#34;&lt;/span&gt;
  (org-id-get-create)
  (if (org-entry-get &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; property)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
    (progn (org-entry-put &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; property &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
           property)))

(defun hugo-ensure-properties ()

  (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dash&lt;/span&gt;)
  (let ((&lt;span style=&#34;color:#a6e22e&#34;&gt;current-time&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;format-time-string&lt;/span&gt;
                       (org-time-stamp-format &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;) (org-current-time)))
        first)
    (save-excursion
      (setq first (--first it (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;hugo-ensure-property
                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HUGO_TAGS&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HUGO_CATEGORIES&amp;#34;&lt;/span&gt;))))
      (unless (org-entry-get &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HUGO_DATE&amp;#34;&lt;/span&gt;)
        (org-entry-put &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EXPORT_DATE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current-time&lt;/span&gt;)))
    (org-entry-put &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EXPORT_FILE_NAME&amp;#34;&lt;/span&gt; (org-id-get-create))
    (org-entry-put &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EXPORT_HUGO_CUSTOM_FRONT_MATTER&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:profile false&amp;#34;&lt;/span&gt;)
    (when first
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;goto-char&lt;/span&gt; (org-entry-beginning-position))
      &lt;span style=&#34;color:#75715e&#34;&gt;;; The following opens the drawer&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;forward-line&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;beginning-of-line&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      (when (&lt;span style=&#34;color:#a6e22e&#34;&gt;looking-at&lt;/span&gt; org-drawer-regexp)
        (org-flag-drawer &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
      &lt;span style=&#34;color:#75715e&#34;&gt;;; And now move to the drawer property&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;search-forward&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; first &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;end-of-line&lt;/span&gt;))
    first))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;hugo-function-calling-the-above&#34;&gt;Hugo function calling the above&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun hugo ()
  (interactive)
  (unless (hugo-ensure-properties)
    (let* ((type    (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type = \&amp;#34;&amp;#34;&lt;/span&gt; (org-entry-get &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HUGO_TYPE&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#34;\n&amp;#34;&lt;/span&gt;))
           (date     (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date = \&amp;#34;&amp;#34;&lt;/span&gt;
                             (&lt;span style=&#34;color:#a6e22e&#34;&gt;format-time-string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%Y-%m-%d&amp;#34;&lt;/span&gt;
                                                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;encode-time&lt;/span&gt;
                                                        (org-parse-time-string
                                                         (org-entry-get &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HUGO_DATE&amp;#34;&lt;/span&gt;))) &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#34;\n&amp;#34;&lt;/span&gt;))
           (tags     (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tags = [ \&amp;#34;&amp;#34;&lt;/span&gt;
                             (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapconcat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;identity&lt;/span&gt;
                                        (split-string
                                         (org-entry-get &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HUGO_TAGS&amp;#34;&lt;/span&gt;)
                                         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\( *, *\\)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#34;, \&amp;#34;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#34; ]\n&amp;#34;&lt;/span&gt;))
           (fm (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+++\n&amp;#34;&lt;/span&gt;
                       title
		       type
                       date
                       tags
                       topics
                       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+++\n\n&amp;#34;&lt;/span&gt;))
           (coding-system-for-write buffer-file-coding-system)
           (backend  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;md&lt;/span&gt;)
           (blog))
      &lt;span style=&#34;color:#75715e&#34;&gt;;; try to load org-mode/contrib/lisp/ox-gfm.el and use it as backend&lt;/span&gt;
      (if (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ox-gfm&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
          (setq backend &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gfm&lt;/span&gt;)
        (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ox-md&lt;/span&gt;))
      (setq blog (org-export-as backend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))
      &lt;span style=&#34;color:#75715e&#34;&gt;;; Normalize save file path&lt;/span&gt;
      (unless (&lt;span style=&#34;color:#a6e22e&#34;&gt;string-match&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^[/~]&amp;#34;&lt;/span&gt; file)
        (setq file (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; hugo-content-dir file))
        (unless (&lt;span style=&#34;color:#a6e22e&#34;&gt;string-match&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\.md$&amp;#34;&lt;/span&gt; file)
          (setq file (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.md&amp;#34;&lt;/span&gt;)))
        &lt;span style=&#34;color:#75715e&#34;&gt;;; save markdown&lt;/span&gt;
        (with-temp-buffer
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; fm)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; blog)
          (untabify (&lt;span style=&#34;color:#a6e22e&#34;&gt;point-min&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;point-max&lt;/span&gt;))
          (write-file file)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Exported to %s&amp;#34;&lt;/span&gt; file))))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ox-hugo-setup&#34;&gt;ox-hugo setup&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package ox-hugo
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :defer &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :after ox
  :custom
  (org-hugo--tag-processing-fn-replace-with-hyphens-maybe &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;lob&#34;&gt;LOB&lt;/h2&gt;

&lt;p&gt;There are a bunch of scripts that I would like ingested into the Library of Babel to be available for ready use. In some cases, with specific and relatively simple actions these are useful, and generally easier to define that Emacs Functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(org-babel-lob-ingest &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_projects/sr-snip-lob/README.org&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;scimax-customisations&#34;&gt;Scimax customisations&lt;/h2&gt;

&lt;p&gt;These are settings which custmise scimax specific variables. These are separated out here so that it becomes easier to try out Emacs configurations that are outside scimax.&lt;/p&gt;

&lt;h3 id=&#34;org-db&#34;&gt;org-Db&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;`org-db&amp;rsquo; is an org-mode database. When it is active every org-mode file you visit will be indexed into a sqlite database. In each file, each headline with its title, tags and properties are stored, and every link in each file is stored.&lt;/p&gt;

&lt;p&gt;This becomes useful because you can then search all of your org-files and jump to different locations.&lt;/p&gt;

&lt;p&gt;Scimax help documentation&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package emacsql-sqlite
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-db&lt;/span&gt;)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;scimax-autoformat-and-corrections&#34;&gt;Scimax autoformat and corrections&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-07 Thu 16:24] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Changing keyboard shortcut for equation insertion as this interferes with i3wm functioning.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: any expansion can be undone with C-/&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scimax-autoformat-mode&lt;/span&gt;)
(scimax-toggle-abbrevs &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scimax-month-abbreviations&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;+1&lt;/span&gt;)
(scimax-toggle-abbrevs &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scimax-transposition-abbreviations&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;+1&lt;/span&gt;)
(scimax-toggle-abbrevs &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scimax-misc-abbreviations&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
(scimax-toggle-abbrevs &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scimax-weekday-abbreviations&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;+1&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s-q&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-latex-math-region-or-point&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;scimax-hotspots&#34;&gt;Scimax Hotspots&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq scimax-user-hotspot-commands
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Agenda All&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (lambda () (org-agenda &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;)))
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Agenda Office&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (lambda () (org-agenda &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt;)))
	(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mail&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (lambda ()
                    (if (&lt;span style=&#34;color:#a6e22e&#34;&gt;get-buffer&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*mu4e-headers*&amp;#34;&lt;/span&gt;)
                        (progn
                          (switch-to-buffer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*mu4e-headers*&amp;#34;&lt;/span&gt;)
                          (delete-other-windows))
                      (mu4e))))
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bookmarks&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (lambda () (helm-source-bookmarks)))
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Reload Scimax babel&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (lambda () (org-babel-load-file (&lt;span style=&#34;color:#a6e22e&#34;&gt;expand-file-name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sr-config.org&amp;#34;&lt;/span&gt; user-emacs-directory))))
        )
      )

(setq scimax-user-hotspot-locations
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CV Org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/org_cv/CV_Shreyas_Ragavan.org&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scd - scimax dir&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/&amp;#34;&lt;/span&gt; )
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scu - scimax user dir&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/&amp;#34;&lt;/span&gt;)
        ( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sco - scimax org conf&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/sr-config.org&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blog&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/blog-book.org&amp;#34;&lt;/span&gt;)
	(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_gits/&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;project&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_projects/&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cheatsheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_cheatsheets/&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;passwords&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/secrets.org.gpg&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;references&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/bibliography/references.bib&amp;#34;&lt;/span&gt;)
        )
      )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;scimax-elfeed&#34;&gt;Scimax Elfeed&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scimax-elfeed&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;scimax-notebook-directory&#34;&gt;Scimax Notebook directory&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq nb-notebook-directory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_projects/&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;scimax-notebook&#34;&gt;Scimax notebook&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-s n&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nb-open&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;enabling-scimax-statistics&#34;&gt;Enabling Scimax Statistics&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scimax-statistics&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;scimax-python&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Scimax Python&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scimax-org-babel-python&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ob-ipython&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scimax-ob&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scimax-org-babel-ipython-upstream&lt;/span&gt;)
(setq ob-ipython-exception-results &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
(scimax-ob-ipython-turn-on-eldoc)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;bibliography-settings-and-customisation&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Bibliography settings and customisation&lt;/h3&gt;

&lt;p&gt;This was setup a long time ago to convert past technical repots into org mode, with references made in correct technical style. This project is on hold.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;doi-utils&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-ref-wos&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-ref-pubmed&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-ref-arxiv&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-ref-bibtex&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-ref-pdf&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-ref-url-utils&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-ref-helm&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; note and bib location&lt;/span&gt;

(setq org-ref-bibliography-notes &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/references/references.org&amp;#34;&lt;/span&gt;
      org-ref-bibliography-notes &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/references/research_notes.org&amp;#34;&lt;/span&gt;
      org-ref-default-bibliography &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/references/references.bib&amp;#34;&lt;/span&gt;)
      org-ref-pdf-directory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/references/pdfs/&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; setting up helm-bibtex&lt;/span&gt;
(setq helm-bibtex-bibliography &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/references/references.bib&amp;#34;&lt;/span&gt;
      helm-bibtex-library-path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/org/references/pdfs&amp;#34;&lt;/span&gt;
      helm-bibtex-notes-path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_org/references/research_notes.org&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;python&#34;&gt;Python &lt;code&gt;[0/4]&lt;/code&gt;&lt;/h2&gt;

&lt;h3 id=&#34;using-miniconda&#34;&gt;Using miniconda&lt;/h3&gt;

&lt;h3 id=&#34;setup-virtual-environment-approach&#34;&gt;&lt;span class=&#34;org-todo todo NEXT&#34;&gt;NEXT&lt;/span&gt; setup virtual environment approach&lt;/h3&gt;

&lt;h3 id=&#34;setup-conda-especially-for-auto-complete&#34;&gt;&lt;span class=&#34;org-todo todo NEXT&#34;&gt;NEXT&lt;/span&gt; setup conda, especially for auto complete&lt;/h3&gt;

&lt;h3 id=&#34;general-config&#34;&gt;General config&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 14:52] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This is to take care of the annoying indentation message that always pops up.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq python-indent-guess-indent-offset &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;autocomplete-for-python-blocks&#34;&gt;&lt;span class=&#34;org-todo todo NEXT&#34;&gt;NEXT&lt;/span&gt; Autocomplete for python blocks&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;company-backends&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;company-ob-ipython&lt;/span&gt;)
(company-mode)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;emacs-jupyter&#34;&gt;&lt;span class=&#34;org-todo todo NEXT&#34;&gt;NEXT&lt;/span&gt; Emacs-jupyter&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 14:48] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Since I am more familiar with ob-ipython and there are a bunch of interesting features already implemented in it like the automatic setting of a kernel and file names for graphic outputs and so on - I will explore jupyter-emacs at a later date.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package jupyter
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :defer &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  &lt;span style=&#34;color:#75715e&#34;&gt;;(org-babel-load-languages &amp;#39;(jupyter .t))&lt;/span&gt;
  (setq org-babel-default-header-args:jupyter-python &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((:async &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;)
                                                       (:session &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jipython&amp;#34;&lt;/span&gt;)
                                                       (:kernel &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python3&amp;#34;&lt;/span&gt;)))
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;alfred-integration&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Alfred Integration&lt;/h2&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://github.com/jjasghar/alfred-org-capture&#34; target=&#34;_blank&#34;&gt;https://github.com/jjasghar/alfred-org-capture&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(if (system-type-is-darwin)
    (progn
      &lt;span style=&#34;color:#75715e&#34;&gt;;;; Code:&lt;/span&gt;
      (defun make-orgcapture-frame ()
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Create a new frame and run org-capture.&amp;#34;&lt;/span&gt;
        (interactive)
        (make-frame &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;remember&amp;#34;&lt;/span&gt;) (width &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;) (height &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
                      (top &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;) (left &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;)
                      (font &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-apple-Monaco-medium-normal-normal-*-13-*-*-*-m-0-iso10646-1&amp;#34;&lt;/span&gt;)
                      ))
        (select-frame-by-name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;remember&amp;#34;&lt;/span&gt;)
        (org-capture))
      )
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;project-publishing-setup&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Project publishing setup &lt;code&gt;[0/3]&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This is under construction and was initially started with the idea of having custom publishing settings for different projects. I was initially looking at this for publishing my hugo blog. However, the need has been negated with the excellent ox-hugo package.&lt;/p&gt;

&lt;h3 id=&#34;ox-tufte&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; ox-Tufte&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;This is an export backend for Org-mode that exports buffers to HTML that is compatible with Tufte CSS out of the box (meaning no CSS modifications needed).&lt;/p&gt;

&lt;p&gt;It’s still a work-in-progress, but it works well right now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dakrone/ox-tufte&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package ox-tufte
  :defer &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ox-tufte&lt;/span&gt;)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;exporting-org-projects&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Exporting org projects&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(
 setq org-publish-project-alist
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(
   (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org-repo&amp;#34;&lt;/span&gt;
    :base-directory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./&amp;#34;&lt;/span&gt;
    :base-extension &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org&amp;#34;&lt;/span&gt;
    :publishing-directory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/shreyas/my_projects/dotemacs&amp;#34;&lt;/span&gt;
    :EXPORT_FILE_NAME &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;README.org&amp;#34;&lt;/span&gt;
    :recursive f
    :publishing-function org-html-publish-to-html
    &lt;span style=&#34;color:#75715e&#34;&gt;;; :html-head &amp;#34;&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;http://dakrone.github.io/org2.css&amp;#34; type=&amp;#34;text/css&amp;#34; /&amp;gt;&amp;#34;&lt;/span&gt;
    )

   (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;md&amp;#34;&lt;/span&gt;
    :base-directory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./&amp;#34;&lt;/span&gt;
    :base-extension &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org&amp;#34;&lt;/span&gt;
    :publishing-directory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./export/&amp;#34;&lt;/span&gt;
    :recursive &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
    :publishing-function org-md-export-to-markdown
    )

   (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Documentation - html + md&amp;#34;&lt;/span&gt;
    :components (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;html-static&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;md&amp;#34;&lt;/span&gt; )
    )))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;function-for-exporting-dotemacs-config&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Function for exporting dotemacs config &lt;code&gt;[&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;]&lt;/code&gt;&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-14 Thu 14:05] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Save the filename as variables.&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-14 Thu 13:30] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Add a condition to check if the directory exists.&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-10 Sun 07:16] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Add a line to revert target export files if they are open. Prefer exporting the org file rather than copying.&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the beginning of a function to perform 3 exports:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Export to my hugo website as a part of my documentation (ox-hugo)&lt;/li&gt;
&lt;li&gt;Copy the org file to my github repo.&lt;/li&gt;
&lt;li&gt;Tangle the copied org file to the above github repository to have the script ready.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Maintaining the documentation on my website does not make it easy to others to view the changes in the configuration and fork or download the same as an org file or emacs-lisp script. Therefore the config that I publish should be maintained in it&amp;rsquo;s own repository.&lt;/p&gt;

&lt;p&gt;As of now, I&amp;rsquo;m calling this function from my Emacs config file, and need to improve the above workflow.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun sr/dotemacs-export()
  (interactive)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;If directories exist - exporting Org config to Hugo blog, and to Github repository org file and lisp&amp;#34;&lt;/span&gt;

  (if (&lt;span style=&#34;color:#a6e22e&#34;&gt;file-directory-p&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_projects/dotemacs&amp;#34;&lt;/span&gt;)
      (progn
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;copy-file&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/sr-config.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_projects/dotemacs/README.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OK-IF-ALREADY-EXISTS&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;copy-file&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/scimax/user/sr-config.el&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_projects/dotemacs/config.el&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OK-IF-ALREADY-EXISTS&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;;; (org-babel-tangle-file  &amp;#34;~/my_projects/dotemacs/README.org&amp;#34; &amp;#34;~/my_projects/dotemacs/config.el&amp;#34;)&lt;/span&gt;
        )
    )
  (if (&lt;span style=&#34;color:#a6e22e&#34;&gt;file-directory-p&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_gits/hugo-sr&amp;#34;&lt;/span&gt;)
      (progn
        (org-hugo-export-to-md)
        )
    )
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;mu4e&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; mu4e&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 14:53] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The use-package documentation specifies a method to do this via use-package itself, without enclosing the whole snippet within a if clause.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 20:43] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The mu4e config has to be broken down and the send email with htmlize has to be evaluated.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:04] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
As of now, I do not acess my email on different computers via Emacs. The end goal is to setup a mail server via VPS and store my email online, which can then be searched via Emacs and mu4e from any location.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(if (system-type-is-darwin)
    (progn
      (use-package mu4e
        :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
        :config
        (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mu4e&lt;/span&gt;)
        (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mu4e-contrib&lt;/span&gt;)
        (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-mu4e&lt;/span&gt;)

        (setq
         mue4e-headers-skip-duplicates  &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
         mu4e-view-show-images &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
         mu4e-view-show-addresses &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t&lt;/span&gt;
         mu4e-compose-format-flowed &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
         mu4e-update-interval &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
         message-ignored-cited-headers &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nil&lt;/span&gt;
         mu4e-date-format &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%y/%m/%d&amp;#34;&lt;/span&gt;
         mu4e-headers-date-format &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%Y/%m/%d&amp;#34;&lt;/span&gt;
         mu4e-change-filenames-when-moving &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
         mu4e-attachments-dir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Downloads/Mail-Attachments/&amp;#34;&lt;/span&gt;
         mu4e-maildir (&lt;span style=&#34;color:#a6e22e&#34;&gt;expand-file-name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/my_mail/fmail&amp;#34;&lt;/span&gt;)
         )

        &lt;span style=&#34;color:#75715e&#34;&gt;;; mu4e email refiling loations&lt;/span&gt;
        (setq
         mu4e-refile-folder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Archive&amp;#34;&lt;/span&gt;
         mu4e-trash-folder  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Trash&amp;#34;&lt;/span&gt;
         mu4e-sent-folder   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Sent&amp;#34;&lt;/span&gt;
         mu4e-drafts-folder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Drafts&amp;#34;&lt;/span&gt;
         )

        &lt;span style=&#34;color:#75715e&#34;&gt;;; setup some handy shortcuts&lt;/span&gt;
        (setq mu4e-maildir-shortcuts
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/INBOX&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;?i&lt;/span&gt;)
	        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Sent&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;?s&lt;/span&gt;)
	        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Archive&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;?a&lt;/span&gt;)
	        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Trash&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;?t&lt;/span&gt;)))

        &lt;span style=&#34;color:#75715e&#34;&gt;;;store link to message if in header view, not to header query&lt;/span&gt;
        (setq org-mu4e-link-query-in-headers-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
              org-mu4e-convert-to-html &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; org -&amp;gt; html&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;;; Enabling view in browser for HTML heavy emails that don&amp;#39;t render well&lt;/span&gt;
        (add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mu4e-view-actions&lt;/span&gt;
	             &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ViewInBrowser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mu4e-action-view-in-browser) &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

        (&lt;span style=&#34;color:#a6e22e&#34;&gt;autoload&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mu4e&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mu4e&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mu for Emacs.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

        &lt;span style=&#34;color:#75715e&#34;&gt;;; Config for sending email&lt;/span&gt;
        (setq
         message-send-mail-function &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message-send-mail-with-sendmail&lt;/span&gt;
         send-mail-function &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sendmail-send-it&lt;/span&gt;
         message-kill-buffer-on-exit &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
         )

        &lt;span style=&#34;color:#75715e&#34;&gt;;; allow for updating mail using &amp;#39;U&amp;#39; in the main view:&lt;/span&gt;
        (setq mu4e-get-mail-command  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mbsync -a -q&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#75715e&#34;&gt;;; Don&amp;#39;t keep asking for confirmation for every action&lt;/span&gt;
        (defun my-mu4e-mark-execute-all-no-confirm ()
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Execute all marks without confirmation.&amp;#34;&lt;/span&gt;
          (interactive)
          (mu4e-mark-execute-all &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no-confirm&lt;/span&gt;))
        &lt;span style=&#34;color:#75715e&#34;&gt;;; mapping x to above function&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; mu4e-headers-mode-map &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;my-mu4e-mark-execute-all-no-confirm)
        )
      &lt;span style=&#34;color:#75715e&#34;&gt;;; source: http://matt.hackinghistory.ca/2016/11/18/sending-html-mail-with-mu4e/&lt;/span&gt;

      &lt;span style=&#34;color:#75715e&#34;&gt;;; this is stolen from John but it didn&amp;#39;t work for me until I&lt;/span&gt;
      &lt;span style=&#34;color:#75715e&#34;&gt;;; made those changes to mu4e-compose.el&lt;/span&gt;
      (defun htmlize-and-send ()
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;When in an org-mu4e-compose-org-mode message, htmlize and send it.&amp;#34;&lt;/span&gt;
        (interactive)
        (when
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;member&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org~mu4e-mime-switch-headers-or-body&lt;/span&gt; post-command-hook)
          (org-mime-htmlize)
          (org-mu4e-compose-org-mode)
          (mu4e-compose-mode)
          (message-send-and-exit)))

      &lt;span style=&#34;color:#75715e&#34;&gt;;; This overloads the amazing C-c C-c commands in org-mode with one more function&lt;/span&gt;
      &lt;span style=&#34;color:#75715e&#34;&gt;;; namely the htmlize-and-send, above.&lt;/span&gt;
      (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-ctrl-c-ctrl-c-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;htmlize-and-send&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
      )
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;theme-and-visuals&#34;&gt;Theme and visuals&lt;/h2&gt;

&lt;h3 id=&#34;emacsclient-or-frame-specific-settings&#34;&gt;Emacsclient or frame specific settings&lt;/h3&gt;

&lt;p&gt;Since I run emacs as a daemon and call the emacsclient, the background has to be set for new frames. Additionally, I&amp;rsquo;d like the frames to launch full screen.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq default-frame-alist
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#75715e&#34;&gt;;; (background-color . &amp;#34;whitesmoke&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;;; (foreground-color . &amp;#34;black&amp;#34;)&lt;/span&gt;
        (fullscreen &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; maximized)
        ))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;custom-safe-themes-and-background-change-to-light-grey&#34;&gt;Custom Safe themes and Background change to light grey&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq custom-safe-themes &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;;; (set-background-color &amp;#34;whitesmoke&amp;#34;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;disabling-leuven-and-loading-other-theme&#34;&gt;Disabling leuven and loading other theme&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(disable-theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leuven&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;;;(load-theme &amp;#39;spacemacs-dark t)&lt;/span&gt;
(load-theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zenburn&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;initial-setup-of-zenburn&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Initial setup of Zenburn&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; use variable-pitch fonts for some headings and titles&lt;/span&gt;
(setq zenburn-use-variable-pitch &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; scale headings in org-mode&lt;/span&gt;
(setq zenburn-scale-org-headlines &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; scale headings in outline-mode&lt;/span&gt;
(setq zenburn-scale-outline-headlines &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;use-package-based-template-for-customising-zenburn&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Use-package based template for customising zenburn&lt;/h3&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://github.com/m-parashar/emax64/issues/5&#34; target=&#34;_blank&#34;&gt;https://github.com/m-parashar/emax64/issues/5&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package zenburn-theme
  :demand &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (load-theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zenburn&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-face&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; :italic &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-doc-face&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; :italic &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (zenburn-with-color-variables
    (set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;button&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; :foreground zenburn-yellow-2)
    (set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
                        :background zenburn-bg-05
                        :height mp/font-size-default
                        :font mp/font-family)
    (set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;help-argument-name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; :foreground zenburn-orange :italic &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
    (set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hl-line&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; :background zenburn-bg+1)
    (set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;header-line&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
                        :background zenburn-bg-1
                        :box &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(:line-width &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; :color &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;zenburn-bg-1)
                        :height mp/font-size-header-line)
    (set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mode-line&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
                        :box &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(:line-width &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; :color &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;zenburn-bg-1)
                        :foreground zenburn-bg+3
                        :height mp/font-size-mode-line)
    (set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mode-line-inactive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
                        :box &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(:line-width &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; :color &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;zenburn-bg-05)
                        :foreground zenburn-bg+3
                        :height mp/font-size-mode-line)
    (set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;region&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
                        :background zenburn-fg-1
                        :distant-foreground &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unspecified&lt;/span&gt;)
    (set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vertical-border&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; :foreground zenburn-bg))

  &lt;span style=&#34;color:#75715e&#34;&gt;;; NOTE: See https://github.com/bbatsov/zenburn-emacs/issues/278.&lt;/span&gt;
  (zenburn-with-color-variables
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapc&lt;/span&gt;
     (lambda (face)
       (when (&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; (face-attribute face :background) zenburn-bg)
         (set-face-attribute face &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; :background &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unspecified&lt;/span&gt;)))
     (face-list))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;font-customisation-based-on-os&#34;&gt;Font Customisation based on OS&lt;/h3&gt;

&lt;p&gt;The same font is named differently in Antergos (Linux) and in the Mac OS.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; For Linux&lt;/span&gt;
(if (system-type-is-gnu)
    (set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; :family &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ttf-iosevka&amp;#34;&lt;/span&gt; :height &lt;span style=&#34;color:#ae81ff&#34;&gt;140&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;;; For Mac OS&lt;/span&gt;
(if (system-type-is-darwin)
    (set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; :family &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Iosevka Type&amp;#34;&lt;/span&gt; :height &lt;span style=&#34;color:#ae81ff&#34;&gt;160&lt;/span&gt; ))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;setting-font-faces-for-headline-level&#34;&gt;Setting font faces for headline level&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-28 Thu 07:09] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This is available as in-built settings for the zenburn theme. However, once the font is changed, the&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(custom-set-faces
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(org-level-1 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (:inherit outline-1 :height &lt;span style=&#34;color:#ae81ff&#34;&gt;1.2&lt;/span&gt;))))
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(org-level-2 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (:inherit outline-2 :height &lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt;))))
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(org-level-3 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (:inherit outline-3 :height &lt;span style=&#34;color:#ae81ff&#34;&gt;1.05&lt;/span&gt;))))
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(org-level-4 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (:inherit outline-4 :height &lt;span style=&#34;color:#ae81ff&#34;&gt;1.00&lt;/span&gt;))))
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(org-level-5 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (:inherit outline-5 :height &lt;span style=&#34;color:#ae81ff&#34;&gt;.95&lt;/span&gt;))))
 )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;spaceline-modeline-configuration&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Spaceline : modeline configuration&lt;/h3&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://pragmaticemacs.com/emacs/get-that-spacemacs-look-without-spacemacs/&#34; target=&#34;_blank&#34;&gt;http://pragmaticemacs.com/emacs/get-that-spacemacs-look-without-spacemacs/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package spaceline
  :demand &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :init
  (setq powerline-default-separator &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;arrow-fade&lt;/span&gt;)
  :config
  (disable-theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;smart-mode-line-light&lt;/span&gt;)
  (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;spaceline-config&lt;/span&gt;)
  (spaceline-emacs-theme)
  (spaceline-toggle-buffer-position-off)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;basic-cosmetics-dot-review-and-convert-to-use-package-style&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Basic cosmetics. Review &amp;amp; Convert to use-package style&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:20]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
These settings have to be cleaned up and the code optimised.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-hide-leading-stars &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;;;(setq org-alphabetical-lists t)&lt;/span&gt;
(setq org-src-fontify-natively &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;;; you want this to activate coloring in blocks&lt;/span&gt;
(setq org-src-tab-acts-natively &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; you want this to have completion in blocks&lt;/span&gt;
(setq org-hide-emphasis-markers &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; to hide the *,=, or / markers&lt;/span&gt;
(setq org-pretty-entities &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)       &lt;span style=&#34;color:#75715e&#34;&gt;;; to have \alpha, \to and others display as utf8 http://orgmode.org/manual/Special-symbols.html&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; Highlighting lines in the agenda, where the cursor is placed.&lt;/span&gt;
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-agenda-mode-hook&lt;/span&gt; (lambda () (hl-line-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;;; Setting up clean indenting below respective headlines at startup. - from the org mode website&lt;/span&gt;
(setq org-startup-indented &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; ;; use org bullets from emacsist&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; (use-package org-bullets&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   :ensure t&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   :init&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   :config&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   (add-hook &amp;#39;org-mode-hook (lambda () (org-bullets-mode 1))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;striking-out-done-headlines&#34;&gt;Striking out Done headlines&lt;/h3&gt;

&lt;p&gt;source: Sacha Chua&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-fontify-done-headline &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(custom-set-faces
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(org-done ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (:foreground &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PaleGreen&amp;#34;&lt;/span&gt;
			     :weight normal
			     :strike-through &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))))
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(org-headline-done
   ((((class color) (min-colors &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) (background dark))
     (:foreground &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LightSalmon&amp;#34;&lt;/span&gt; :strike-through &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;formatting-keywords-as-boxes-with-inverted-colors&#34;&gt;Formatting keywords as boxes with inverted colors&lt;/h3&gt;

&lt;p&gt;Source : SO &lt;a href=&#34;https://stackoverflow.com/questions/12707492/add-custom-markers-to-emacs-org-mode&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt; ,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-todo&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
                    :box &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(:line-width &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
                           :color &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;
                           :style released-button)
                    :inverse-video &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
                    )
(set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-done&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
                    :box &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(:line-width &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
                           :color &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;
                           :style released-button)
                    :inverse-video &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
                    )
(set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-priority&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
                    :inherit font-lock-keyword-face
                    :inverse-video &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
                    :box &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(:line-width &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
                           :color &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;
                           :style released-button)
                    )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;background-color-for-org-source-blocks&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Background color for org source Blocks&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;(set-face-background &amp;#39;org-block-emacs-lisp &amp;#34;black&amp;#34;)&lt;/span&gt;
(set-face-background &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-block&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;visual-fill-column&#34;&gt;visual-fill-column&lt;/h3&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://github.com/wasamasa/dotemacs/blob/master/init.org&#34; target=&#34;_blank&#34;&gt;https://github.com/wasamasa/dotemacs/blob/master/init.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I call the visual line mode once the visual fill column is called. In this way I can ensure that the columns are as long as I want them to be and the lines are globally visually filled.&lt;/p&gt;

&lt;p&gt;For some strange reason, the visual column mode seems to be removed every time the file is saved (when a single buffer is in view). When the window is split, the mode comes back on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package visual-fill-column
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (global-visual-fill-column-mode)
  (setq-default fill-column &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)
  (setq-default visual-fill-column-center-text &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (setq split-window-preferred-function
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;visual-fill-column-split-window-sensibly&lt;/span&gt;)
  (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;visual-fill-column-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;visual-line-mode)
  (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;turn-on-visual-fill-column-mode&lt;/span&gt;)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>R notes and snippets</title>
      <link>https://shrysr.github.io/docs/r-notes-snippets/</link>
      <pubDate>Tue, 09 Apr 2019 15:36:50 -0600</pubDate>
      
      <guid>https://shrysr.github.io/docs/r-notes-snippets/</guid>
      <description>

&lt;h2 id=&#34;long-wide-formats-example-for-gathering&#34;&gt;Long &amp;lt;-&amp;gt; Wide formats : example for gathering&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;library&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tidyverse&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;## Defining a sample tribble with several duplicates&lt;/span&gt;
a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; tribble(
    &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;IDS, &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client id 1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client id 2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client id 3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client id 4&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;old app&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new app&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;767&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;888&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; , &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt; , &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;222&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;333&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;455&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;677&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;222&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;333&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;343&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;677&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;
)


&lt;span style=&#34;color:#75715e&#34;&gt;## Defining vector to form column names&lt;/span&gt;
vec1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
vec2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client id&amp;#34;&lt;/span&gt;
vec3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; str_glue(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{vec2} {vec1}&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;## Gathering and removing duplicates&lt;/span&gt;
a &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
    gather(
        key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Client number&amp;#34;&lt;/span&gt;,
        value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client ID&amp;#34;&lt;/span&gt;,
        vec3
    ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unique&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;matrix&#34;&gt;Matrix&lt;/h2&gt;

&lt;h3 id=&#34;defining-a-matrix&#34;&gt;Defining a matrix&lt;/h3&gt;

&lt;p&gt;A matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns.&lt;/p&gt;

&lt;p&gt;A matrix is called two-dimensional, since there are rows and columns. It is constructed using the &lt;code&gt;matrix()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elements of the matrix&lt;/li&gt;
&lt;li&gt;&lt;code&gt;byrow&lt;/code&gt; to have the matrix filled by rows. By default, this is set to false.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nrow&lt;/code&gt; for number of rows&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;matrix&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,byrow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, nrow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Demonstrating the difference of not using &lt;code&gt;byrow&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;matrix&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, ncol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, nrow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;matrix&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, ncol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, nrow&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; , byrow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;naming-the-rows-and-the-columns&#34;&gt;Naming the rows and the columns&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rownames()&lt;/code&gt; and &lt;code&gt;colnames()&lt;/code&gt; can be used.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#Defining the row data&lt;/span&gt;
row_1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;)
row_2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;350&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Defining the matrix&lt;/span&gt;
my_matrix &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;matrix&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(row_1, row_2), byrow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, nrow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Defining row and column names&lt;/span&gt;
my_rownames &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_row1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_row2&amp;#34;&lt;/span&gt;)
my_colnames &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_col1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_col2&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Attaching row and column names to the created matrix&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;rownames&lt;/span&gt;(my_matrix) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; my_rownames
&lt;span style=&#34;color:#66d9ef&#34;&gt;colnames&lt;/span&gt;(my_matrix) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; my_colnames

my_matrix&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;sums-rowsums-and-colsums-adding-rows-rbind-and-columns-cbind&#34;&gt;Sums - &lt;code&gt;rowSums()&lt;/code&gt; and &lt;code&gt;colSums()&lt;/code&gt;, adding rows - &lt;code&gt;rbind()&lt;/code&gt; and columns - &lt;code&gt;cbind()&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;my_rowsums &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;rowSums&lt;/span&gt;(my_matrix)

&lt;span style=&#34;color:#75715e&#34;&gt;# Adding a new column of the calculated sums&lt;/span&gt;
my_new_matrix &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;cbind&lt;/span&gt;(my_matrix, my_rowsums)
my_new_matrix

&lt;span style=&#34;color:#75715e&#34;&gt;# Adding a new row and calculating the sums again&lt;/span&gt;
row_3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; )
my_newest_matrix &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rbind&lt;/span&gt;(my_matrix, row_3)
my_new_rowsums &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rowSums&lt;/span&gt;(my_newest_matrix)
my_newest_matrix &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;cbind&lt;/span&gt;(my_newest_matrix, my_new_rowsums)

my_newest_matrix&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;dates&#34;&gt;Dates&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The ISO 8601 format is the way R accepts and stores dates. This is basically in the yyyy-mm-dd format. Internally stored by R as the number of days since January 1, 1970.&lt;/li&gt;
&lt;li&gt;Alternative format year/month/day&lt;/li&gt;
&lt;li&gt;Dates are internally stored as numerics with some special characteristics over typical numerics.&lt;/li&gt;
&lt;li&gt;Current time from the system : &lt;code&gt;Sys.time()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Current date from the system : &lt;code&gt;Sys.Date()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Character vectors are most common source of creating dates.&lt;/li&gt;
&lt;li&gt;class of dates

&lt;ul&gt;
&lt;li&gt;could be a &lt;code&gt;date&lt;/code&gt; class catering to calendar dates.&lt;/li&gt;
&lt;li&gt;could also be a POSIX - Portable Operating System Interface class, which is commonly used in the finance world

&lt;ul&gt;
&lt;li&gt;POSIXlt and POSIXct allow holding a date.&lt;/li&gt;
&lt;li&gt;POSIXct is a way to represent datetime objects like &amp;ldquo;2015-01-22 08:39:40 EST&amp;rdquo;. This method is important for storing intraday financial data.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Using the simplest date class is generally the best strategy.&lt;/li&gt;
&lt;li&gt;There are other classes of date as well.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;as.date()&lt;/code&gt; can be used to convert the object to a date class.

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;format&lt;/code&gt; argument can facilitate conversion from different formats to the necessary ISO format.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Extractor functions

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;weekdays()&lt;/code&gt; can be used to extract the day of the week from a date object.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format()&lt;/code&gt; can be used to convert existing date objects to different date formats.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;months()&lt;/code&gt; for extracting the months of the date objects&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quarters()&lt;/code&gt; to extract the quarter in which the date object falls&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Dates can be subtracted, just like numerics.

&lt;ul&gt;
&lt;li&gt;The object must be in the Date format. Direct subtraction provides the difference in days.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;difftime(date1, date2, units = &amp;quot;secs&amp;quot;)&lt;/code&gt; can be used to find the difference in time, with the argument units specifying the output type

&lt;ul&gt;
&lt;li&gt;Argument &lt;code&gt;units&lt;/code&gt; should be one of “auto”, “secs”, “mins”, “hours”, “days”, “weeks”&lt;/li&gt;
&lt;li&gt;The 2nd argument &lt;code&gt;date2&lt;/code&gt;, will be subtracted from the first argument &lt;code&gt;date1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Formats of representing alternate date formats

&lt;ul&gt;
&lt;li&gt;Y: 4-digit year (1982)&lt;/li&gt;
&lt;li&gt;y: 2-digit year (82)&lt;/li&gt;
&lt;li&gt;m: 2-digit month (01)&lt;/li&gt;
&lt;li&gt;d: 2-digit day of the month (13)&lt;/li&gt;
&lt;li&gt;A: weekday (Wednesday)&lt;/li&gt;
&lt;li&gt;a: abbreviated weekday (Wed)&lt;/li&gt;
&lt;li&gt;B: month (January)&lt;/li&gt;
&lt;li&gt;b: abbreviated month (Jan)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Using the system date and time&lt;/span&gt;
todays_date &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sys.Date&lt;/span&gt;()
todays_time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sys.time&lt;/span&gt;()
todays_date
todays_time

&lt;span style=&#34;color:#75715e&#34;&gt;# Class of defined date and time&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;(todays_date)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;(todays_time)

&lt;span style=&#34;color:#75715e&#34;&gt;# Reading alternate formats of dates&lt;/span&gt;
test_date_alt_format &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;23/02/2019&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;as.Date&lt;/span&gt;(test_date_alt_format, format &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d/%m/%Y&amp;#34;&lt;/span&gt;)

test2_date_alt_format &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sep 25,2020&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;as.Date&lt;/span&gt;(test2_date_alt_format, format &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%B %d,%Y&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Extractor functions&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;weekdays&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;as.Date&lt;/span&gt;(test2_date_alt_format, format &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%B %d,%Y&amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;# Subtracting dates&lt;/span&gt;
date1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as.Date&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2030-02-20&amp;#34;&lt;/span&gt;)
date2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as.Date&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2040-03-30&amp;#34;&lt;/span&gt;)
date2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; date1
&lt;span style=&#34;color:#66d9ef&#34;&gt;difftime&lt;/span&gt;(date2, date1, units &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;secs&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;difftime&lt;/span&gt;(date1, date2, units &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mins&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Setting the weekdays as names()&lt;/span&gt;
dates3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(date1, date2, &lt;span style=&#34;color:#66d9ef&#34;&gt;as.Date&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2025-03-23&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2015-04-25&amp;#34;&lt;/span&gt;)))
&lt;span style=&#34;color:#66d9ef&#34;&gt;names&lt;/span&gt;(dates3) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;weekdays&lt;/span&gt;(dates3)
dates3

&lt;span style=&#34;color:#75715e&#34;&gt;# Syntax example of using Not (relational operators)&lt;/span&gt;
a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;140&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# checking where a is Not greater than 200&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Testing runif()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;lists&#34;&gt;Lists&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use the &lt;code&gt;list()&lt;/code&gt; with the chosen data structures as the arguments. The list can contain multiple types of objects or data types.&lt;/li&gt;
&lt;li&gt;Subsetting: using a &lt;code&gt;[]&lt;/code&gt; returns a subset of the list and using &lt;code&gt;[[]]&lt;/code&gt; returns the data inside the list being referenced.

&lt;ul&gt;
&lt;li&gt;A subset can be used on a dateframe to extract specific data.&lt;/li&gt;
&lt;li&gt;Syntax example: &lt;code&gt;subset(dataframe, column1 &amp;gt; condition1 &amp;amp; column2 &amp;lt; condition2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The elements of the list can be named, by adding the to the arguments while defining the list.&lt;/li&gt;
&lt;li&gt;adding names to an existing list can be done using the &lt;code&gt;names(list name)&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;With a named list, the &lt;code&gt;$&lt;/code&gt; operator can also be used to access specific list items.&lt;/li&gt;
&lt;li&gt;items can be added to the list using &lt;code&gt;c()&lt;/code&gt;, which would look like &lt;code&gt;c(list_name, new_item_name = item_name)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Removing elements from a list can be done by assigning the item the NULL value.&lt;/li&gt;
&lt;li&gt;Other list creating functions

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;split()&lt;/code&gt; : &lt;code&gt;split(list-name, item-name)&lt;/code&gt;. This will create 2 lists separated by the item name specified.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsplit()&lt;/code&gt; : to unsplit a list. &lt;code&gt;unsplit(split-list-name, grouping)&lt;/code&gt; Similar syntax to the above.&lt;/li&gt;
&lt;li&gt;split-apply-combine class of problems. Example is where a particular factor is to be applied for a portion of the data and another factor for the other portion, and after which the 2 portions are recombined. For eg: offering customer A a discount of 10% and customer B a discount of 20% via splitting and them recombining the split parts into a common dataframe.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attributes()&lt;/code&gt;: meta data of an object. For example the dim or dimension is an attribute of a matrix, and the names, row.names and class are common attributes of a dataframe.

&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;attr()&lt;/code&gt; to access a specific attribute. This takes 2 arguments at least. &lt;code&gt;attr(matrix_name, which = &amp;quot;desired attribute&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;factors&#34;&gt;Factors&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;factor()&lt;/code&gt; can be used to store the unique levels of a vector.

&lt;ul&gt;
&lt;li&gt;The vector to be converted to a factor is passed in as an argument.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;levels()&lt;/code&gt; can be used to access the unique levels of a factor object.

&lt;ul&gt;
&lt;li&gt;Rename the levels by just passing a vector &lt;code&gt;levels(factor_object)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cut()&lt;/code&gt; can be used to break up a vector into specified buckets or based on specified intervals.

&lt;ul&gt;
&lt;li&gt;argument &amp;lsquo;breaks&amp;rsquo; to specify the demarcations in which the vector will be cut up.&lt;/li&gt;
&lt;li&gt;R treats the left side of the bucket as exclusive and the right side of the bucket as inclusive. This is represented by &amp;lsquo;(&amp;rsquo; and &amp;lsquo;]&amp;rsquo;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summary()&lt;/code&gt; can be used to provide the counts of items under each factor. This is best used on a factor object.&lt;/li&gt;
&lt;li&gt;Ordering and sub-setting vectors

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ordered()&lt;/code&gt; : R has an inbuilt system to order the object alphabetically.&lt;/li&gt;
&lt;li&gt;passing the &lt;code&gt;levels&lt;/code&gt; argument to &lt;code&gt;factor()&lt;/code&gt; along with the argument &lt;code&gt;ordered = T&lt;/code&gt;, with levels containing the desired order (written as least to greatest) will enable a custom ordering of factors.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drop = T&lt;/code&gt; argument to drop a level completely. Subsetting with [-1] only drops the object at the first position, but retains the level.&lt;/li&gt;
&lt;li&gt;R&amp;rsquo;s default behavior when creating data frames is to convert all characters into factors&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;ranking &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;head&lt;/span&gt;(ranking)
buckets &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
ranking_grouped &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;cut&lt;/span&gt;(ranking, breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buckets)
&lt;span style=&#34;color:#66d9ef&#34;&gt;head&lt;/span&gt;(ranking_grouped)
ranking_grouped&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;dataframe&#34;&gt;Dataframe&lt;/h2&gt;

&lt;p&gt;Used to store a table of data. Multiple data types can be stored in a single dataframe. A matrix can store only a single data type.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Defined using &lt;code&gt;data.frame()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;colnames()&lt;/code&gt; : to rename the columns in a dataframe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subset()&lt;/code&gt; : to extract a particular subset of a dataframe. Compared to calling a column name, using this is more informative or robust.

&lt;ul&gt;
&lt;li&gt;first argument: name of the dataframe&lt;/li&gt;
&lt;li&gt;2nd argument: the condition or the column name within the dataframe&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A column can be deleted by assigning it NULL&lt;/li&gt;
&lt;li&gt;There is no need to use a &lt;code&gt;c()&lt;/code&gt; to add multiple objects to the dataframe. Directly add the vectors like &lt;code&gt;data.frame(variable 1, variable 2)&lt;/code&gt; and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;dataframe-peek-function-in-r&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Dataframe peek function in R&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;head&lt;/span&gt;()
&lt;span style=&#34;color:#66d9ef&#34;&gt;tail&lt;/span&gt;()
str()
desc()
glimpse()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;package-installation--especially-for-data-science-and-ml&#34;&gt;Package installation (especially for data science and ML)&lt;/h2&gt;

&lt;p&gt;The package &lt;code&gt;easypackages&lt;/code&gt; enables quickly loading or installing multiple libraries. This snippet will enable installing multiple packages. In general, it is better to install packages one by one. They can however be called together.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;install.packages(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;easypackages&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;library&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;easypackages&amp;#34;&lt;/span&gt;)
packages(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tidyverse&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tidyquant&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;glmnet&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rpart&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rpart.plot&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ranger&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;randomForest&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xgboost&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kernlab&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;basic-statistics-concepts&#34;&gt;Basic Statistics concepts&lt;/h2&gt;

&lt;h3 id=&#34;median&#34;&gt;Median&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##&amp;#39; Source: Conway, Drew; White, John Myles. Machine Learning for Hackers: Case Studies and Algorithms to Get You Started (p. 39). O&amp;#39;Reilly Media. Kindle Edition.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;##&amp;#39; Additional comments are my own.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;##&amp;#39; Function to illustrate how a median is calculated for odd and even datasets&lt;/span&gt;

my.median  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(x){
                                        &lt;span style=&#34;color:#75715e&#34;&gt;# Step 1:  Sort x ascending or descending&lt;/span&gt;
  sorted.x  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;sort&lt;/span&gt;(x)
                                        &lt;span style=&#34;color:#75715e&#34;&gt;# Find the length of x whether (odd number of digits or even). If odd : there are 2 medians. If even: there is a single median.&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;length&lt;/span&gt;(x) &lt;span style=&#34;color:#f92672&#34;&gt;%%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
    indices  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;length&lt;/span&gt;(x)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; , &lt;span style=&#34;color:#66d9ef&#34;&gt;length&lt;/span&gt;(x)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;+1&lt;/span&gt;)
                                        &lt;span style=&#34;color:#75715e&#34;&gt;# These numbers are used as indices for the initially sorted vector to return the exact median.&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;mean&lt;/span&gt;(sorted.x[indices]))
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
  index  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ceiling&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;length&lt;/span&gt;(x)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(sorted.x[index])
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;quantile&#34;&gt;Quantile&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;                                        &lt;span style=&#34;color:#75715e&#34;&gt;# Defining a sample of numbers to calculate quantile.&lt;/span&gt;
a  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;seq&lt;/span&gt;(from &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;seq&lt;/span&gt;(from &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;))
quantile(a)

                                        &lt;span style=&#34;color:#75715e&#34;&gt;# Defining bins or cuts for quantile. The default is 0.25.&lt;/span&gt;
quantile(a, probs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;promptdata-generate-shell-documentation-of-dataset&#34;&gt;&lt;code&gt;promptData()&lt;/code&gt; : generate shell documentation of dataset&lt;/h2&gt;

&lt;p&gt;If the filename argument is given as &amp;ldquo;NA&amp;rdquo;, the output will provide lists of the information. If no filename is specified, then an .Rd file will be created in the same working directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;promptData(sunspots, filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;downloading-a-file-to-specific-location&#34;&gt;Downloading a file to specific location&lt;/h2&gt;

&lt;p&gt;With wget : -P is the flag for the prefix directory for the file being downloaded. The path will be created if it does not exist. If the file already exists, a duplicate will be created with the &amp;lsquo;.1&amp;rsquo; suffix. Since this is a string being passed to wger, the &amp;ldquo; and other characters have to be explicitly escaped.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Download file to specific location&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;system&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wget \&amp;#34;https://raw.githubusercontent.com/amrrs/sample_revenue_dashboard_shiny/master/recommendation.csv\&amp;#34; -P ./sales-rev-app/&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;removing-user-installed-packages-alone&#34;&gt;Removing user installed packages alone&lt;/h2&gt;

&lt;p&gt;Sometimes, it is not possible to remove R completely. This is a nice snippet from an &lt;a href=&#34;https://www.r-bloggers.com/how-to-remove-all-user-installed-packages-in-r/&#34; target=&#34;_blank&#34;&gt;R-bloggers post&lt;/a&gt; to remove the user installed packages alone.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# create a list of all installed packages&lt;/span&gt;
 ip &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as.data.frame&lt;/span&gt;(installed.packages())
 &lt;span style=&#34;color:#66d9ef&#34;&gt;head&lt;/span&gt;(ip)
&lt;span style=&#34;color:#75715e&#34;&gt;# if you use MRO, make sure that no packages in this library will be removed&lt;/span&gt;
 ip &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;subset&lt;/span&gt;(ip, &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;grepl&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MRO&amp;#34;&lt;/span&gt;, ip&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;LibPath))
&lt;span style=&#34;color:#75715e&#34;&gt;# we don&amp;#39;t want to remove base or recommended packages either\&lt;/span&gt;
 ip &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; ip[&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(ip[,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Priority&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;base&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;recommended&amp;#34;&lt;/span&gt;)),]
&lt;span style=&#34;color:#75715e&#34;&gt;# determine the library where the packages are installed&lt;/span&gt;
 path.lib &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unique&lt;/span&gt;(ip&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;LibPath)
&lt;span style=&#34;color:#75715e&#34;&gt;# create a vector with all the names of the packages you want to remove&lt;/span&gt;
 pkgs.to.remove &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; ip[,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
 &lt;span style=&#34;color:#66d9ef&#34;&gt;head&lt;/span&gt;(pkgs.to.remove)
&lt;span style=&#34;color:#75715e&#34;&gt;# remove the packages&lt;/span&gt;
 &lt;span style=&#34;color:#66d9ef&#34;&gt;sapply&lt;/span&gt;(pkgs.to.remove, remove.packages, lib &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; path.lib)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;rprofile-and-user-files&#34;&gt;Rprofile and user files&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?Startup&lt;/code&gt; in the R interpreter for information on how the R environment is started up.&lt;/li&gt;
&lt;li&gt;Note that the Rprofile.site and other user files are not setup by default. These have to be created by the user.&lt;/li&gt;
&lt;li&gt;The default CRAN repo can be set in the &lt;code&gt;Rprofile.site&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To find the installation location of R, use the &lt;code&gt;R.home()&lt;/code&gt; function with component specified as shown below. &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/base/html/Rhome.html&#34; target=&#34;_blank&#34;&gt;More information&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;R.home&lt;/span&gt;(component&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;home&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;R.home&lt;/span&gt;(component&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;etc&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/usr/lib64/R/etc&lt;/p&gt;

&lt;h2 id=&#34;jupytext-for-conversion-to-rmd&#34;&gt;Jupytext for conversion to Rmd&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Jupytext can save Jupyter notebooks as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Markdown and R Markdown Documents,&lt;/li&gt;
&lt;li&gt;Julia, Python, R, Bash, Scheme, Clojure, Matlab, Octave, C++ and q/kdb+ scripts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mwouts/jupytext&#34; target=&#34;_blank&#34;&gt;Jupytext package&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The is a convenient tool to convert the jupyter notebook into multiple formats, and it also enables collaboration across documents.&lt;/p&gt;

&lt;p&gt;Installing Jupytext using conda:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;conda install -c conda-forge jupytext&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My most common usage of this tool is to convert jupyter notebooks (.ipynb) to Rmarkdown(Rmd). Deploying jupytext as a Library of Babel(LOB) Ingest makes it easy to be called from anywhere in Emacs.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--jupytext-ipynb-rmd&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;jupytext $jup_notebook --to rmarkdown&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;package-installation--especially-for-data-science-and-ml-1&#34;&gt;Package installation (especially for data science and ML)&lt;/h2&gt;

&lt;p&gt;The package &lt;code&gt;easypackages&lt;/code&gt; enables quickly loading or installing multiple libraries. This snippet will enable installing multiple packages. In general, it is better to install packages one by one. They can however be called together.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;install.packages(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;easypackages&amp;#34;&lt;/span&gt;, )
&lt;span style=&#34;color:#f92672&#34;&gt;library&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;easypackages&amp;#34;&lt;/span&gt;)
packages(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tidyverse&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tidyquant&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;glmnet&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rpart&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rpart.plot&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ranger&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;randomForest&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xgboost&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kernlab&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;installing-the-r-kernel-for-jupyter-notebooks&#34;&gt;Installing the R kernel for Jupyter notebooks&lt;/h2&gt;

&lt;p&gt;Reference: &lt;a href=&#34;https://github.com/IRkernel/IRkernel&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The easiest way for me to export org files to a notebook format will be using the Ipython notebook export available in Scimax. Installing the R kernel for Jupyter notebooks is as simple as installing an R package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;install.packages(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IRkernel&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To register the kernel in the current R installation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;IRKernel&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;installspec()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Per default IRkernel::installspec() will install a kernel with the name “ir” and a display name of “R”. For having multiple versions of R available as  kernels:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in R 3.3&lt;/span&gt;
IRkernel&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;installspec(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ir33&amp;#39;&lt;/span&gt;, displayname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;R 3.3&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# in R 3.2&lt;/span&gt;
IRkernel&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;installspec(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ir32&amp;#39;&lt;/span&gt;, displayname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;R 3.2&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is possible to install the IRKernel package via Docker.&lt;/p&gt;

&lt;p&gt;Note: Some additional packages may be required before installing IRKernel. Try the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;install.packages(&lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;repr&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IRdisplay&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evaluate&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;crayon&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pbdZMQ&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;devtools&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uuid&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;digest&amp;#39;&lt;/span&gt;))
devtools&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;install_github(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IRkernel/IRkernel&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;troubleshooting-with-r-version-dot&#34;&gt;Troubleshooting with R version.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;finding the R version being used is as simple as typing in version on the R console&lt;/li&gt;
&lt;li&gt;the shell command which R can also be used to find the path from R is being loaded.&lt;/li&gt;
&lt;li&gt;anaconda installs earlier versions of R. This has to be removed completely, so that a single version of R is accesed by R studio and R console and within Emacs as well.&lt;/li&gt;
&lt;li&gt;in my case, differing versions 3.4 and 3.5 of R were being accessed, which made package installation difficult.&lt;/li&gt;
&lt;li&gt;therefore, I uninstalled the older conda version and then downloaded the R pkg from CRAN as a fresh install on the mac.&lt;/li&gt;
&lt;li&gt;it is possible to set the default R version for the inferior ESS shell in Emacs as specified here &lt;a href=&#34;https://stackoverflow.com/questions/12574738/how-can-i-specify-the-r-version-opened-by-ess-session-in-emacs&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;version&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;which R&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;how-an-r-session-starts&#34;&gt;How an R session starts&lt;/h2&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html&#34; target=&#34;_blank&#34;&gt;https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;upgrading-packages-in-r--r-session&#34;&gt;Upgrading packages in R (R session)&lt;/h2&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://wiki.archlinux.org/index.php/R&#34; target=&#34;_blank&#34;&gt;Arch wiki&lt;/a&gt;
When you also need to rebuild packages which were built for an older version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;update.packages(ask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;,checkBuilt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;when you also need to select a specific mirror (&lt;a href=&#34;https://cran.r-project.org/mirrors.html&#34; target=&#34;_blank&#34;&gt;https://cran.r-project.org/mirrors.html&lt;/a&gt;) to download the packages from (changing the url as needed):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;update.packages(ask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;,checkBuilt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;,repos&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cran.cnr.berkeley.edu/&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use Rscript, which comes with r to update packages from a Shell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Rscript -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;update.packages()&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>An SSD can breathe life into old computers</title>
      <link>https://shrysr.github.io/post/01252410-853f-4570-858f-f3d609f5def5/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/post/01252410-853f-4570-858f-f3d609f5def5/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s a well known trick that installing a &lt;a href=&#34;https://www.storagereview.com/ssd_vs_hdd&#34; target=&#34;_blank&#34;&gt;SSD&lt;/a&gt; in place of the
conventional Hard disk can breathe new life into very old machines. My
mid 2010 Macbook Pro is one such example, being over 8 years old.&lt;/p&gt;

&lt;p&gt;In particular, within Emacs - &lt;code&gt;mu4e&lt;/code&gt; responds much more quickly and there is
significantly less lag in searching / accessing emails and &lt;code&gt;HTML&lt;/code&gt; rendering.&lt;/p&gt;

&lt;p&gt;The other advantage of using a Mac over Linux is that installation and
setup instructions are more often available out the box for the Mac OS
(though this is changing). I have access to dedicated apps including
Evernote, Dash, Spotify, Whatsap, Slack etc on my Mac. This is in
addition to several other high quality apps on the App store.&lt;/p&gt;

&lt;p&gt;I do love using Arch Linux and Antergos and the packing management and
rolling OS upgrades are totally cool. However, a little bit of
elegance in the user interface and hardware (being available out of
the box) does ease up the mind and progress. It takes quite a bit of
effort to achieve that unless you are at the level of purely using
&lt;a href=&#34;http://www.howardism.org/Technical/Emacs/new-window-manager.html&#34; target=&#34;_blank&#34;&gt;Emacs as window manager&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the Mac, it is easy to move around virtual desktops and use the
magic track pad to rapidly switch between applications as well. I&amp;rsquo;m
sure many of these &amp;lsquo;gimmicks&amp;rsquo; may be setup with diligence and due time
on Linux through solutions with varying levels of quality.&lt;/p&gt;

&lt;p&gt;However, as of today : it&amp;rsquo;s likely I would have struggled with some
aspects on Linux that are readily available on other systems. Evernote
is an example. After hours of searching for an alternate (and
acceptable) solution for software packages that are not yet ported to
Linux, I would quite possibly end up making a compromise. Typically,
the compromises would mean using Electron or Web based versions of
apps, which are often not as powerful as the desktop app, not to
mention inconvenient. A prime example would be Evernote, on Arch
Linux. Some other examples are apps like Word, Pages, Outlook and Excel and
so on, which are more critical.&lt;/p&gt;

&lt;p&gt;Ultimately, my preference would be to use a Mac as my daily driver and
play around with Linux on a back up computer. In any case, multiple
Linux distros can be run on &lt;a href=&#34;https://www.virtualbox.org/&#34; target=&#34;_blank&#34;&gt;Virtual Box&lt;/a&gt; within the Mac.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Switching from Evernote to DEVONtechnologies products</title>
      <link>https://shrysr.github.io/post/ec354a8e-a276-4c89-8560-ce82b1693744/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/post/ec354a8e-a276-4c89-8560-ce82b1693744/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve used &lt;a href=&#34;https://evernote.com/&#34; target=&#34;_blank&#34;&gt;Evernote&lt;/a&gt; since 2014, with over 3k notes of all kinds stored
in it. Though I did try to capture everything of interest - the
procedure was never fast or streamlined enough for me. The Evernote
app runs ridiculously slower on older phones. In particular, being
used to the speed of Emacs and Org mode - I was mostly displeased with
the Evernote Mac / Windows apps as well. I ended up using the drafts
app for writing on iOS devices.&lt;/p&gt;

&lt;p&gt;However, using Evernote was still worth due to the availability of an
excellent catch-all bucket for multiple kinds of information, that can
be searched on demand. I could literally whip up important receipts or
scanned copies of a document and it felt wonderful to have that kind
of control over your information. This foray was also fueled by the
deficiencies of Emacs in mobile apps and the ability to store and
refer to rich content and several file types.&lt;/p&gt;

&lt;h1 id=&#34;switching-to-devonthink-pro-dtp&#34;&gt;Switching to DEVONthink Pro (DTP)&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve recently converted to &lt;a href=&#34;https://www.devontechnologies.com/products/devonthink/overview.html&#34; target=&#34;_blank&#34;&gt;DEVONthink Pro&lt;/a&gt; (DTP). Though DTP is Mac /
iOS only, I would personally prefer DTP over Evernote. Some advantages
of DTP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;blazing fast application response + search on both iOS and Mac.&lt;/li&gt;
&lt;li&gt;leverages AI to provide interesting connections between notes and
ideas. Users have leveraged these connections to help generate new
ideas from unforeseen connections. There&amp;rsquo;s more information &lt;a href=&#34;https://www.devontechnologies.com/technology.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.

&lt;ul&gt;
&lt;li&gt;so far, my experience is that the notes have to be in a particular
format,I.e one article or principal idea per note to enable a
sensible matching with other relevant articles. There are several
incorrect connections also made.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Better control over content organisation.

&lt;ul&gt;
&lt;li&gt;Project and folder creation, including separate databases for
different kinds of work.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;One time payment for a major version of the software, along with
discounted upgrades.&lt;/li&gt;
&lt;li&gt;Ability to index local folders.&lt;/li&gt;
&lt;li&gt;using multiple &amp;lsquo;databases&amp;rsquo; customised to any workflow, along with
the provision of password protection and syncing to multiple sources.&lt;/li&gt;
&lt;li&gt;ability to confidently store private information based on the
encryption and custom syncing options available.&lt;/li&gt;
&lt;li&gt;Ability to store web archives of Linked in posts (or any
content). This was not always possible with Evernote. The iOS share
option of clipping to the DEVONthink to go app as a web archive
works rather well most of the time.&lt;/li&gt;
&lt;li&gt;The Evernote plug-in for Chrome/ Firefox works relatively slower.&lt;/li&gt;
&lt;li&gt;connection with DEVONAgent Pro (a fascinating tool dedicated to
customised and deep web search. More on this on another blog post)&lt;/li&gt;
&lt;li&gt;Deploy scripts on databases / notes and thus allowing custom
workflows with particular note categories.&lt;/li&gt;
&lt;li&gt;DTP can import all your Evernote notes and tags as they are. This
worked for me in a single attempt.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s actually hard to quantify the benefits of using DTP. There are a
myriad of features within, including the ability to index locations
and script automated workflows.&lt;/p&gt;

&lt;p&gt;For most of the part, I found the speed and response of Evernote to be
frustrating. It hindered a streamlined workflow. There are also
additional irritations with respect to the .enex format and being able
to encrypt information.&lt;/p&gt;

&lt;p&gt;No doubt, the ubiquity of Evernote in almost all the platforms (except
Linux&lt;sup&gt;&lt;a id=&#34;fnr.1&#34; class=&#34;footref&#34; href=&#34;#fn.1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;) works in its favor. However, the search response with DTP
is incredibly rapid and the note viewing experience of DTP is
extremely smooth. This is on an ancient mid 2010 macbook pro!&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also worth noting that unlike Evernote - I was actually intrigued
enough to correspond with the technical support team of DTP to
understand features like indexing a folder, and their responses have
been prompt and helpful.&lt;/p&gt;

&lt;p&gt;The best place to find up to date information is on the
&lt;a href=&#34;https://forum.devontechnologies.com/&#34; target=&#34;_blank&#34;&gt;DEVONtechnologies forum&lt;/a&gt;. Even a deep search on the internet does not
lead to many articles about the DEVONthink technologies products.&lt;/p&gt;

&lt;h1 id=&#34;some-caveats-of-dtp&#34;&gt;Some caveats of DTP&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;DTP does offer all the flexibility above. However the quality of the
Evernote webclipper&amp;rsquo;s output is better in several cases. The
uncluttered text grab is not automated well enough. I&amp;rsquo;m yet to
discover the best pattern.&lt;/li&gt;
&lt;li&gt;Several apps offer Evernote integration as a premium feature.&lt;/li&gt;
&lt;li&gt;Evernote offers a more &amp;lsquo;polished&amp;rsquo; and simpler interface and is
mainstream and available on multiple platforms. The note taking
editors and capture mechanism is more user friendly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;devonagent-pro-dap&#34;&gt;DEVONagent Pro (DAP)&lt;/h1&gt;

&lt;p&gt;DAP is an intriguing bit of software that facilitates deep searches of
the web and developing automated workflows including report
development. Their algorithm filters searches from any number of
databases / engines / websites to provide the best matches.&lt;/p&gt;

&lt;p&gt;One could use this to monitor the website of a competitor for news
announcements. Or crawl Hackernews for the keyword Datascience. It
appears to be a tool that can provide exactly the information that we
seek by processing the information out there in the web.&lt;/p&gt;

&lt;p&gt;This includes generation of mind-map esque graphs connecting keywords
in all the search results. I&amp;rsquo;m yet to explore more, but it is very
interesting so far, especially to gain an overview of the subject.&lt;/p&gt;

&lt;h1 id=&#34;some-conclusions&#34;&gt;Some Conclusions&lt;/h1&gt;

&lt;p&gt;Exploring DTP in conjunction with DEVONagent Pro is absolutely a
worthwhile exercise for those relying a lot on information from the
internet for their jobs and work, and those working in an apple
eco-system. It has a steep(er) learning curve, but will transform your
information management. DAP is also a worthy option to explore to deep
search the web on focused topics.&lt;/p&gt;

&lt;p&gt;Yes, it is mac only software. I have not been able to find any
equivalent apps on windows. Another reason to stick to the
Apple-verse.&lt;/p&gt;

&lt;p&gt;The system is addictive and once a good workflow has been built up, it
would be difficult to use anything else.&lt;/p&gt;

&lt;h1 id=&#34;archiving-interesting-linked-in-posts&#34;&gt;Archiving interesting Linked in posts:&lt;/h1&gt;

&lt;p&gt;One of the most killer features of using the DEVON 2 GO app is the
ability to capture Linked in posts as web archives. Though not
optimal, in terms of the format - it is still extremely useful to
rapidly build up a reference database of web resources.&lt;/p&gt;

&lt;h1 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h1&gt;

&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.1&#34; href=&#34;#fnr.1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Nixnote is one solution. I&amp;rsquo;ve seen it in action and it is
useful, and probably even closer to DEVONthink. However, I could never
get it working in Arch Linux reliably.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting productive - an exploration into holistic task management</title>
      <link>https://shrysr.github.io/post/2b0b2c79-3f6e-4079-a07d-9e382fda8954/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/post/2b0b2c79-3f6e-4079-a07d-9e382fda8954/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;To integrate tasks, reminders, notes, coding workflow into a single
framework is no easy challenge. Org mode and Emacs help you do just
that.&lt;/p&gt;

&lt;p&gt;After trying out several tools, IMHO : &lt;a href=&#34;https://todoist.com&#34; target=&#34;_blank&#34;&gt;Todoist&lt;/a&gt; offers the best bang
for your buck, especially with it&amp;rsquo;s natural language parsing ability,
smooth and reliable sync as well as its multi-platform
availability. Many describe &lt;a href=&#34;https://www.omnigroup.com/omnifocus&#34; target=&#34;_blank&#34;&gt;Omnifocus&lt;/a&gt; to be the king of task
management tools, with dedicated apps for different purposes and
probably well integrated.&lt;/p&gt;

&lt;p&gt;My journey veered away from Omnifocus since it is limited to the Apple
platform and this is obviously a serious handicap for people (like me)
who are often forced to use multiple operating systems and devices
distributed between personal and work environments.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d religiously managed my tasks on Todoist for over a year via the
Chrome extensions/add-ins, the stand alone apps on Windows and the
Mac, and on Android as well as iOS.&lt;/p&gt;

&lt;p&gt;However, there was something missing in terms of being able to truly
capture it all. This led me to &lt;a href=&#34;https://www.gnu.org/s/emacs/&#34; target=&#34;_blank&#34;&gt;Emacs&lt;/a&gt;. My search is summarised in this
article.&lt;/p&gt;

&lt;h1 id=&#34;needs-versus-the-software-development&#34;&gt;Needs versus the software development&lt;/h1&gt;

&lt;p&gt;The real problem surfaced when my needs evolved at a pace and
specificity that a general software&amp;rsquo;s development could not cater
to. The problem is characterized by an endless wait for seemingly
simple features that could make a phenomenal difference to personal
workflow and productivity. This feature may range from a small tweak or
bugfix to a rewiring of the basic behavior of the program itself.&lt;/p&gt;

&lt;p&gt;Additionally, the proprietary format of tasks/notes and entries in
Todoist or even Evernote is not a comforting aspect. On the other
hand, using a simple text file with lists of work or notes is too
simplistic to address a complex problem.&lt;/p&gt;

&lt;p&gt;However, the issue could be resolved when the simple and ubiquitous
Text file is parsed by a system like Org mode with in built and novel
routines to filter and present the data in the text file in a very
useful. Ultimately the key factor is that the workflow and output can
be completely customised as required.&lt;/p&gt;

&lt;h1 id=&#34;things-i-d-like-from-a-task-management-tool&#34;&gt;Things I&amp;rsquo;d like from a task management tool:&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Rapid and seamless Task/Note taking ability -  could be generic, or specific to a particular project/task.&lt;/li&gt;
&lt;li&gt;Quick capturing of links and snippets from websites and emails&lt;/li&gt;
&lt;li&gt;Consistent experience across multiple platforms and very fast sync.&lt;/li&gt;
&lt;li&gt;Ability to manage personal or work related projects&lt;/li&gt;
&lt;li&gt;A date management system with atleast reasonably good understanding
of natural language&lt;/li&gt;
&lt;li&gt;Refiling tasks/notes very easily across main tasks or categories or
projects&lt;/li&gt;
&lt;li&gt;Customisable Views of the task summary along with the deadlines&lt;/li&gt;
&lt;li&gt;Task and Note search and filtering at every level possible&lt;/li&gt;
&lt;li&gt;Ability to easily export notes to multiple formats and write in
some form of markup language so as to take care of formatting on
the go.&lt;/li&gt;
&lt;li&gt;Preferably an all-in-one tool for managing notes, all kinds of
writing, research, tasks, recurring reminders, maintaining an
activity log/journal, project summaries .. etc.&lt;/li&gt;
&lt;li&gt;Includes &amp;lsquo;clocking&amp;rsquo; abilities for tasks.&lt;/li&gt;
&lt;li&gt;Fast keyboard based shortcuts and &amp;lsquo;bookmarks&amp;rsquo; to do all that is required.&lt;/li&gt;
&lt;li&gt;Recording tasks or notes from the phone, while on the go.&lt;/li&gt;
&lt;li&gt;Should have the lightest footprint possible in terms of time spent
on the tool, as well as system resources with no compromise in benefits derived.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;can-it-be-achieved&#34;&gt;Can it be achieved?&lt;/h1&gt;

&lt;p&gt;Short answer: Yes. Through Emacs.&lt;/p&gt;

&lt;p&gt;Sure, several of the above points can be done in Todoist and other tools, in
one way or via combining different services.&lt;/p&gt;

&lt;p&gt;However, a holistic consideration of the above points indicate a
system that is a cross between Todoist and Evernote, capable of being
utilised for a multitude of purposes : a customised GTD workflow plus
an organiser for notes or writings. Point no 9, could serve to be a
concise but incomplete statement of Orgmode&amp;rsquo;s capabilities, and is a
stark reminder of Todoist&amp;rsquo;s specific expertise in only task
management. Additionally, the above points can be done in orgmode,
&lt;em&gt;very&lt;/em&gt;, &lt;em&gt;very&lt;/em&gt; quickly. Evernote has a great system, but is not as fast,
because it indexes a huge variety of content. &lt;sup&gt;&lt;a id=&#34;fnr.1&#34; class=&#34;footref&#34; href=&#34;#fn.1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h1 id=&#34;examples-of-workflows&#34;&gt;Examples of workflows&lt;/h1&gt;

&lt;p&gt;Lets say that while typing up a project summary, I remember an
additional task for another project or perhaps need to note down a
snippet of generic information. To compensate for the lack of a
photographic memory without breaking my on-going workflow - I need to
be able to store the task/note/idea in a place that I can easily look
up for further processing.&lt;/p&gt;

&lt;p&gt;Such an activity is not at all streamlined with Todoist, and
definitely not so with Evernote. With Org mode its just a &lt;code&gt;C-c c&lt;/code&gt;, or
Control + c and hit c again. Optionally, a &lt;code&gt;C-cw&lt;/code&gt; for refiling the note
on the spot if desired. When I hit refile - I can search through my
org headings or projects and place the newly captured item exactly
where it should be.&lt;/p&gt;

&lt;p&gt;Once accustomed to the speed of recording stuff with Org-capture, along
with the myriad possibilities of auto-save, backups, moving the cursor
to the last location you were at, switching to another
document/heading at lightning speed and etc - it will be hard to find
another system that is truly competitive.&lt;/p&gt;

&lt;p&gt;Project management via Emacs using the excellent &lt;a href=&#34;https://github.com/bbatsov/projectile&#34; target=&#34;_blank&#34;&gt;projectile&lt;/a&gt; package
can enable you to find information at a speed that is very pleasing. I
have often needed to deal with several customers of different kinds,
thoroughly understand their requirements, resolve technical and
commercial ambiguities and be able to refer to earlier jobs where
something was agreed upon. I&amp;rsquo;ve often worked in projects with a
bewildering number of aspects to take care of, along with sporadic
infusions of information which could be clarifications or even new
information altogether.&lt;/p&gt;

&lt;p&gt;Included in project / productivity /relationship management are
several subsets of activities like Minutes of Meetings (MOM&amp;rsquo;s),
summaries of travel/visits to the customer, telephonic discussions,
indications of future projects as well as generic or specific
problems.&lt;/p&gt;

&lt;p&gt;Using Org mode, it is possible create customised workflows and
templates to manage all the above aspects, more than any other note
taking system, including only handwritten notes. An excellent,
comprehensive overview can be found in &lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Bert Hansen&amp;rsquo;s article&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;everybody-s-needs-are-unique&#34;&gt;Everybody&amp;rsquo;s needs are unique&lt;/h1&gt;

&lt;p&gt;Eventually, I guess we all come to realise the fact that each human
being is truly unique. Each one of us have our own ways of thinking, being
and approaching problems.&lt;/p&gt;

&lt;p&gt;While Todoist worked very well for me - I was still bothered by being
constrained by it&amp;rsquo;s proprietary format and the lack of a lifetime
membership with a one time payment. Money spent should give me a tool
that brings supreme value and satisfaction with it. It was also
tiresome to take detailed notes on tasks and rely on a separate
Simplenote/Evernote system via Sublime Text for this purpose. You may
have a different viewpoint. You may want a great GUI design and
app that works well on your phone in addition to other
environments. &lt;sup&gt;&lt;a id=&#34;fnr.2&#34; class=&#34;footref&#34; href=&#34;#fn.2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Orgmode is more aligned to people who prefer to get most of their work
done on their computers, who are or atleast don&amp;rsquo;t mind being keyboard
shortcut freaks and those who would like to take the effort to learn a
souped up text editor like Emacs that can evolve to cover a lot of
needs efficiently. It&amp;rsquo;s not going to work well for people who need a
reminder to pop up on their phones, with a fancy GUI and those who
expect a software to work extremely well right out of the
box. However, this &lt;em&gt;is&lt;/em&gt; Org mode and Emacs&amp;#x2026;. there are ways to sync
your iOS / outlook calendar with orgmode&amp;rsquo;s calendar, or with
wunderlist or Toodledo. Anything is possible, but it just won&amp;rsquo;t be via
some classy GUI..&lt;/p&gt;

&lt;h1 id=&#34;concluding-points&#34;&gt;Concluding points&lt;/h1&gt;

&lt;p&gt;While it may seem daunting at first - the feeling of being able to
search through existing notes to know whether you have met this
particular thought/aspect before, can be extremely valuable and very
satisfying. There are people like &lt;a href=&#34;http://sachachua.com/blog/&#34; target=&#34;_blank&#34;&gt;Sacha Chua&lt;/a&gt; and &lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Bert Hansen&lt;/a&gt;, who&amp;rsquo;ve
built complex, efficient, and beautiful workflows through which a
great deal of achievement has been made possible using the resulting
streamlined tool. As &lt;a href=&#34;http://calnewport.com/&#34; target=&#34;_blank&#34;&gt;Cal Newport&lt;/a&gt; often reiterates in his blog and
exploration on productivity - it is important to be able to accurately
quantify the time being spent on different things. The &lt;a href=&#34;https://github.com/emacs-tw/awesome-emacs&#34; target=&#34;_blank&#34;&gt;awesome-emacs&lt;/a&gt;
list on github offers several worthy resources, along with the
excellent &lt;a href=&#34;http://planet.emacsen.org/&#34; target=&#34;_blank&#34;&gt;Planet Emacsen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The organiser tool by itself should have the lightest possible
footprint in terms of the time taken to enter in stuff. Certainly -
most people spend a lifetime in customising emacs and that may seem
contrary to the previous point. However, it is possible to quickly
reach a certain point that results in a marked improvement in
productivity and workflow. Beyond this, leisure time can always be
spent in fine-tuning the basic setup and understanding the code better.&lt;/p&gt;

&lt;p&gt;The customisation options with Emacs and Org mode are literally
endless and constrained only by programming skills, or Googling skills
to find the code snippet that can get your work done, not to mention
social skills in getting help via online communities. This is actually
a lot easier than it sounds. While a bunch of people would call this a
weakness, there are a large number of people who see the value in a
customised tool which will evolve to facilitate a very fast and
efficient workflow.&lt;/p&gt;

&lt;p&gt;Deliberate practise towards improvement is certainly boosted when one
is able to work consistently in a environment customised to needs and
workflows. Using Org mode and Emacs is a firm step in this direction.&lt;/p&gt;

&lt;h1 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h1&gt;

&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.1&#34; href=&#34;#fnr.1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; While Org mode is optimised for text, it is possible to attach
any kind of file to a &amp;lsquo;heading&amp;rsquo;, and use interleave and other
techniques to browse and annotate PDF&amp;rsquo;s. The possibilities are too
numerous to be covered in a blog post or a single google search.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.2&#34; href=&#34;#fnr.2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; On iOS - I&amp;rsquo;ve found &lt;a href=&#34;http://agiletortoise.com/drafts/&#34; target=&#34;_blank&#34;&gt;Drafts&lt;/a&gt; is a great app for writing
fast and appending the notes to an org file, which can be refiled
later, using emacs. One problem I&amp;rsquo;m yet to resolve is that
appending to an org file in dropbox, requires a network/internet
connection. There should be a way to deal with situations without
handy internet available.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Course Certificates</title>
      <link>https://shrysr.github.io/project/course-certificate-list/</link>
      <pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/project/course-certificate-list/</guid>
      <description>

&lt;h2 id=&#34;edx&#34;&gt;EdX&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://courses.edx.org/certificates/0d3a83463cdb49c8aca2aa11ab9bd850&#34; target=&#34;_blank&#34;&gt;EdX HarvardX PH125.1x Data Science Basics: R&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;datacamp&#34;&gt;DataCamp&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://shrysr.github.io/files/Certificate-datacamp-intro-to-sql.pdf&#34;&gt;Intro to &lt;code&gt;SQL&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://shrysr.github.io/files/Certificate-datacamp-R-basics.pdf&#34;&gt;Data Science &lt;code&gt;R&lt;/code&gt; basics&lt;/a&gt;  included in &lt;a href=&#34;https://shrysr.github.io/project/course-edx-harvard-r&#34;&gt;EdX HarvardX PH125.1x&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://shrysr.github.io/files/Certificate-datacamp-tidyverse-introduction.pdf&#34;&gt;Introduction to Tidyverse&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://shrysr.github.io/files/Certificate-datacamp-R-introduction-finance.pdf&#34;&gt;Introduction to &lt;code&gt;R&lt;/code&gt; for Finance&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;dataquest&#34;&gt;DataQuest&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.dataquest.io/view_cert/8GGK4Q8UR961241PKFLI&#34; target=&#34;_blank&#34;&gt;Data Analyst Path in &lt;code&gt;R&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.dataquest.io/view_cert/Q7WM9PIQA7JRJFMMAZUD/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Git&lt;/code&gt; &amp;amp; Version control&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.dataquest.io/view_cert/M6S5ITVA6FC6BDR650WG/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;SQL&lt;/code&gt; Fundamentals&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>https://shrysr.github.io/talk/example-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 -0700</pubDate>
      
      <guid>https://shrysr.github.io/talk/example-talk/</guid>
      <description>&lt;p&gt;Embed your slides or video here using &lt;a href=&#34;https://sourcethemes.com/academic/post/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;shortcodes&lt;/a&gt;. Further details can easily be added using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CFD Post Processing automation</title>
      <link>https://shrysr.github.io/project/cfd-post-processing-python/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/project/cfd-post-processing-python/</guid>
      <description>

&lt;p&gt;It is possible (and prevalent) to create templates to post process CFD Simulation results in ANSYS CFD Post using session (.cse) files. Using Shell scripts, it would then be simple to apply these session files on multiple result files and extract the output dictated by the session file.&lt;/p&gt;

&lt;p&gt;This python script that enables the user to set the location of:
- the session file (.cse)
- the CFD result files (.res)
- create a BAT script with sequential lines, each calling ANSYS CFD Post with the necessary arguments
- run the session script on all the result files available in a particular location.
- gracefully exit, removing all the temporary script files.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/shrysr/cfdpost_auto&#34; target=&#34;_blank&#34;&gt;Code On Github&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;how-it-helped&#34;&gt;How it helped&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;While these operations could be done directly in python, it is
easier and simpler to control ANSYS CFD post using a BASH
script. Therefore the python program creates a BASH script.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;python-script&#34;&gt;Python script&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
Created on Thu Dec 18 16:10:49 2014
@author: shrysr
&amp;quot;&amp;quot;&amp;quot;

# Description: 
# This is a simple program that is designed to apply am ANSYS CFD post macro on all the results available at a particular location, one after the other. There are 3 strings required to be set as input by the user.
# 1. The location of the ANSYS CFD Post executable
# 2. THe path to the macro file (.cst/.cse)
# 3. The folder location where the result files are located.

# Note : the &amp;gt;quit command can be written in the post macro to optionally execute the post macro on one file after the other automatically. Otherwise CFD Post has to be quit manually by the user after the macro is applied on each file.

###---------- USER INPUT -------------###
# Setting the paths to various locations.

CFDPost_loc=r&#39;&amp;quot;C:\Program Files\ANSYS Inc\v145\CFD-Post\bin\cfdpost&amp;quot;&#39; #Setting the path to the ANSYS CFD Post executable.

Post_template_loc=r&#39;&amp;quot;C:\\example_location\post_macro.cse&amp;quot;&#39; #Path to the .cse/.cst post macro to be applied.

Res_loc=r&amp;quot;Q:\Queueing_sys\Completed\Archive\Shreyas&amp;quot; #Folder location of the result file path

###---x---x--x-- USER INPUT -x---x---x---x--###

#importing required libraries
import os
import glob
import subprocess as sp

#Creating BAT script for extracting the list of res files in the current working folder - sorted Date wise
def res_list_syn(Res_loc):
    &amp;quot;&amp;quot;&amp;quot;
    Grabs all the CFX res files in the chosen location  (Res_loc) and stores them in the variable (array) A1.
    The variableA1 is passed onto another function which uses the array contents
    Example:
    &amp;gt;&amp;gt;&amp;gt; Res_loc=r&amp;quot;Q:\Queueing_sys\Completed\Archive&amp;quot;
    &amp;gt;&amp;gt;&amp;gt; post_syn(Res_loc)
    &amp;gt;&amp;gt;&amp;gt; return variableA1
    &amp;quot;&amp;quot;&amp;quot;
    print &amp;quot;&amp;quot;
    print &amp;quot;Grabbing all res files from chosen location.&amp;quot;
    os.chdir(Res_loc)
    reslist=glob.glob(&#39;*.res&#39;)
    print &amp;quot;Passing the list of res files to the Post_Syn function&amp;quot;
    post_syn(reslist)

def post_syn(variable):
    print &amp;quot; &amp;quot;    
    print &amp;quot;Listing grabbed res files and creating Post BAT file in chosen location...&amp;quot; 
    print &amp;quot;&amp;quot;
    post_batname=&#39;Post_bat_runner.BAT&#39;   
    post_bat_loc=os.path.join(Res_loc,post_batname)
    PC=open(post_bat_loc,&#39;w&#39;)
    PC.write(&#39;cd /d &amp;quot;%s&amp;quot;\n&#39;%Res_loc)
    i=0
    while i&amp;lt;len(variable):
        print &amp;quot;%d --%s&amp;quot; %(i,variable[i])
        PC.write(&#39;%s -s %s %s\n&#39; %(CFDPost_loc,Post_template_loc,variable[i]))
        i+=1
    PC.close()
    print &amp;quot;Running post macro on all the listed Res Files....&amp;quot;
    print &#39;&#39;
    sp.call(post_bat_loc)
    t.sleep(5)
    print &#39;Killing temp files...&#39;
    t.sleep(5)
    File_killer(Res_loc,&#39;BAT&#39;)


#Function for deleting temp Files. Prevents Clutter.
def File_killer(folder_location, type_of_extension):
    for variable in glob.glob(&#39;%s/*.%s&#39;%(folder_location,type_of_extension)):
        if os.path.isfile(variable):
            os.remove(variable)

#Starting Program. Geting current working directory
print &amp;quot;Hello. Program Launch...--&amp;gt;&amp;quot;
print &amp;quot;&amp;quot;
print &amp;quot;The chosen result location to be scanned is: %s&amp;quot;%Res_loc
print &amp;quot;&amp;quot;
print &amp;quot;Starting scan&amp;quot;
res_list_syn(Res_loc)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Contributions to the CFD-Online Wiki</title>
      <link>https://shrysr.github.io/project/cfd-on-line-wiki/cfd-online-wiki/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/project/cfd-on-line-wiki/cfd-online-wiki/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;View : &lt;a href=&#34;http://www.cfd-online.com/Wiki/What_is_Open_Source%3F&#34; target=&#34;_blank&#34;&gt;CFD-Online Wiki page&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;During my initial foray into open source CFD and especially getting
started with Linux - there was a lot of information that I had to
collate from different sources in order to figure out each step. In
addition, there were perspectives on performance that could be gained
only through experience. Therefore, I plugged back the knowledge
gained to the CFD-Online wiki with the idea that it would help any
newbie get started a little quicker.&lt;/p&gt;

&lt;p&gt;In the last few years, the number of courses and the material
available on-line on CFD, Linux and applying Numerical techniques has
increased substantially. This is somewhat supported by the increasing
trend of page views &lt;a href=&#34;https://www.cfd-online.com/About/&#34; target=&#34;_blank&#34;&gt;shown on the CFD-Online
Wiki&lt;/a&gt;. Nevertheless, this document
still serves as a useful overview and getting started guide.&lt;/p&gt;

&lt;p&gt;The documentation explores the idea of Open Source software, and the
basic techniques to get started with the exploration. Eg: the
different options of running Linux on your current machine as well as
the pros and cons of each approach, and the software options
available, as well as links to useful and high quality information and
tutorials.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
