<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shreyas Ragavan on Shreyas Ragavan</title>
    <link>https://shrysr.github.io/</link>
    <description>Recent content in Shreyas Ragavan on Shreyas Ragavan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 -0400</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Searching the awesome-lists on github</title>
      <link>https://shrysr.github.io/post/03133c10-709e-4d06-9f3d-c00ffeae64a7/</link>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/post/03133c10-709e-4d06-9f3d-c00ffeae64a7/</guid>
      <description>

&lt;p&gt;I came upon the glorious awesome lists today on Github. These
repositories can be viewed with a &lt;a href=&#34;https://github.com/search?utf8=%25E2%259C%2593&amp;amp;q=awesome+list&amp;amp;type=&#34; target=&#34;_blank&#34;&gt;simple search on github&lt;/a&gt;. They
contain all kinds of lists on all kinds of topics, and are curated.&lt;/p&gt;

&lt;p&gt;Beware! the number of lists and the number of items being covered are
quite extensive. There are a lot of common grounds and topics between
these lists.&lt;/p&gt;

&lt;p&gt;I wanted to search for a keyword through all these repositories. In
fact, I have always wanted search for particular keywords or code
snippets in my Emacs configuration files, or in all the files in a
particular location. A tool that would help me know in which
particular file had I entered a code snippet.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://shrysr.github.io/img/emacs-helm-ag-anim.gif&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Searching for &amp;#39;datascience&amp;#39; with emacs-helm-ag through a bunch of awesome-lists and other local repositories.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Well - I found my answer by accident in &lt;a href=&#34;http://www.howardism.org/Technical/Emacs/why-emacs.html&#34; target=&#34;_blank&#34;&gt;Howard&amp;rsquo;s cool blog post&lt;/a&gt; on why
one should learn Emacs - in a footnote (!), in which he&amp;rsquo;s mentioned
&lt;code&gt;ack&lt;/code&gt; and &lt;code&gt;ag&lt;/code&gt; (&lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34; target=&#34;_blank&#34;&gt;the silver searcher&lt;/a&gt;). Sure - I&amp;rsquo;ve read this post before,
but today it&amp;rsquo;s filled me a warm fuzzy feeling of
elation&lt;sup&gt;&lt;a id=&#34;fnr.1&#34; class=&#34;footref&#34; href=&#34;#fn.1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. It is even possible to edit in line with each search.&lt;/p&gt;

&lt;p&gt;The silver searcher github page provides clear examples of how it&amp;rsquo;s significantly faster than ack (and similar). Further exploration led me to the &lt;a href=&#34;https://github.com/syohex/emacs-helm-ag&#34; target=&#34;_blank&#34;&gt;emacs-helm-ag&lt;/a&gt; package, which is a helm interface to &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34; target=&#34;_blank&#34;&gt;the silver searcher&lt;/a&gt;. Implementing emacs-helm-ag was as simple as adding it to my list of packages, and adding a basic setup to my helm configuration.&lt;sup&gt;&lt;a id=&#34;fnr.2&#34; class=&#34;footref&#34; href=&#34;#fn.2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Sweet !!&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://shrysr.github.io/img/helm-ag-emacs.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Notice the search across multiple files. So I&amp;#39;ve called `require org capture` perhaps more times than necessary.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h1 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h1&gt;

&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.1&#34; href=&#34;#fnr.1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; This is my first animated gif in a blog post! It was tricky! I used the free &lt;a href=&#34;https://itunes.apple.com/us/app/giphy-capture-the-gif-maker/id668208984?mt=12&#34; target=&#34;_blank&#34;&gt;GIPHY capture app&lt;/a&gt; on the Mac store.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.2&#34; href=&#34;#fnr.2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; As of now, I add packages to &lt;a href=&#34;https://github.com/jkitchin/scimax&#34; target=&#34;_blank&#34;&gt;Scimax&lt;/a&gt; using this bit of code that I&amp;rsquo;ve obviously borrowed from the internet, and this case - I&amp;rsquo;m afraid I did not note the source.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;;; Setting up use packages
;; list the packages you want
(setq package-list &#39;(diminish org-journal google-this ztree org-gcal w3m org-trello org-web-tools ox-hugo auto-indent-mode ob-sql-mode dash org-super-agenda ox-hugo workgroups2 switch-window ess ess-R-data-view interleave deft org-bookmark-heading writeroom-mode evil evil-leader polymode helm-ag))

;;fetch the list of packages available 
(unless package-archive-contents
  (package-refresh-contents))

;; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

;; Remember to start helm-ag. As per the Silver searcher github site, the helm-follow-mode-persistent has to be set before calling helm-ag.

(custom-set-variables
 &#39;(helm-follow-mode-persistent t))

(require &#39;helm-ag)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Iosevka - an awesome font for Emacs</title>
      <link>https://shrysr.github.io/post/951004ce-add0-4e7e-b6e2-2932e0dee429/</link>
      <pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/post/951004ce-add0-4e7e-b6e2-2932e0dee429/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s well known that installing a SSD in place of the conventional Hard disk can breathe new life into very old machines. My mid 2010 Macbook Pro is one such example, being over 8 years old. &lt;sup&gt;&lt;a id=&#34;fnr.1&#34; class=&#34;footref&#34; href=&#34;#fn.1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;, &lt;/sup&gt;&lt;sup&gt;&lt;a id=&#34;fnr.2&#34; class=&#34;footref&#34; href=&#34;#fn.2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;, &lt;/sup&gt;&lt;sup&gt;&lt;a id=&#34;fnr.3&#34; class=&#34;footref&#34; href=&#34;#fn.3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Before my foray into Emacs, I purchased applications like &lt;a href=&#34;https://ia.net/writer&#34; target=&#34;_blank&#34;&gt;IAWriter&lt;/a&gt;
(classic)&lt;sup&gt;&lt;a id=&#34;fnr.4&#34; class=&#34;footref&#34; href=&#34;#fn.4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;, &lt;a href=&#34;http://brettterpstra.com/2017/08/01/long-form-writing-with-marked-2-plus-2-dot-5-11-teaser/&#34; target=&#34;_blank&#34;&gt;Marked2&lt;/a&gt;, &lt;a href=&#34;http://www.texts.io/&#34; target=&#34;_blank&#34;&gt;Texts&lt;/a&gt; (cross platform Mac/Windows) and also tried
all the recommended apps for longer form writing. I am a fan of zen
writing apps. In particular the font and environment provided by
IAWriter are quite conducive to focused writing.&lt;/p&gt;

&lt;p&gt;Zen writing apps are called so because they have a unique combination
of fonts, background color, including line spacing and overall
text-width - all of which enable a streamlined and focused flow of
words onto the screen. Any customisation required towards this end is
possible in Emacs.&lt;/p&gt;

&lt;p&gt;Texts has some nifty features (besides being cross platform), but the
font and appearance is not as beautiful as IAWriter. Both IAWriter
(classic) and Texts have minimal settings for further customisation. See the comparison below:&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://shrysr.github.io/img/emacs-texts.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Emacs (writeroom-mode &amp;#43; Iosevka font) || Texts (Sepia theme)&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;figure&gt;
    
        &lt;img src=&#34;https://shrysr.github.io/img/emacs-iawriter.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Emacs (writeroom-mode, Iosevka font) || IAWriter(Classic)&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;While everybody&amp;rsquo;s style and approach vary, there are many authors who
swear by archaic text editors and tools that enable distraction free
writing. One example is &lt;a href=&#34;http://tonyballantyne.com/how-to-write/writing-tools/&#34; target=&#34;_blank&#34;&gt;Tony Ballantyne&amp;rsquo;s post on writing tools&lt;/a&gt;, and
his website also provides links to other authors and Emacs
configurations, not to mention programming tutorials!&lt;/p&gt;

&lt;p&gt;The next best thing to a clear retina display on a MacBook Pro, is a
beautiful font face to take you through the day, enhancing the viewing
pleasure and thus the motivation to work longer.&lt;/p&gt;

&lt;p&gt;In Emacs, the &lt;a href=&#34;https://github.com/joostkremers/writeroom-mode&#34; target=&#34;_blank&#34;&gt;writeroom-mode&lt;/a&gt; &lt;sup&gt;&lt;a id=&#34;fnr.5&#34; class=&#34;footref&#34; href=&#34;#fn.5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; can be used and Emacs can be
customised to mimic IAWriter. In this regard, the font &lt;a href=&#34;https://be5invis.github.io/Iosevka/&#34; target=&#34;_blank&#34;&gt;Iosevka&lt;/a&gt;, is a great font to try. This &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/5twcka/which_font_do_you_use/&#34; target=&#34;_blank&#34;&gt;old Emacs reddit&lt;/a&gt; has many more suggestions. One post
described Iosevka as  &lt;em&gt;&amp;ldquo;it&lt;/em&gt; &lt;em&gt;doesn&amp;rsquo;t look like much, but after a few
hours it will be difficult to&lt;/em&gt; &lt;em&gt;use any other font.&amp;rdquo;&lt;/em&gt; This is exactly
what happened to me.&lt;/p&gt;

&lt;h1 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h1&gt;

&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.1&#34; href=&#34;#fnr.1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; In particular, &lt;code&gt;mu4e&lt;/code&gt; responds much more quickly and there is
significantly less lag in accessing emails and &lt;code&gt;HTML&lt;/code&gt;
rendering. Overall, no matter how lightweight the OS is - the SSD
makes a rather magnificent difference to operational speed, breathing
life into old notebooks. Did I mention my MacBook Pro is a mid
2010 version that&amp;rsquo;s 8+ years old?&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.2&#34; href=&#34;#fnr.2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; Of course, the other advantages is that installation and setup
instructions are typically available out the box for the MacBook
Pro. I have access to dedicated apps including Evernote, Dash,
Spotify, Whatsap, Slack, not to mention the retina display, which
makes a massive difference to viewing pleasure.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.3&#34; href=&#34;#fnr.3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; I do love Arch Linux and Antergos. However, a little bit of
elegance in the user interface and hardware does ease up the mind. In
the MacBook, out of the box - it is easy to move around virtual
desktops and use the magic track pad to rapidly switch between
applications as well. I&amp;rsquo;m sure many of these &amp;lsquo;gimmicks&amp;rsquo; may be setup
with diligence and due time on Linux through open source solutions of
varying levels of quality. However, as of today, I would have
struggled, and quite possibly ended up making compromises. This would
take place after hours of searching for an alternate (and acceptable)
solution for software packages that are not yet ported to
Linux. Typically, the compromises would mean using Electron or Web
based versions of apps, which are often not as powerful as the desktop
app, not to mention inconvenient. A prime example would be Evernote.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.4&#34; href=&#34;#fnr.4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; The latest version of IAWriter has a truck load of features and
advantages over over the Classic version. I did consider purchasing
it, but Emacs won the day. Nevertheless, as a plain vanilla writing
app - IAWriter offers much right out of the box.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.5&#34; href=&#34;#fnr.5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; There&amp;rsquo;s still a lot of tweaking to be done with &lt;code&gt;writeroom-mode&lt;/code&gt;,
but this is certainly a workable result. My nascent configuration for
writeroom-mode in emacs is as follows (munged off the internet!). It&amp;rsquo;s remarkable how much was
achieved with a few lines of code!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(with-eval-after-load &#39;writeroom-mode
  (define-key writeroom-mode-map (kbd &amp;quot;C-s-,&amp;quot;) #&#39;writeroom-decrease-width)
  (define-key writeroom-mode-map (kbd &amp;quot;C-s-.&amp;quot;) #&#39;writeroom-increase-width)
  (define-key writeroom-mode-map (kbd &amp;quot;C-s-=&amp;quot;) #&#39;writeroom-adjust-width))

(advice-add &#39;text-scale-adjust :after
        #&#39;visual-fill-column-adjust)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Notes from the movie Whiplash</title>
      <link>https://shrysr.github.io/post/5fc69e19-e330-4dd9-9317-7280a9c93966/</link>
      <pubDate>Fri, 11 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/post/5fc69e19-e330-4dd9-9317-7280a9c93966/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/Whiplash_%25282014_film%2529&#34; target=&#34;_blank&#34;&gt;Whiplash: Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whiplash is a fascinating movie on many levels regarding a topic that interests me deeply&amp;#x2026; How to progressively perform, and strive to become the very best in a chosen field. Personally, I found each step of the movie riveting and would recommend it to anybody who would find the above question even mildly interesting. The movie&amp;rsquo;s climax  was immensely interesting, inspiring and supported by great acting.  At any rate, the movie induced a blog post&amp;#x2026;&lt;/p&gt;

&lt;p&gt;The story revolves around the mind and life of a student who wants to be among the greats in his field, and the way he deals with an abrasive, abusive and unorthodox teacher whose intentions are to bring out the best in a student. No movie is perfect - while some points in Whiplash do appear extreme and therefore relatively unrealistic - the overriding message and theme conveyed certainly rings out clearly, in an engaging plot.&lt;/p&gt;

&lt;p&gt;I could relate to the following pointers from the movie:&lt;/p&gt;

&lt;h1 id=&#34;leverage-stress-to-achieve-new-levels-of-insight-and-performance&#34;&gt;Leverage stress to achieve new levels of insight and performance&lt;/h1&gt;

&lt;p&gt;The belief of the teacher, that the best performance or attributes hidden inside a person can come out only via repeated, unexpected and  stressful prodding. I&amp;rsquo;m not sure if this works as shown in the movie, but I have found unexpected insights at times of extreme stress, that have been taken forward to habits that changed my life.&lt;/p&gt;

&lt;h1 id=&#34;weathering-criticism&#34;&gt;Weathering criticism&lt;/h1&gt;

&lt;p&gt;The mental conditioning required to weather and beat intense, sharp,
depressing criticism along with verbal and physical abuse from a
mentor or teacher and use the same as a motive force for
self-improvement and eventually superlative performance. Though there
are examples of extreme abrasiveness in leaders like Steve Jobs - such
an approach would not be tolerated by most people today.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I know other stories of people working under such mentors,
striving to learn and gain their approval and eventually winning
the same. These efforts paid off by resulting in skills, thinking
patterns and a superior mental conditioning. Finding such a mentor
at the formative stage is probably the best thing to happen to
anybody.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An effective strategy to find mentors is to shadow people on Linked in and learn from their profiles and activity. Some of them may be willing to connect and invest time in mentoring.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Another possibility to find like minded people and mentors would be to join the communities of on-line courses, like Datacamp and Dataquest, who have lively channels in Slack for paid members.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;getting-back-up-after-a-fall&#34;&gt;Getting back up after a fall&lt;/h1&gt;

&lt;p&gt;Everybody breaks. Just as the promising student in Whiplash
breaks. But the champions among us rally, to stage a comeback and
performance that make history.&lt;/p&gt;

&lt;p&gt;Regularly surpassing the level of deliberate knowledge of your own performance, and thus improvement by exactly being able to measure your performance and pinpoint mistakes. This point is portrayed in a very interesting manner in Whiplash, where the teacher expects the student to know exactly what mistake is being made.&lt;/p&gt;

&lt;h1 id=&#34;be-great-not-good&#34;&gt;Be Great, not Good&lt;/h1&gt;

&lt;p&gt;Rejecting the &amp;lsquo;Good&amp;rsquo; or &amp;lsquo;Good enough&amp;rsquo; feedback from anybody. The goal is to be &lt;em&gt;Great&lt;/em&gt;, not good. The goal should be to strive to set the precedent and not just follow a beaten track. The pinpoint focus should be on progressive improvement to become the best, and that entails never being satisfied and to be ruthless in rooting out flaws.&lt;/p&gt;

&lt;h1 id=&#34;achieving-balance-mind-body-surroundings&#34;&gt;Achieving Balance : mind + body + surroundings&lt;/h1&gt;

&lt;p&gt;Great performance is about that perfect balance between the body, mind and environment to leverage the best result possible. I view the scene where the student survives a car crash, just to reach a performance and then not being able to perform, as a good example of overreaching, without strengthening the core, and thus inviting instability.&lt;/p&gt;

&lt;h1 id=&#34;go-off-the-beaten-track-and-lose-yourself&#34;&gt;Go off the beaten track and Lose yourself&lt;/h1&gt;

&lt;p&gt;It was the ending of Whiplash that truly drove me to comprehend the points so far. It is twisted, quite unexpected and led me to truly enjoy the movie and appreciate that: despite the above points being reasonably discernible - the human mind and nature is exceedingly complex. Stability and reasoning are not the only keystones to the foundation of greatness. There has to be a &lt;em&gt;healthy&lt;/em&gt; mix of some form of abnormal obsession thrown in, to make a stellar performance what it is. However, can this be practically repeated on a regular basis?&lt;/p&gt;

&lt;h1 id=&#34;learning-velocity-and-flow&#34;&gt;Learning velocity and Flow&lt;/h1&gt;

&lt;p&gt;There are several bodies of research work available today that can be studied to get closer to consciously stimulating a great performance. One such example is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://unmistakablecreative.com/podcast/unlocking-the-talent-code-with-dan-coyle&#34; target=&#34;_blank&#34;&gt;Unlocking the Talent Code With Dan Coyle&lt;/a&gt; on the Unmistakable
Creatives podcast provides an insight in line with the points seen
above, into what constitute outliers and performers. The interesting
concept of &amp;lsquo;Learning velocity&amp;rsquo; is explained by Dan with a lucid
example. It is surmised that progress and maximum learning to become
better occurs &lt;em&gt;at&lt;/em&gt; the boundary line dividing what we know at the
moment, and the unknown skills that beckon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That point sems to be an amalgamation of several factors, that are typically present when someone is in &amp;lsquo;flow&amp;rsquo;. Perhaps this flow can be described as a heightened sense of what is, and what should be and the energy to strive and achieve what should be.. It certainly does feel logical to think that we become better by pushing that boundary.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>https://shrysr.github.io/talk/example-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 -0500</pubDate>
      
      <guid>https://shrysr.github.io/talk/example-talk/</guid>
      <description>&lt;p&gt;Embed your slides or video here using &lt;a href=&#34;https://sourcethemes.com/academic/post/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;shortcodes&lt;/a&gt;. Further details can easily be added using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CFD Post Processing automation</title>
      <link>https://shrysr.github.io/project/cfd-post-automation/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/project/cfd-post-automation/</guid>
      <description>

&lt;p&gt;It is possible (and prevalent) to create templates to post process CFD Simulation results in ANSYS CFD Post using session (.cse) files. Using Shell scripts, it would then be simple to apply these session files on multiple result files and extract the output dictated by the session file.&lt;/p&gt;

&lt;p&gt;This python script that enables the user to set the location of:
- the session file (.cse)
- the CFD result files (.res)
- create a BAT script with sequential lines, each calling ANSYS CFD Post with the necessary arguments
- run the session script on all the result files available in a particular location.
- gracefully exit, removing all the temporary script files.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/shrysr/cfdpost_auto&#34; target=&#34;_blank&#34;&gt;Code On Github&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;how-it-helps&#34;&gt;How it helps&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;While these operations could be done directly in python, it is
easier and simpler to control ANSYS CFD post using a BASH
script. Therefore the python program creates a BASH script.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;python-script&#34;&gt;Python script&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
Created on Thu Dec 18 16:10:49 2014
@author: shrysr
&amp;quot;&amp;quot;&amp;quot;

# Description: 
# This is a simple program that is designed to apply am ANSYS CFD post macro on all the results available at a particular location, one after the other. There are 3 strings required to be set as input by the user.
# 1. The location of the ANSYS CFD Post executable
# 2. THe path to the macro file (.cst/.cse)
# 3. The folder location where the result files are located.

# Note : the &amp;gt;quit command can be written in the post macro to optionally execute the post macro on one file after the other automatically. Otherwise CFD Post has to be quit manually by the user after the macro is applied on each file.

###---------- USER INPUT -------------###
# Setting the paths to various locations.

CFDPost_loc=r&#39;&amp;quot;C:\Program Files\ANSYS Inc\v145\CFD-Post\bin\cfdpost&amp;quot;&#39; #Setting the path to the ANSYS CFD Post executable.

Post_template_loc=r&#39;&amp;quot;C:\\example_location\post_macro.cse&amp;quot;&#39; #Path to the .cse/.cst post macro to be applied.

Res_loc=r&amp;quot;Q:\Queueing_sys\Completed\Archive\Shreyas&amp;quot; #Folder location of the result file path

###---x---x--x-- USER INPUT -x---x---x---x--###

#importing required libraries
import os
import glob
import subprocess as sp

#Creating BAT script for extracting the list of res files in the current working folder - sorted Date wise
def res_list_syn(Res_loc):
    &amp;quot;&amp;quot;&amp;quot;
    Grabs all the CFX res files in the chosen location  (Res_loc) and stores them in the variable (array) A1.
    The variableA1 is passed onto another function which uses the array contents
    Example:
    &amp;gt;&amp;gt;&amp;gt; Res_loc=r&amp;quot;Q:\Queueing_sys\Completed\Archive&amp;quot;
    &amp;gt;&amp;gt;&amp;gt; post_syn(Res_loc)
    &amp;gt;&amp;gt;&amp;gt; return variableA1
    &amp;quot;&amp;quot;&amp;quot;
    print &amp;quot;&amp;quot;
    print &amp;quot;Grabbing all res files from chosen location.&amp;quot;
    os.chdir(Res_loc)
    reslist=glob.glob(&#39;*.res&#39;)
    print &amp;quot;Passing the list of res files to the Post_Syn function&amp;quot;
    post_syn(reslist)

def post_syn(variable):
    print &amp;quot; &amp;quot;    
    print &amp;quot;Listing grabbed res files and creating Post BAT file in chosen location...&amp;quot; 
    print &amp;quot;&amp;quot;
    post_batname=&#39;Post_bat_runner.BAT&#39;   
    post_bat_loc=os.path.join(Res_loc,post_batname)
    PC=open(post_bat_loc,&#39;w&#39;)
    PC.write(&#39;cd /d &amp;quot;%s&amp;quot;\n&#39;%Res_loc)
    i=0
    while i&amp;lt;len(variable):
        print &amp;quot;%d --%s&amp;quot; %(i,variable[i])
        PC.write(&#39;%s -s %s %s\n&#39; %(CFDPost_loc,Post_template_loc,variable[i]))
        i+=1
    PC.close()
    print &amp;quot;Running post macro on all the listed Res Files....&amp;quot;
    print &#39;&#39;
    sp.call(post_bat_loc)
    t.sleep(5)
    print &#39;Killing temp files...&#39;
    t.sleep(5)
    File_killer(Res_loc,&#39;BAT&#39;)


#Function for deleting temp Files. Prevents Clutter.
def File_killer(folder_location, type_of_extension):
    for variable in glob.glob(&#39;%s/*.%s&#39;%(folder_location,type_of_extension)):
        if os.path.isfile(variable):
            os.remove(variable)

#Starting Program. Geting current working directory
print &amp;quot;Hello. Program Launch...--&amp;gt;&amp;quot;
print &amp;quot;&amp;quot;
print &amp;quot;The chosen result location to be scanned is: %s&amp;quot;%Res_loc
print &amp;quot;&amp;quot;
print &amp;quot;Starting scan&amp;quot;
res_list_syn(Res_loc)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Contributions to the CFD-Online Wiki</title>
      <link>https://shrysr.github.io/project/cfd-online-wiki/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/project/cfd-online-wiki/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;View : &lt;a href=&#34;http://www.cfd-online.com/Wiki/What_is_Open_Source%3F&#34; target=&#34;_blank&#34;&gt;CFD-Online Wiki page&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;During my initial foray into open source CFD and especially getting
started with Linux - there was a lot of information that I had to
collate from different sources in order to figure out each step. In
addition, there were perspectives on performance that could be gained
only through experience. Therefore, I plugged back the knowledge
gained to the CFD-Online wiki with the idea that it would help any
newbie get started a little quicker.&lt;/p&gt;

&lt;p&gt;In the last few years, the number of courses and the material
available on-line on CFD, Linux and applying Numerical techniques has
increased substantially. This is somewhat supported by the increasing
trend of page views &lt;a href=&#34;https://www.cfd-online.com/About/&#34; target=&#34;_blank&#34;&gt;shown on the CFD-Online
Wiki&lt;/a&gt;. Nevertheless, this document
still serves as a useful overview and getting started guide.&lt;/p&gt;

&lt;p&gt;The documentation explores the idea of Open Source software, and the
basic techniques to get started with the exploration. Eg: the
different options of running Linux on your current machine as well as
the pros and cons of each approach, and the software options
available, as well as links to useful and high quality information and
tutorials.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Design of an Electro-mechanical prosthetic finger, and a PID controller for the wrist.</title>
      <link>https://shrysr.github.io/project/kinematic-design-finger/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/project/kinematic-design-finger/</guid>
      <description>&lt;p&gt;This project utilized MATLAB, Solidworks to research and design a human finger and calculate the range of it&amp;rsquo;s motion. SIMULINK is also utilised to design a PID controller for the wrist.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simulation job scheduler</title>
      <link>https://shrysr.github.io/project/cfd-simulation-scheduler/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/project/cfd-simulation-scheduler/</guid>
      <description>


&lt;figure&gt;
    
        &lt;img src=&#34;https://shrysr.github.io/img/scheduler-algo.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Scheduler Psuedo-Algorithm&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/shrysr/jobscheduler&#34; target=&#34;_blank&#34;&gt;Code On Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a Python script for a portable, scalable job scheduler with
multiple priorities - for ANSYS CFX simulations. The script was
designed to be called every minute by an external scheduler
program.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the practical case, the free version of the software
&lt;a href=&#34;https://www.splinterware.com/products/scheduler.html&#34; target=&#34;_blank&#34;&gt;System
Scheduler&lt;/a&gt; was
used to deploy the script successfully, for over 3 years, managing 2
computing clusters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once called, the program basically loops through pre designated
folders and lists .def files based on the &lt;em&gt;last modified&lt;/em&gt; date
available in Windows. The system interaction is via BASH scripts
created via the Python code, as well as the python OS library. There
are several in-built flags to support priority, pausing a particular
cluster, logging data and troubleshooting.&lt;/p&gt;

&lt;p&gt;The idea behind the project was to create a multi-platform job
scheduler for ANSYS CFX that has a balance between sophistication and
ease of deployment (and management). Typically job schedulers and load
balancing programs are relatively very sophisticated and complex to
setup with several pre-requisites and constraints. Such complexity
dictates expensive commercial support and licensing considerations.&lt;/p&gt;

&lt;h1 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h1&gt;

&lt;p&gt;A job scheduler or simulation management system was required to address the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Optimum and continuous simulation solver license utilisation by all
members of the team in a First-In-First-Out (FIFO) basis,&lt;/li&gt;
&lt;li&gt;Provision for dynamic or urgent priority jobs, as well as an
interface to submit simulations or view job history.&lt;/li&gt;
&lt;li&gt;Optimisation and management of workload of simulation jobs
facilitating overall project management and planning.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;what-the-program-accomplished&#34;&gt;What the program accomplished&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Allowed users to submit simulations by simply placing the input
files in a particular folder location, which also served as a
particular priority basket.&lt;/li&gt;
&lt;li&gt;Removed the need of creating manual scripts to submit multiple
simulations and resolved inefficient license utilisation approaches.&lt;/li&gt;
&lt;li&gt;Facilitated a optimised approach to certain design cases, thus
resulting in a 75% reduction in simulation time&lt;/li&gt;
&lt;li&gt;Enabled the use of consistent solver and memory utilisation
parameters and settings, allowing efficient deployment and reducing
inefficiencies due to errors.&lt;/li&gt;
&lt;li&gt;Allowed optimal or perfect utilisation of available licensing
scheme, resulting in a significant increase in team output and
productivity.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;tools-used-and-links&#34;&gt;Tools used and links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Written with Python 2.7, using portable python, Spyder, Notepad ++ and Sublime Text 3.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;See the &lt;a href=&#34;https://github.com/shrysr/jobscheduler/wiki/&#34; target=&#34;_blank&#34;&gt;Github Wiki&lt;/a&gt; for the project goals, algorithm and other details.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/shrysr/jobscheduler&#34; target=&#34;_blank&#34;&gt;Code On Github&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Current Trends of Emission Reduction Technology in Vehicular Diesel Engines.</title>
      <link>https://shrysr.github.io/project/emission-technology/</link>
      <pubDate>Tue, 15 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/project/emission-technology/</guid>
      <description>&lt;p&gt;This project undertakes a technology study and survey covering the methods to controlling harmful emission from Diesel engines in particular and the efficacy different technologies. It explores current emission norms and the contradicting formation conditions of NOx and CO.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On-line Certificate Course:   EdX HarvardX PH125.1x: Data Science: R Basics</title>
      <link>https://shrysr.github.io/project/course-edx-harvard-r/</link>
      <pubDate>Tue, 15 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/project/course-edx-harvard-r/</guid>
      <description>

&lt;p&gt;The course covered an introduction to using &lt;code&gt;R&lt;/code&gt; to extract, manipulate and thus analyse data. It basically lays the foundations to using R in data science.&lt;/p&gt;

&lt;h2 id=&#34;verified-edx-certificate-of-achievement-https-courses-edx-org-certificates-0d3a83463cdb49c8aca2aa11ab9bd850&#34;&gt;&lt;a href=&#34;https://courses.edx.org/certificates/0d3a83463cdb49c8aca2aa11ab9bd850&#34; target=&#34;_blank&#34;&gt;Verified EdX Certificate of Achievement&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Course exercises are linked with a Datacamp course.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shrysr.github.io/files/Certificate-datacamp-R-basics.pdf&#34;&gt;Data Science &lt;code&gt;R&lt;/code&gt; basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;course-notes-and-code-https-nbviewer-jupyter-org-github-shrysr-ipython-notebooks-blob-master-r-fundamentals-fundamentals-ipynb&#34;&gt;&lt;a href=&#34;https://nbviewer.jupyter.org/github/shrysr/ipython-notebooks/blob/master/R-fundamentals/fundamentals.ipynb&#34; target=&#34;_blank&#34;&gt;Course Notes and code&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This Jupyter notebook contains code written while following along with the course, which was expanded to illustrate concepts and notes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On-line Courses @ Datacamp</title>
      <link>https://shrysr.github.io/project/course-datacamp-datascience/</link>
      <pubDate>Tue, 15 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/project/course-datacamp-datascience/</guid>
      <description>&lt;p&gt;Links to certificates of courses completed on &lt;a href=&#34;https://www.datacamp.com/&#34; target=&#34;_blank&#34;&gt;Datacamp&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://shrysr.github.io/files/Certificate-datacamp-intro-to-sql.pdf&#34;&gt;Intro to &lt;code&gt;SQL&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://shrysr.github.io/files/Certificate-datacamp-R-basics.pdf&#34;&gt;Data Science &lt;code&gt;R&lt;/code&gt; basics&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Completed as a part of &lt;a href=&#34;https://shrysr.github.io/project/course-edx-harvard-r&#34;&gt;EdX HarvardX PH125.1x: Data Science: R Basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://shrysr.github.io/files/Certificate-datacamp-tidyverse-introduction.pdf&#34;&gt;Introduction to Tidyverse`&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>On-line Courses @ Dataquest</title>
      <link>https://shrysr.github.io/project/course-dataquest-datascience/</link>
      <pubDate>Tue, 15 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/project/course-dataquest-datascience/</guid>
      <description>&lt;p&gt;Links to certificates of courses completed on &lt;a href=&#34;https://www.dataquest.io/view_cert/8GGK4Q8UR961241PKFLI&#34; target=&#34;_blank&#34;&gt;Dataquest&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.dataquest.io/view_cert/8GGK4Q8UR961241PKFLI&#34; target=&#34;_blank&#34;&gt;Data Analyst Path in &lt;code&gt;R&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.dataquest.io/view_cert/Q7WM9PIQA7JRJFMMAZUD/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Git&lt;/code&gt; &amp;amp; Version control&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.dataquest.io/view_cert/M6S5ITVA6FC6BDR650WG/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;SQL&lt;/code&gt; Fundamentals&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>On-line Courses:   Code School</title>
      <link>https://shrysr.github.io/project/course-code-school/</link>
      <pubDate>Tue, 15 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/project/course-code-school/</guid>
      <description>

&lt;p&gt;Completed several courses covering &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;SQL&lt;/code&gt;,&lt;code&gt;regular expressions&lt;/code&gt;. Most of these courses were completed during the occasional &lt;em&gt;Free Weekend&lt;/em&gt; opportunities from &lt;a href=&#34;https://www.codeschool.com/&#34; target=&#34;_blank&#34;&gt;Code School&lt;/a&gt;, where the paid courses are available to be completed at no cost, for an entire weekend.&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;view-my-code-school-report-https-www-codeschool-com-users-shrysr&#34;&gt;View my &lt;a href=&#34;https://www.codeschool.com/users/shrysr&#34; target=&#34;_blank&#34;&gt;Code School Report &lt;/a&gt;&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Current Trends of Emission Reduction Technology in Vehicular Diesel Engines</title>
      <link>https://shrysr.github.io/publication/emission-study/</link>
      <pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/publication/emission-study/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Design of an Electro-mechanical Anthropometric finger, and a PID controller for the wrist for applications in Prosthetics</title>
      <link>https://shrysr.github.io/publication/kinematic-design-finger/</link>
      <pubDate>Wed, 15 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://shrysr.github.io/publication/kinematic-design-finger/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
