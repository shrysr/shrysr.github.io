<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CFD | Shreyas Ragavan</title>
    <link>https://shreyas.ragavan.co/tags/cfd/</link>
      <atom:link href="https://shreyas.ragavan.co/tags/cfd/index.xml" rel="self" type="application/rss+xml" />
    <description>CFD</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 08 Aug 2019 10:46:00 -0600</lastBuildDate>
    <image>
      <url>https://shreyas.ragavan.co/img/icon-192.png</url>
      <title>CFD</title>
      <link>https://shreyas.ragavan.co/tags/cfd/</link>
    </image>
    
    <item>
      <title>CFX Job scheduler</title>
      <link>https://shreyas.ragavan.co/project/cfx-job-scheduler/</link>
      <pubDate>Thu, 08 Aug 2019 10:46:00 -0600</pubDate>
      <guid>https://shreyas.ragavan.co/project/cfx-job-scheduler/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/shrysr/jobscheduler&#34; target=&#34;_blank&#34;&gt;Code On Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://shrysr.github.io/jobscheduler/index.html&#34; target=&#34;_blank&#34;&gt;Presentation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/shrysr/jobscheduler/wiki&#34; target=&#34;_blank&#34;&gt;Wiki on Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a Python script for a portable, scalable job scheduler with
multiple priorities - for ANSYS CFX simulations. The script was designed
to be called every minute by an external scheduler program.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the practical case, the free version of the software &lt;a href=&#34;https://www.splinterware.com/products/scheduler.html&#34; target=&#34;_blank&#34;&gt;System
Scheduler&lt;/a&gt; was used to deploy the script successfully, for over 3
years, managing 2 computing clusters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once called, the program basically loops through pre designated folders
and lists .def files based on the &lt;em&gt;last modified&lt;/em&gt; date available in
Windows. The system interaction was via BAT  scripts created via the
Python code, as well as the python OS library. There are several
in-built flags to support priority, pausing a particular cluster,
logging data and troubleshooting.&lt;/p&gt;

&lt;p&gt;The idea behind the project was to create a multi-platform job scheduler
for ANSYS CFX that has a balance between sophistication and ease of
deployment (and management). Typically job schedulers and load balancing
programs are relatively very sophisticated and complex to setup with
several pre-requisites and constraints. Such complexity dictates
expensive commercial support and licensing considerations.&lt;/p&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyas.ragavan.co/img/scheduler-algo.png&#34; data-caption=&#34;Scheduler-Psuedo-Algorithm&#34;&gt;
&lt;img src=&#34;https://shreyas.ragavan.co/img/scheduler-algo.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Scheduler-Psuedo-Algorithm
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;h2 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h2&gt;

&lt;p&gt;A job scheduler or simulation management system was required to address
the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Optimum and continuous simulation solver license utilisation by all
members of the team in a First-In-First-Out (FIFO) basis,&lt;/li&gt;
&lt;li&gt;Provision for dynamic or urgent priority jobs, as well as an interface
to submit simulations or view job history.&lt;/li&gt;
&lt;li&gt;Optimisation and management of workload of simulation jobs
facilitating overall project management and planning.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-the-program-accomplished&#34;&gt;What the program accomplished&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Allowed users to submit simulations by simply placing the input files
in a particular folder location, which also served as a particular
priority basket.&lt;/li&gt;
&lt;li&gt;Removed the need of creating manual scripts to submit multiple
simulations and resolved inefficient license utilisation approaches.&lt;/li&gt;
&lt;li&gt;Facilitated a optimised approach to certain design cases, thus
resulting in a 75% reduction in simulation time&lt;/li&gt;
&lt;li&gt;Enabled the use of consistent solver and memory utilisation parameters
and settings, allowing efficient deployment and reducing
inefficiencies due to errors.&lt;/li&gt;
&lt;li&gt;Allowed optimal or perfect utilisation of available licensing scheme,
resulting in a significant increase in team output and productivity.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tools-used-and-links&#34;&gt;Tools used and links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Written with Python 2.7, using portable python, Spyder, Notepad ++ and
Sublime Text 3.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.splinterware.com/products/scheduler.html&#34; target=&#34;_blank&#34;&gt;System Scheduler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CFD Post Processing automation</title>
      <link>https://shreyas.ragavan.co/project/cfd-post-processing-python/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      <guid>https://shreyas.ragavan.co/project/cfd-post-processing-python/</guid>
      <description>

&lt;p&gt;It is possible (and prevalent) to create templates to post process CFD Simulation results in ANSYS CFD Post using session (.cse) files. Using Shell scripts, it would then be simple to apply these session files on multiple result files and extract the output dictated by the session file.&lt;/p&gt;

&lt;p&gt;This python script that enables the user to set the location of:
- the session file (.cse)
- the CFD result files (.res)
- create a BAT script with sequential lines, each calling ANSYS CFD Post with the necessary arguments
- run the session script on all the result files available in a particular location.
- gracefully exit, removing all the temporary script files.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/shrysr/cfdpost_auto&#34; target=&#34;_blank&#34;&gt;Code On Github&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;how-it-helped&#34;&gt;How it helped&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;While these operations could be done directly in python, it is
easier and simpler to control ANSYS CFD post using a BASH
script. Therefore the python program creates a BASH script.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;python-script&#34;&gt;Python script&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
Created on Thu Dec 18 16:10:49 2014
@author: shrysr
&amp;quot;&amp;quot;&amp;quot;

# Description: 
# This is a simple program that is designed to apply am ANSYS CFD post macro on all the results available at a particular location, one after the other. There are 3 strings required to be set as input by the user.
# 1. The location of the ANSYS CFD Post executable
# 2. THe path to the macro file (.cst/.cse)
# 3. The folder location where the result files are located.

# Note : the &amp;gt;quit command can be written in the post macro to optionally execute the post macro on one file after the other automatically. Otherwise CFD Post has to be quit manually by the user after the macro is applied on each file.

###---------- USER INPUT -------------###
# Setting the paths to various locations.

CFDPost_loc=r&#39;&amp;quot;C:\Program Files\ANSYS Inc\v145\CFD-Post\bin\cfdpost&amp;quot;&#39; #Setting the path to the ANSYS CFD Post executable.

Post_template_loc=r&#39;&amp;quot;C:\\example_location\post_macro.cse&amp;quot;&#39; #Path to the .cse/.cst post macro to be applied.

Res_loc=r&amp;quot;Q:\Queueing_sys\Completed\Archive\Shreyas&amp;quot; #Folder location of the result file path

###---x---x--x-- USER INPUT -x---x---x---x--###

#importing required libraries
import os
import glob
import subprocess as sp

#Creating BAT script for extracting the list of res files in the current working folder - sorted Date wise
def res_list_syn(Res_loc):
    &amp;quot;&amp;quot;&amp;quot;
    Grabs all the CFX res files in the chosen location  (Res_loc) and stores them in the variable (array) A1.
    The variableA1 is passed onto another function which uses the array contents
    Example:
    &amp;gt;&amp;gt;&amp;gt; Res_loc=r&amp;quot;Q:\Queueing_sys\Completed\Archive&amp;quot;
    &amp;gt;&amp;gt;&amp;gt; post_syn(Res_loc)
    &amp;gt;&amp;gt;&amp;gt; return variableA1
    &amp;quot;&amp;quot;&amp;quot;
    print &amp;quot;&amp;quot;
    print &amp;quot;Grabbing all res files from chosen location.&amp;quot;
    os.chdir(Res_loc)
    reslist=glob.glob(&#39;*.res&#39;)
    print &amp;quot;Passing the list of res files to the Post_Syn function&amp;quot;
    post_syn(reslist)

def post_syn(variable):
    print &amp;quot; &amp;quot;    
    print &amp;quot;Listing grabbed res files and creating Post BAT file in chosen location...&amp;quot; 
    print &amp;quot;&amp;quot;
    post_batname=&#39;Post_bat_runner.BAT&#39;   
    post_bat_loc=os.path.join(Res_loc,post_batname)
    PC=open(post_bat_loc,&#39;w&#39;)
    PC.write(&#39;cd /d &amp;quot;%s&amp;quot;\n&#39;%Res_loc)
    i=0
    while i&amp;lt;len(variable):
        print &amp;quot;%d --%s&amp;quot; %(i,variable[i])
        PC.write(&#39;%s -s %s %s\n&#39; %(CFDPost_loc,Post_template_loc,variable[i]))
        i+=1
    PC.close()
    print &amp;quot;Running post macro on all the listed Res Files....&amp;quot;
    print &#39;&#39;
    sp.call(post_bat_loc)
    t.sleep(5)
    print &#39;Killing temp files...&#39;
    t.sleep(5)
    File_killer(Res_loc,&#39;BAT&#39;)


#Function for deleting temp Files. Prevents Clutter.
def File_killer(folder_location, type_of_extension):
    for variable in glob.glob(&#39;%s/*.%s&#39;%(folder_location,type_of_extension)):
        if os.path.isfile(variable):
            os.remove(variable)

#Starting Program. Geting current working directory
print &amp;quot;Hello. Program Launch...--&amp;gt;&amp;quot;
print &amp;quot;&amp;quot;
print &amp;quot;The chosen result location to be scanned is: %s&amp;quot;%Res_loc
print &amp;quot;&amp;quot;
print &amp;quot;Starting scan&amp;quot;
res_list_syn(Res_loc)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Contributions to the CFD-Online Wiki</title>
      <link>https://shreyas.ragavan.co/project/cfd-on-line-wiki/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      <guid>https://shreyas.ragavan.co/project/cfd-on-line-wiki/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;View : &lt;a href=&#34;http://www.cfd-online.com/Wiki/What_is_Open_Source%3F&#34; target=&#34;_blank&#34;&gt;CFD-Online Wiki page&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;During my initial foray into open source CFD and especially getting
started with Linux - there was a lot of information that I had to
collate from different sources in order to figure out each step. In
addition, there were perspectives on performance that could be gained
only through experience. Therefore, I plugged back the knowledge
gained to the CFD-Online wiki with the idea that it would help any
newbie get started a little quicker.&lt;/p&gt;

&lt;p&gt;In the last few years, the number of courses and the material
available on-line on CFD, Linux and applying Numerical techniques has
increased substantially. This is somewhat supported by the increasing
trend of page views &lt;a href=&#34;https://www.cfd-online.com/About/&#34; target=&#34;_blank&#34;&gt;shown on the CFD-Online
Wiki&lt;/a&gt;. Nevertheless, this document
still serves as a useful overview and getting started guide.&lt;/p&gt;

&lt;p&gt;The documentation explores the idea of Open Source software, and the
basic techniques to get started with the exploration. Eg: the
different options of running Linux on your current machine as well as
the pros and cons of each approach, and the software options
available, as well as links to useful and high quality information and
tutorials.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
