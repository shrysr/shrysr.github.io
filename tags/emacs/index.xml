<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs | Shreyas Ragavan</title>
    <link>https://shreyas.ragavan.co/tags/emacs/</link>
      <atom:link href="https://shreyas.ragavan.co/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    <description>Emacs</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 03 Nov 2019 07:04:34 -0700</lastBuildDate>
    <image>
      <url>https://shreyas.ragavan.co/img/icon-192.png</url>
      <title>Emacs</title>
      <link>https://shreyas.ragavan.co/tags/emacs/</link>
    </image>
    
    <item>
      <title>Using ESS for Data Science</title>
      <link>https://shreyas.ragavan.co/docs/ess-datascience-r/</link>
      <pubDate>Fri, 15 Mar 2019 11:43:00 -0600</pubDate>
      <guid>https://shreyas.ragavan.co/docs/ess-datascience-r/</guid>
      <description>

&lt;p&gt;RStudio is a formidable IDE to work with and offers an environment to seamlessly work with multiple languages beyond R. It is especially convenient for tasks involving frequent visualisation of data frames and plots, and for use with Shiny app development.&lt;/p&gt;

&lt;p&gt;However, the text (i.e code) editing capabalities are still significantly lacking compared to the likes of Emacs and Vim. Besides this, it does not offer a seamless interface integrating task, time management and multi-language programming environments to the extent available within Org-mode via Emacs. Enter ESS !&lt;/p&gt;

&lt;p&gt;This is an evolving document of how I use ESS  and will be a useful guide to anybody starting out with ESS especially for R based workflows. My ESS configuration is mostly available in my Dotemacs documentation. However this is a deeper dive into ESS workflows for data science projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Emacs Speaks Statistics (ESS) is an add-on package for GNU Emacs. It is designed to support editing of scripts and interaction with various statistical analysis programs such as R, S-Plus, SAS, Stata and OpenBUGS/JAGS. Although all users of these statistical analysis programs are welcome to apply ESS, advanced users or professionals who regularly work with text-based statistical analysis scripts, with various statistical languages/programs, or with different operating systems might benefit from it the most.&lt;/p&gt;

&lt;p&gt;The rationale for developing ESS is that most statistical analysis systems provide a more or less sophisticated graphical user interface (GUI). However, their full power is only available using their scripting language. Furthermore, complex statistical analysis projects require a high degree of automation and documentation which can only be handled by creating statistical analysis scripts. Unfortunately, many statistics packages provide only weak text editor functionality and show major differences between them. Without a unified text editor user interface additional effort is required from the user to cope with limited functionality and with text editor differences.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ess.r-project.org/&#34; target=&#34;_blank&#34;&gt;ESS website&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://ess.r-project.org/index.php?Section=documentation&amp;amp;subSection=manuals&#34; target=&#34;_blank&#34;&gt;Different versions of the ESS manual&lt;/a&gt; are available online and it is worth a frequent read to aid familiarisation with the commands and features available. The ESS mailing list is also worth subscribing to.&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;While it seems that ESS is reasonably popular, it was surprising to find relatively few examples of configurations on the web. The &lt;a href=&#34;https://www.emacswiki.org/emacs/EmacsSpeaksStatistics&#34; target=&#34;_blank&#34;&gt;Emacs ESS wikipage&lt;/a&gt; and &lt;a href=&#34;https://emacs.readthedocs.io/en/latest/ess%5F%5Femacs%5Fspeaks%5Fstatistics.html&#34; target=&#34;_blank&#34;&gt;Yi Tang&amp;rsquo;s Emacs configuration&lt;/a&gt; are among the few useful resources I&amp;rsquo;ve been able to find.&lt;/p&gt;

&lt;h2 id=&#34;starting-a-new-project&#34;&gt;Starting a new project&lt;/h2&gt;

&lt;p&gt;Typically, I start with a fresh Org-mode document for a new project in a repository of its own. This is as easy as &lt;code&gt;M-x nb-new&lt;/code&gt; in Scimax. This initialises a new git repository in the designated projects folder. Currently, I have each such project as a submodule of the main project repo.&lt;/p&gt;

&lt;p&gt;It may seem convenient to include libraries and a variety of other customisations in the .Rrofile startup. However, as mentioned in the initial comments of this &lt;a href=&#34;https://stackoverflow.com/questions/1189759/expert-r-users-whats-in-your-rprofile&#34; target=&#34;_blank&#34;&gt;SO Discussion&lt;/a&gt;, in the interest of reproducibility - it is better to have a script run commands at the beginning of each session. Alternately, one could use a package like YASnippet to insert snippets of frequently used code.&lt;/p&gt;

&lt;h2 id=&#34;org-documents-for-literate-programming&#34;&gt;Org documents for literate programming&lt;/h2&gt;

&lt;p&gt;Being a fan of literate programming, my code is usually embedded into Org-babel source blocks in line with the explanations or analysis.&lt;/p&gt;

&lt;p&gt;For longer projects, I often define a Yasnippet extension for the source code blocks specifying a unique session name to cater to that project. This prevents mixing up of variables and environments between projects as I switch, and I can search and insert snippets with the handy &lt;code&gt;ivy-yasnippet&lt;/code&gt; package that allows previews of snippets before insertion.&lt;/p&gt;

&lt;p&gt;Typically, I enter the major mode from the Org-Babel source block (&lt;code&gt;C-c &#39;&lt;/code&gt; inside a source block) to enable access to mode specific features like command completion, variable access and so on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is worth noting that when entering a major mode from a source block, the correct or desired ESS process has to be attached, especially if you are simultaneously using multiple sessions. This can be done with the &lt;code&gt;C-c C-s&lt;/code&gt; command after entering the major mode buffer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;frequently-used-ess-commands&#34;&gt;Frequently used ESS commands&lt;/h2&gt;

&lt;p&gt;Though there are many commands available - the ones listed below are worth noting. Going through the ESS manual is definitely worth the effort to understand detailed descriptions of these commands. Another simple way to search for commands within ESS is using the &lt;code&gt;M-x&lt;/code&gt; command and type in &amp;lsquo;ess&amp;rsquo; to view the commands available.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;M-p&lt;/code&gt;, &lt;code&gt;M-n&lt;/code&gt; : Previous and next command in comint input history.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-r&lt;/code&gt;      : Regex search of input history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-x&lt;/code&gt;  : List of objects in the environment. Prepend &lt;code&gt;C-u&lt;/code&gt; to print to console. Note that it is possible to list commands of libraries by prepending numbers to &lt;code&gt;C-c C-x&lt;/code&gt;. The default prefix is the global environment, which is a prefix of 1, i.e &lt;code&gt;C-1 C-c C-x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-v&lt;/code&gt;  : Help at point.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-q&lt;/code&gt;  : Ess-quit. This is important to use when exiting an R session. Using this makes sure that temporary buffers are quit. Such buffers can pile up very easily as you use the help documentation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-z&lt;/code&gt;  : Switch between the R script and the process buffer. This is a nifty feature especially when when using&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-M-x&lt;/code&gt;    : Sends the current selected region or function or paragraph.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-d v&lt;/code&gt;: (ess-display-vignettes) this is a handy method to browse all the available vignettes. This opens up a buffer, which contains links to vignettes in multiple formats (PDF, Rmd, Rnw). Note that the vignettes of a newsly installed package is loaded only after being loaded with the library function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-e w&lt;/code&gt; : Resizing the display to adapt to a buffer that has changed dimension. i.e if I split the R terminal buffer which changes it&amp;rsquo;s size - this command will enable the output to be better adjusted to the buffer size and thus enable better readability.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;window-configuration&#34;&gt;Window configuration&lt;/h2&gt;

&lt;p&gt;The ESS manual has a helpful snippet if you prefer your window arrangement similar to Rstudio&amp;rsquo;s, which is quite sensible as such. The width values can be modified as required.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq display-buffer-alist
      `((&amp;quot;*R Dired&amp;quot;
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (slot . -1)
         (window-width . 0.33)
         (reusable-frames . nil))
        (&amp;quot;*R&amp;quot;
         (display-buffer-reuse-window display-buffer-at-bottom)
         (window-width . 0.35)
         (reusable-frames . nil))
        (&amp;quot;*Help&amp;quot;
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (slot . 1)
         (window-width . 0.33)
         (reusable-frames . nil))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rmarkdown-polymode&#34;&gt;Rmarkdown : Polymode&lt;/h2&gt;

&lt;p&gt;Polymode makes it easy to work with Rmd, Rnw, Snw format documents within Emacs. The only configuration necessary for this Is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;poly-markdown)
(require &#39;poly-R)

;; MARKDOWN
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.md&amp;quot; . poly-markdown-mode))

;; R modes
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.Snw&amp;quot; . poly-noweb+r-mode))
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.Rnw&amp;quot; . poly-noweb+r-mode))
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.Rmd&amp;quot; . poly-markdown+r-mode))

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exporting&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Exporting&lt;/h2&gt;

&lt;p&gt;When sharing documents, it is necessary to convert to a format non-Emacs users can user. My current approach is to use &lt;code&gt;ox-ipynb&lt;/code&gt; package to export to as a jupyter notebook, and then the excellent jupytext package to convert to Rmd.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Literate Org-mode configuration for Emacs is liberating</title>
      <link>https://shreyas.ragavan.co/post/d16caa34-c2e2-439b-894f-d95be5708160/</link>
      <pubDate>Sun, 17 Feb 2019 08:02:00 -0700</pubDate>
      <guid>https://shreyas.ragavan.co/post/d16caa34-c2e2-439b-894f-d95be5708160/</guid>
      <description>&lt;p&gt;TLDR: &lt;a href=&#34;https://shreyas.ragavan.co/docs/sr-config&#34;&gt;Check out the Docs section for my Emacs config in Org-mode&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The literate programming paradigm, as conceived by Donald Knuth, represents a move away from writing programs in the manner and order imposed by the computer, and instead enables programmers to develop programs in the order demanded by the logic and flow of their thoughts. Literate programs are written as an uninterrupted exposition of logic in an ordinary human language, much like the text of an essay, in which macros are included to hide abstractions and traditional source code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Literate%5Fprogramming&#34; target=&#34;_blank&#34;&gt;Wikipedia article on Literate Programming&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had graduated to using an Org-mode based configuration with vanilla Emacs, until discovering Scimax a few years ago. At this point, it seemed easier to switch back to using elisp script files in multiple files which were loaded in the desired / necessary order. The plan was to use a file for each major &amp;lsquo;concept&amp;rsquo;, for example one file each for hydras, Org-mode, mu4e, and so on.&lt;/p&gt;

&lt;p&gt;While it is not difficult to manage multiple script files with the projectile package, it does become cumbersome and inelegant to record notes and thoughts in the comment form along with code. Over time, it also becomes difficult to decide the placement of multi-package functions and snippets. As my configuration has evolved - I&amp;rsquo;ve felt an increasing need to shift back to a literate configuration using Org for Emacs, and also separate the personal parts of my configuration to enable sharing on Github.&lt;/p&gt;

&lt;p&gt;Using a literate configuration enables a live documentary of my Emacs configuration and also adding meaningful notes and snippets which are directly or indirectly related to configuring Emacs. For example, it is important to have IPython and Jupyter installed for Scimax to work correctly, and I can include notes and working scripts for the same.&lt;/p&gt;

&lt;p&gt;There are discussions on Emacs init time increasing by using a tangled org file. However, this is atleast partially remedied by including a function to tangle the config file whenever it is saved, and there are other methods &lt;a href=&#34;http://www.holgerschurig.de/en/emacs-efficiently-untangling-elisp/&#34; target=&#34;_blank&#34;&gt;like the one described by Holger Schurig&lt;/a&gt;, which I intend to try out soon. Personally, I have not found any degrade in Emacs init time via Scimax.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Incremental improvements can lead to significant gains</title>
      <link>https://shreyas.ragavan.co/post/32266f09-c9b9-48ff-9c48-e2348eeda33d/</link>
      <pubDate>Sat, 19 Jan 2019 19:33:00 -0700</pubDate>
      <guid>https://shreyas.ragavan.co/post/32266f09-c9b9-48ff-9c48-e2348eeda33d/</guid>
      <description>&lt;p&gt;While reading the book &lt;a href=&#34;https://jamesclear.com/atomic-habits&#34; target=&#34;_blank&#34;&gt;Atomic Habits by James Clear&lt;/a&gt;, I was reflecting that my choice of embracing &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34; target=&#34;_blank&#34;&gt;Emacs&lt;/a&gt; and progressively gaining mastery over it was intimately connected with the philosophy preached in the book.&lt;/p&gt;

&lt;p&gt;My efforts initially started out with a craving for a system to quantify and manage my tasks, habits, notes, blog writing, job applications and projects in a custom environment, and to be able to build toolkits of code to perform repetitive tasks. As mentioned in an &lt;a href=&#34;../2b0b2c79-3f6e-4079-a07d-9e382fda8954&#34;&gt;earlier blog post&lt;/a&gt;
, I tried several approaches before settling on Emacs. The idea was to find or create a single system to track everything of importance in my life (with ease and efficiency). This was instead of a fragmented approach of using multiple tools and techniques, for example, Sublime Text / Atom as a text editor and &lt;a href=&#34;https://todoist.com/?lang=en&#34; target=&#34;_blank&#34;&gt;Todoist&lt;/a&gt; as a task management tool.&lt;/p&gt;

&lt;p&gt;I started with a vanilla configuration of Emacs and painstakingly borrowed (and eventually) modified lisp snippets to implement desired &amp;lsquo;features&amp;rsquo; or behaviors. It was a just a couple of features every week, initially focused on Org mode&amp;rsquo;s behavior alone. That was nearly 3 years ago. As of now, I am able to manage my blog [hugo], view my email [mu4e], browse the web [w3m], seamlessly capture notes / ideas / tasks from (almost) anywhere [Org mode], chat on IRC, build multi-language code notebooks with ease [Org babel]. All the above provide me significant advantages in speed and efficiency which still have plenty of potential to improve.&lt;/p&gt;

&lt;p&gt;Sure, I certainly appear closer to my goal today.. however, I did not know if it was a pipe dream when I started out. It was often extremely frustrating, right from memorizing the &amp;lsquo;crazy&amp;rsquo; keybindings in Emacs, to struggling with getting a lisp snippet to work as expected.&lt;/p&gt;

&lt;p&gt;Choosing Emacs had unexpected rewards as well. For example, the need of synchronizing my notes and Emacs configuration with multiple machines led me to Git. &lt;a href=&#34;https://magit.vc/&#34; target=&#34;_blank&#34;&gt;Magit&amp;rsquo;s&lt;/a&gt; easily accessible commands and relatively visual interface has been a massive help in getting things done with Git, despite not having any deep technical knowledge of how Git works.&lt;/p&gt;

&lt;p&gt;My journey with Emacs is testament that an incremental, compounding improvement over time can ultimately result in significant gains. It is also important to acknowledge that I am standing on the shoulder of giants and the awesome &lt;a href=&#34;https://github.com/jkitchin/scimax&#34; target=&#34;_blank&#34;&gt;Scimax&lt;/a&gt; is a cornerstone in my toolkit.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Leverage recorded macros to learn elisp and hack together workflows in Emacs</title>
      <link>https://shreyas.ragavan.co/post/7b7b94ca-2d77-4814-8cae-c9e95d3f8bc4/</link>
      <pubDate>Sat, 02 Feb 2019 10:16:00 -0700</pubDate>
      <guid>https://shreyas.ragavan.co/post/7b7b94ca-2d77-4814-8cae-c9e95d3f8bc4/</guid>
      <description>&lt;p&gt;The primary power of Emacs is that you can create customised workflows to suit your needs. However, &lt;code&gt;lisp&lt;/code&gt; is probably not a language that many learn as a typical requirement in the academic systems, perhaps even for a software engineer.&lt;/p&gt;

&lt;p&gt;How would one then start customisting Emacs? One way would be to hunt for snippets from forums like reddit and stack overflow, and customise them.&lt;/p&gt;

&lt;p&gt;Another easy way to learn a programming language, especially one that is intrinsic to a software is to record macros and edit these macros. Emacs is no different in this regard, and in fact makes it easy being a self-documenting text editor.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Silex/elmacro&#34; target=&#34;_blank&#34;&gt;The elmacro package&lt;/a&gt; reduces some of the burden. The recorded macro does require a subsequent clean-up to be useful, which is still easier than coding lisp from scratch. In any case, exploring the recorded code will eventuall lead towards proficiency in writing lisp.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://emacsnotes.wordpress.com/2018/11/15/elmacro-write-emacs-lisp-snippet-even-when-you-arent-a-programmer/&#34; target=&#34;_blank&#34;&gt;This blog post&lt;/a&gt; provides a more detailed introduction, including creating a menu entry for elmacro. As highlighted by the blog, some commands do not register in Emacs, since external packages handle those functions.&lt;/p&gt;

&lt;p&gt;For example, I have 3 main repositories where I commit my work. This is a frequent, repetitive process that is often done till (and at) the last minute.&lt;/p&gt;

&lt;p&gt;These are snippets that were developed leveraging elmacro:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Maximise current frame, open scimax user directory,
;; call magit, switch window and open the scimax directory
;; Scimax magit status and dired
(defun sr/windows-magit-scimax ()
  (interactive)
  (ace-delete-other-windows)
  (dired &amp;quot;~/scimax/user/&amp;quot;)
  (switch-window-then-split-right nil)
  (magit-status &amp;quot;~/scimax/&amp;quot;)
  (switch-window)
  (split-window-vertically)
  (dired-up-directory)
  (windmove-right)
  )

;; Maximise current frame, open org directory, call magit
;; my_org magit status
(defun sr/windows-magit-org ()
  (interactive)
  (ace-delete-other-windows)
  (magit-status &amp;quot;~/my_org/&amp;quot;)
  )

;; Maximise current frame, call magit for my_projects directory
;; split buffer and call dired in case I need to navigate to a particular directory.
;; the latter can also be done via magit itself if desired.
(defun sr/windows-magit-projects ()
  (interactive)
  (ace-delete-other-windows)
  (switch-window-then-split-right nil)
  (magit-status &amp;quot;~/my_projects/&amp;quot;)
  (switch-window)
  (dired &amp;quot;~/my_projects/&amp;quot;)
  (switch-window)
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another more complicated example, is using projectile to switch to a project, call a particular file in the project and then split the buffer and open the tasks of that particular project with a narrowed view.&lt;/p&gt;

&lt;p&gt;I capture each project&amp;rsquo;s tasks and notes separately in an org file &lt;a href=&#34;https://shreyas.ragavan.co/post/8f702ce2-8bb7-40a3-b44b-a47222c02909/&#34;&gt;using org-projectile&lt;/a&gt;. This is useful especially for coding projects so that the code is better separated from notes and yet linked.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; This is to rapidly switch between projects and have a similar window configuration,
;; i.e. a main file, and a narrowed view of the tasks heading.

(defun sr/windows-projects ()
  (interactive)
  (ace-delete-other-windows)
  (switch-window-then-split-right nil)
  (projectile-switch-project)
  (switch-window)
  (find-file &amp;quot;~/my_org/project-tasks.org&amp;quot;)
  (widen)
  (helm-org-rifle-current-buffer)
  (org-narrow-to-subtree)
  (outline-show-children)
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are not perfect. For example, I&amp;rsquo;d rather have to select the project name only once and have that feed into &lt;code&gt;helm-org-rifle&lt;/code&gt;. These are topics of future exploration.&lt;/p&gt;

&lt;p&gt;What then remained was being able call these functions with a few keypresses. Hydras enable this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defhydra sr/process-window-keys ()
  &amp;quot;
Key^^   ^Workflow^
--------------------
o       org magit
s       scimax magit
p       projects magit
w       select project and set window config
SPC     exit
&amp;quot;
  (&amp;quot;o&amp;quot; sr/windows-magit-org )
  (&amp;quot;p&amp;quot; sr/windows-magit-projects )
  (&amp;quot;s&amp;quot; sr/windows-magit-scimax )
  (&amp;quot;w&amp;quot; sr/windows-projects)
  (&amp;quot;SPC&amp;quot; nil)
  )

(global-set-key (kbd &amp;quot;&amp;lt;f8&amp;gt; m&amp;quot;) &#39;sr/process-window-keys/body)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the above in place, now all I have to do is call the menu to choose the desired function by typing &lt;code&gt;F8&lt;/code&gt; &lt;code&gt;m&lt;/code&gt; and then type &lt;code&gt;o&lt;/code&gt; or &lt;code&gt;p&lt;/code&gt; and so on. The hydra exits with &lt;code&gt;Space&lt;/code&gt;, which makes it easy to switch to another project in case there is nothing to commit in the current choice.&lt;/p&gt;

&lt;p&gt;Though simple and in many ways primitive - these functions have still saved me a lot of repetitive acrobatics on my keyboard and I enjoy using Them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why bother with Emacs and workflows?</title>
      <link>https://shreyas.ragavan.co/post/11ef85e6-9efc-4af4-b5f3-7648f9ee9308/</link>
      <pubDate>Fri, 05 Jul 2019 12:02:00 -0600</pubDate>
      <guid>https://shreyas.ragavan.co/post/11ef85e6-9efc-4af4-b5f3-7648f9ee9308/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written &lt;a href=&#34;http://localhost:1313/categories/emacs/&#34; target=&#34;_blank&#34;&gt;several posts&lt;/a&gt; on different ways and tools available to aid productivity, and probably a lot about Emacs. My background is in computational physics, and not in programming, and yet Emacs has been an indispensable driver of my daily workflow for the past 3 years.&lt;/p&gt;

&lt;p&gt;The fact is that knowing Emacs (or Vim), or having a custom configuration is &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/9ghpb4/was%5Fanyone%5Fever%5Fimpressed%5Fby%5Fyour%5Femacs%5Fskills/&#34; target=&#34;_blank&#34;&gt;not a wildly marketable skill&lt;/a&gt;, nor is it mandatory to achieve spectacular results. An Emacs configuration suits personal workflows and style, which may be borderline peculiar to another person. Such a dependence on customised tools would also drastically reduces your speed while using a new IDE or text editor.&lt;/p&gt;

&lt;p&gt;So : why add Emacs to the ever-growing to-do list? The question is more pertinent considering that mastery of a &amp;lsquo;text editor&amp;rsquo; is not something you can freely talk about and frequently expect empathetic responses or even a spark like connection. Emacs would be considered by many to be an esoteric and archaic software with a steep learning curve that is not beginner friendly.&lt;/p&gt;

&lt;p&gt;However &amp;hellip;..&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.fugue.co/2015-11-11-guide-to-emacs.html&#34; target=&#34;_blank&#34;&gt;This article&lt;/a&gt; elucidates many points where Emacs can help PHB&amp;rsquo;s (Pointy Haired Boss). The internet abounds with &lt;a href=&#34;https://news.ycombinator.com/item?id=11386590&#34; target=&#34;_blank&#34;&gt;several&lt;/a&gt; &lt;a href=&#34;https://news.ycombinator.com/item?id=6094610&#34; target=&#34;_blank&#34;&gt;examples&lt;/a&gt; on how org-mode and Emacs have changed lives for the better. Here is another &lt;a href=&#34;http://www.howardism.org/Technical/Emacs/new-window-manager.html&#34; target=&#34;_blank&#34;&gt;cool article by Howard Abrams&lt;/a&gt; on using Emacs as his (only) window manager, in place of a desktop environment.&lt;/p&gt;

&lt;p&gt;Watching an experienced person handle his tools emphasises the potential art form behind it, especially when compared to the bumbling of an amateur. Yes, the amateur may get the job done given enough time, and depending on his capabilities - even match the experienced professional&amp;rsquo;s output (eventually).&lt;/p&gt;

&lt;p&gt;However, as experience is gained, the workflows and steps to achieve an optimal result become more lucid. I&amp;rsquo;ve experienced an exponentially increasing and compelling need to implement specific preferences to achieve the required optimized results faster and with fewer mistakes.&lt;/p&gt;

&lt;p&gt;It is therefore obvious that the workflow and tools used must allow the provision to evolve, customise and automate. This is particularly true with respect to the world of data science and programming. I don&amp;rsquo;t think there is anything better than Emacs with respect to customisation.&lt;/p&gt;

&lt;p&gt;Imagine the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;having a combination of scripts or snippets in different languages to jumpstart a project, which is available with a few keypresses? (Yasnippet)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-1&#34;&gt;&lt;a href=&#34;#fn:fn-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Maintaining a blog with a single document, with articles updated automatically on a status change. (ox-hugo)&lt;/li&gt;
&lt;li&gt;working with multiple R environments in a single document. (Org-babel, ESS)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-2&#34;&gt;&lt;a href=&#34;#fn:fn-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Different Window configurations and processes for different projects that can be called with a few keypresses (hint : keyboard macros)&lt;/li&gt;
&lt;li&gt;An integrated git porcelain that can actually help you learn git so much faster (magit)&lt;/li&gt;
&lt;li&gt;Intimately integrating email with tasks, projects, documentation and workflows (mu4e, Org-mode)&lt;/li&gt;
&lt;li&gt;A customised text editor available right in your terminal (Use Emacsclient launched off a daemon within a terminal)&lt;/li&gt;
&lt;li&gt;Not requiring to use the mouse for navigation!&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-3&#34;&gt;&lt;a href=&#34;#fn:fn-3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now : imagine the consolidated effect of having all the above at your disposal, in a reasonably streamlined state. Then, considering the cumulative effect over multiple projects! The above is just a shallow overview of the possibilities with Emacs.&lt;/p&gt;

&lt;p&gt;Investing in learning Emacs, has the serious potential to spawn exponential results in the long run.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-1&#34;&gt;Articles on using Yasnippet: &amp;mdash; &lt;a href=&#34;http://blog.refu.co/?p=1355&#34; target=&#34;_blank&#34;&gt;Using Emacs Yasnippet against repetitive boileplate code&lt;/a&gt; || &lt;a href=&#34;https://jpace.wordpress.com/2012/10/20/tweaking-emacs-snippets/&#34; target=&#34;_blank&#34;&gt;Tweaking Emacs Yasnippet&lt;/a&gt; || &lt;a href=&#34;https://joaotavora.github.io/yasnippet/snippet-expansion.html&#34; target=&#34;_blank&#34;&gt;Expanding snippets&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-2&#34;&gt;Links to using R with Emacs: &lt;a href=&#34;https://www.r-bloggers.com/using-r-with-emacs-and-ess/&#34; target=&#34;_blank&#34;&gt;Using R with Emacs and ESS&lt;/a&gt; || &lt;a href=&#34;https://lucidmanager.org/using-r-with-emacs/&#34; target=&#34;_blank&#34;&gt;Using R with Emacs&lt;/a&gt; || &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/8gr6jt/looking%5Ffor%5Ftips%5Ffrom%5Fr%5Fcoders%5Fwho%5Fuse%5Fess/&#34; target=&#34;_blank&#34;&gt;Tips from R Coders who use ESS&lt;/a&gt; || &lt;a href=&#34;https://thescientificshrimper.wordpress.com/2018/12/12/soapbox-rant-why-i-use-emacs-for-r-programming/&#34; target=&#34;_blank&#34;&gt;Why I use Emacs for R programming&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-2&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-3&#34;&gt;See this &lt;a href=&#34;http://rss.slashdot.org/~r/Slashdot/slashdot/~3/7iykh9HdS5U/i-stopped-using-a-computer-mouse-for-a-week-and-it-was-amazing&#34; target=&#34;_blank&#34;&gt;article of a non-technical user&amp;rsquo;s experiment&lt;/a&gt; with not using the mouse, reporting significant gains in speed and productivity. I&amp;rsquo;ve experienced this myself after gaining basic proficiency in moving around Emacs.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-3&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Back to RSS</title>
      <link>https://shreyas.ragavan.co/post/c641a230-37c9-46aa-84eb-e78cc00d0c7e/</link>
      <pubDate>Sat, 26 Jan 2019 07:51:00 -0700</pubDate>
      <guid>https://shreyas.ragavan.co/post/c641a230-37c9-46aa-84eb-e78cc00d0c7e/</guid>
      <description>

&lt;h2 id=&#34;why-use-rss&#34;&gt;Why use RSS?&lt;/h2&gt;

&lt;p&gt;Off late, I had been relying more on email based content consumption. The phenomenally fast search and filtering capabilities that can be leveraged with &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/mu4e.html&#34; target=&#34;_blank&#34;&gt;mu4e&lt;/a&gt; make this easy.&lt;/p&gt;

&lt;p&gt;Even with all these filters, it is quite difficult to keep on top of news and information from different sources. It is actually inconvenient to mix important emails and correspondence with newsletters and the like, which arrive by the dozen(s) everyday.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a nagging feeling that relevant and &amp;lsquo;up to date&amp;rsquo; information is better searched through Google, with a fresh search each time. This approach invites distractions. One remedy is to link a google news feed of a search term into your RSS.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve always liked &lt;a href=&#34;https://en.m.wikipedia.org/wiki/RSS&#34; target=&#34;_blank&#34;&gt;RSS&lt;/a&gt;, however, the exploration made me actually realise that a dedicated RSS reader could inspire focused reading and aid in retention of information, and could be a better option than flooding my inbox.&lt;/p&gt;

&lt;p&gt;An all-in-one solution for reading RSS feeds with a capable in-built browser to view images/webpages/videos would be excellent, along with the ability to sync with multiple services and facilitate capturing notes.&lt;/p&gt;

&lt;h2 id=&#34;exploration&#34;&gt;Exploration:&lt;/h2&gt;

&lt;p&gt;Within Emacs - &lt;a href=&#34;https://github.com/skeeto/elfeed&#34; target=&#34;_blank&#34;&gt;Elfeed&lt;/a&gt; (along with &lt;a href=&#34;https://github.com/algernon/elfeed-goodies&#34; target=&#34;_blank&#34;&gt;Elfeed-goodies&lt;/a&gt;) is a good option to read feeds and is strongly integrated with Emacs and org-mode. A single keypress can be programmed to store a link as an org-heading with a note. This would really be my first choice as I&amp;rsquo;ve found it to work rather well. I can use an org file to easily organise my feeds !&lt;/p&gt;

&lt;p&gt;Unfortunately, there seems no easy way to sync completed feeds to my iOS devices, though &lt;a href=&#34;https://github.com/areina/elfeed-cljsrn&#34; target=&#34;_blank&#34;&gt;solutions exist for Android&lt;/a&gt;. I do spend a lot of time on my computer, however, it seems I can just read better and faster on my iPad and therefore a sync to mobile devices is still important.&lt;/p&gt;

&lt;p&gt;Though it does not seem to be a mainstream recommendation on reviews like &lt;a href=&#34;https://thesweetsetup.com/apps/best-rss-reader-os-x/&#34; target=&#34;_blank&#34;&gt;the sweet setup&lt;/a&gt; : &lt;a href=&#34;http://www.vienna-rss.com/&#34; target=&#34;_blank&#34;&gt;Vienna&lt;/a&gt; is a reliable solution (open source!) to consider using to browse RSS feeds on the Mac OS. This comes with a caveat - some tinkering is required to get it to sync with a service.Vienna has inbuilt share options to share via Buffer or Twitter. Side note: I would recommend using &lt;a href=&#34;https://buffer.com/&#34; target=&#34;_blank&#34;&gt;Buffer&lt;/a&gt; to manage posts on multiple social media sites in a seamless manner. Buffer&amp;rsquo;s free tier should be sufficient for moderate, personal purposes. I use it to post on Twitter and Linked in simultaneously.&lt;/p&gt;

&lt;h3 id=&#34;harvesting-information&#34;&gt;Harvesting information&lt;/h3&gt;

&lt;p&gt;The next consideration was harvesting notable information of interest from the RSS feeds. If not Emacs, the information has to go to &lt;a href=&#34;https://www.devontechnologies.com/products/devonthink/overview.html&#34; target=&#34;_blank&#34;&gt;DEVONThink Pro&lt;/a&gt; (DTP), which has a handy pull out drawer into which content can be dragged. I was able to just drag and drop the article or text selection into the DTP drawer. This appears as a URL / bookmark in DTP, and can be converted to a formatted note or web archive subsequently. A script could probably accomplish this automatically. That&amp;rsquo;s for a future project.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-1&#34;&gt;&lt;a href=&#34;#fn:fn-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyas.ragavan.co/img/vienna-dtp-drawer.png&#34; data-caption=&#34;Screenshot - Vienna &amp;#43; DTP drawer&#34;&gt;
&lt;img src=&#34;https://shreyas.ragavan.co/img/vienna-dtp-drawer.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Screenshot - Vienna + DTP drawer
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;p&gt;Granted, an application external to Emacs (especially without a customisable keyboard driven flow) is not the desirable way to do things. Most websites usually have an RSS feed or email subscription possibility.&lt;/p&gt;

&lt;h3 id=&#34;opting-for-feedly-as-a-susbcription-service-and-rss-app&#34;&gt;Opting for Feedly as a susbcription service and RSS app&lt;/h3&gt;

&lt;p&gt;Unfortunately, Vienna had to be abandoned as it felt more sensible to opt for a &lt;a href=&#34;https://feedly.com/&#34; target=&#34;_blank&#34;&gt;Feedly&lt;/a&gt; subscription to enable a seamless mobile experience. The Feedly app turned out to run surprisingly well on my ancient iPad and I can still drag and drop entire articles into DTP which come out to be formatted RTFD files which could be read and highlighted in leisure. While it may be nice to opt for a standalone app in the Mac for RSS feeds, the Feedly app satisfies my needs and is also available cross-platform. Note: I use the excellent &lt;a href=&#34;https://www.goldenhillsoftware.com/unread/&#34; target=&#34;_blank&#34;&gt;Unread app&lt;/a&gt; to read RSS on my newer iPhone.&lt;/p&gt;

&lt;p&gt;Besides the numerous sync options, &lt;a href=&#34;https://feedly.com/&#34; target=&#34;_blank&#34;&gt;Feedly&lt;/a&gt; provides other interesting features in their pro subscription, like setting up Google keyword searching and organising multiple feeds into &amp;lsquo;boards&amp;rsquo;. This will certainly help in enabling some level of filtering. The method of organising sources and OPML imports in the mac app is a little clunky and not comfortably intuitive, but it is usable.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s &lt;a href=&#34;https://emacs.stackexchange.com/questions/4138/how-do-i-use-emacs-as-a-feedly-com-client&#34; target=&#34;_blank&#34;&gt;no easy way to use Elfeed as a feedly client&lt;/a&gt; either.&lt;/p&gt;

&lt;h3 id=&#34;how-to-cover-them-all&#34;&gt;How to cover them all?&lt;/h3&gt;

&lt;p&gt;With numerous sources available on most topics - a technique to read is of even more importance. Besides leveraging custom boards, it seems the best way to consume content is to rapidly sweep through the titles and the short descriptions, and in parallel skim through articles of interest. If the article (even slightly) feels worth recording and reading in detail, I select the entire article and drag it into DTP via the drawer for a future session.&lt;/p&gt;

&lt;p&gt;I try to deploy DTP as my primary reading app, because of the ability to highlight lines (which are generally available across devices). Besides aiding in skimming the article in the future, it helps me know I&amp;rsquo;ve actually read the article. This is in addition to the core ability to use DTP&amp;rsquo;s AI algorithms in searching through my notes and forming connections between ideas. I also use smart groups that show me the articles captured in the last 1 week, 2 weeks, 3 weeks, which helps me re-visit them in a structured method. The latter works rather well as a memory aid.&lt;/p&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyas.ragavan.co/img/feedly-dtp-screenshot.png&#34; data-caption=&#34;Article captured from Feedly into DTP&#34;&gt;
&lt;img src=&#34;https://shreyas.ragavan.co/img/feedly-dtp-screenshot.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Article captured from Feedly into DTP
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;h2 id=&#34;future-plans&#34;&gt;Future plans?&lt;/h2&gt;

&lt;p&gt;It would be ideal to setup my own server which will process the RSS feeds. Perhaps a Raspberry Pi or something else could be employed. This would be a cost efficient approach for the long term. Such a setup would enable using Elfeed to source articles from the server and thus sync with my mobile devices.&lt;/p&gt;

&lt;p&gt;For now, I guess I will have to rely on Feedly.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-1&#34;&gt;It is probably worth noting that Feedly pro has several 3rd party integrations available out of the box including Evernote.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Archaic text based email clients rock!</title>
      <link>https://shreyas.ragavan.co/post/e4e7ebb1-4c0c-41d6-b7e4-1c1c09e48c80/</link>
      <pubDate>Sat, 13 Jul 2019 19:33:00 -0600</pubDate>
      <guid>https://shreyas.ragavan.co/post/e4e7ebb1-4c0c-41d6-b7e4-1c1c09e48c80/</guid>
      <description>

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tldr-for-the-busy-folks&#34;&gt;TLDR - for the busy folks&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#goals&#34;&gt;Goals:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiple-email-accounts-dot-lack-of-a-unified-interface-dot&#34;&gt;Multiple email accounts. Lack of a unified interface.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-sync-channels-via-mbsync&#34;&gt;Creating sync channels via &lt;code&gt;mbsync&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#text-based-email-client-speed-simplicity&#34;&gt;Text based email client! Speed + simplicity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-mu4e-rocks-for-me-the-perks&#34;&gt;Why mu4e rocks [for me] - the perks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#quirks&#34;&gt;Quirks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiple-levels-of-filters-are-still-necessary-dot&#34;&gt;Multiple levels of filters are still necessary.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#takeaways&#34;&gt;Takeaways&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#links-and-references&#34;&gt;Links and References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;p&gt;This &lt;a href=&#34;https://dev.to/myterminal/how-i-unified-my-email-accounts-in-2019-1pji&#34; target=&#34;_blank&#34;&gt;dev.to blog post&lt;/a&gt; inspired me to complete this languishing draft of my current email setup, and the benefits I&amp;rsquo;ve gained from using a text based email client in Emacs.&lt;/p&gt;

&lt;p&gt;Hope you find it entertaining. In any case, the links and reference section will certainly prove useful.&lt;/p&gt;

&lt;h2 id=&#34;tldr-for-the-busy-folks&#34;&gt;TLDR - for the busy folks&lt;/h2&gt;

&lt;h3 id=&#34;goals&#34;&gt;Goals:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Unification of email accounts while preserving separate individual components.&lt;/li&gt;
&lt;li&gt;Local backup of email.&lt;/li&gt;
&lt;li&gt;Potential to extend system to a personal server&lt;/li&gt;
&lt;li&gt;Email access from Emacs !&lt;/li&gt;
&lt;li&gt;Hopefully improve overall productivity with reduced context switching.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Started with 2 Gmail accounts and 1 MSN account.&lt;/li&gt;
&lt;li&gt;Switched to a paid account with Fastmail.&lt;/li&gt;
&lt;li&gt;Used Fastmail&amp;rsquo;s tools to transfer email from both Gmail and MSN accounts.&lt;/li&gt;
&lt;li&gt;Setup forwarding for all new emails from to Fastmail.&lt;/li&gt;
&lt;li&gt;Decided between retaining copies of emails in Gmail/MSN or deleting them once forwarded.&lt;/li&gt;
&lt;li&gt;Used customised settings in mu4e to manage Email from within Emacs.&lt;/li&gt;
&lt;li&gt;Occasionally rely on web browser / iOS app. Fastmail&amp;rsquo;s interface is clean and very fast.&lt;/li&gt;
&lt;li&gt;Goals Achieved !! Live with the quirks and enjoy the perks.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Look at the &lt;a href=&#34;#links-and-references&#34;&gt;Links and References&lt;/a&gt; section for almost all the resources I relied on.&lt;/p&gt;

&lt;p&gt;A portion of my mu4e configuration is available &lt;a href=&#34;https://shrysr.github.io/docs/sr-config/#mu4e&#34; target=&#34;_blank&#34;&gt;on my website&lt;/a&gt;. The personal filters and configuration are placed in an encrypted file.&lt;/p&gt;

&lt;p&gt;My mbsync configuration is posted as a &lt;a href=&#34;https://gist.github.com/shrysr/21676fc69d50337d94c5648b9d31f70a&#34; target=&#34;_blank&#34;&gt;public gist&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;multiple-email-accounts-dot-lack-of-a-unified-interface-dot&#34;&gt;Multiple email accounts. Lack of a unified interface.&lt;/h2&gt;

&lt;p&gt;Some years back, I found that I had 2 Gmail accounts, and an MSN account. I
discarded age old Yahoo and rediffmail accounts which were luckily not used much
(and God knows how many more I made as a kid).&lt;/p&gt;

&lt;p&gt;Gmail&amp;rsquo;s interface felt just about tolerable, but inconvenient. The idea of viewing ads tailored to the content of emails had become disconcerting. Their Inbox app was
interesting, but did not work smooth enough. MSN&amp;rsquo;s web interace and apps always
felt cumbersome, though updates over the years, this has improved significantly.&lt;/p&gt;

&lt;p&gt;Useful emails could be email digests that contain a wealth of links,
discussions, articles and information. Or perhaps email digests of product and
technology news that are useful to retain as an archive of reference.&lt;/p&gt;

&lt;p&gt;It would be nice to be able to process these links in a systematic manner, and
have them available with a fast search system that is also integrated with a task
management system.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My solution was to switch to forwarding all my emails to a single Fastmail
account. It&amp;rsquo;s been an excellent experience over 2+ years.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-1&#34;&gt;&lt;a href=&#34;#fn:fn-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;,&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-2&#34;&gt;&lt;a href=&#34;#fn:fn-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;creating-sync-channels-via-mbsync&#34;&gt;Creating sync channels via &lt;code&gt;mbsync&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;My mbsync configuration is posted as a &lt;a href=&#34;https://gist.github.com/shrysr/21676fc69d50337d94c5648b9d31f70a&#34; target=&#34;_blank&#34;&gt;public gist&lt;/a&gt;. It is reasonably self explanatory, and shows how separate channels were made grouping together folders, by specifying a pattern. This took some time, but was finally very satisfying to know as a fine grained control technique.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I started out using offlineimap. I found mbsync to be significantly faster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;text-based-email-client-speed-simplicity&#34;&gt;Text based email client! Speed + simplicity&lt;/h2&gt;

&lt;p&gt;Imagine being engrossed with your code or engineering notebook and the need for
shooting off an urgent brief email arises. What if this could be done with a few
key-presses on an email client, right from the terminal or the code editor that
you are already engrossed in?&lt;/p&gt;

&lt;p&gt;How about adding an email as a task in your organiser with a deadline / planned date?&lt;/p&gt;

&lt;p&gt;What if I had the option to setup separate channels of mail transfer, such that I can sync the inbox or a custom group of folders alone when I am pressed for bandwidth or space?&lt;/p&gt;

&lt;p&gt;Practical solutions will need to cater to a lot more situations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The good news is: usually anything you need is possible (or already implemented) using Emacs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I use &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/mu4e.html&#34; target=&#34;_blank&#34;&gt;mu4e&lt;/a&gt;, which uses the indexer mu as it&amp;rsquo;s back-end. There are other popular
options like &lt;a href=&#34;https://notmuchmail.org/&#34; target=&#34;_blank&#34;&gt;notmuch&lt;/a&gt; and &lt;a href=&#34;http://www.mutt.org/&#34; target=&#34;_blank&#34;&gt;mutt&lt;/a&gt;. I have briefly experimented with mutt, which has
a fast email search capability, but has to be coupled with another front-end to
be used within Emacs or elsewhere. The philosophy and system behind notmuch
(leveraging the Gmail tag based approach) differ from mu4e.&lt;/p&gt;

&lt;p&gt;Over a few years of using this system, I have found that text and terminal based email clients offer a speed and integrity that is extremely pleasing.&lt;/p&gt;

&lt;h2 id=&#34;why-mu4e-rocks-for-me-the-perks&#34;&gt;Why mu4e rocks [for me] - the perks&lt;/h2&gt;

&lt;p&gt;The ability to create custom search filters that can be accessed with easy shortcuts. An example to demonstrate&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq mu4e-bookmarks
      `( ,(make-mu4e-bookmark
	   :name  &amp;quot;Unread messages&amp;quot;
	   :query &amp;quot;flag:unread AND NOT flag:trashed&amp;quot;
	   :key ?u)
	 ,(make-mu4e-bookmark
	   :name &amp;quot;Today&#39;s messages&amp;quot;
	   :query &amp;quot;date:today..now&amp;quot;
	   :key ?t)
	 ,(make-mu4e-bookmark
	   :name &amp;quot;Last 7 days&amp;quot;
	   :query &amp;quot;date:7d..now&amp;quot;
	   :key ?w)
	 ,(make-mu4e-bookmark
	   :name &amp;quot;Messages with images&amp;quot;
	   :query &amp;quot;mime:image/*&amp;quot;
	   :key ?p)
	 ,(make-mu4e-bookmark
	   :name &amp;quot;Finance News&amp;quot;
	   :query (concat &amp;quot;from:etnotifications@indiatimes.com OR &amp;quot;
			  &amp;quot;from:newsletters@valueresearchonline.net&amp;quot;
			  &amp;quot;from:value research&amp;quot;)
	   :key ?f)
	 ,(make-mu4e-bookmark
	   :name &amp;quot;Science and Technology&amp;quot;
	   :query (concat &amp;quot;from:googlealerts-noreply@google.com OR &amp;quot;
			  &amp;quot;from:reply@email.engineering360.com OR &amp;quot;
			  &amp;quot;from:memagazine@asme.org&amp;quot;
			  &amp;quot;from:action@ifttt.com&amp;quot;
			  &amp;quot;from:digitaleditions@techbriefs.info&amp;quot;)
	   :key ?S)
         ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how it looks:&lt;/p&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyas.ragavan.co/img/mu4e-start.png&#34; data-caption=&#34;Mu4e start page&#34;&gt;
&lt;img src=&#34;https://shreyas.ragavan.co/img/mu4e-start.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Mu4e start page
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;p&gt;Complete keyboard based control, and using it with Emacs means the ability to
compose email from anywhere and build all kinds of workflows. Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Hit Control+x and m (&lt;code&gt;C-x m&lt;/code&gt;) in Emacs parlance, and I have a
compose window open.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There are built-in workflows and functions in starter-kits like
&lt;a href=&#34;https://github.com/jkitchin/scimax&#34; target=&#34;_blank&#34;&gt;Scimax&lt;/a&gt;, which enable you to email an org-heading or buffer directly
into an email, with the formatting usually preserved, and as
intended.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I often use yasnippet to insert links to standard attachments like my
resume. This essentially means being able to attach files with a 1-2 key
strokes.&lt;/p&gt;

&lt;p&gt;While Mu4e may be a programmatic solution with no pleasing GUI - it
allows one to search a large number of emails with glorious ease. This
is particularly more effective on a SSD drive, rather than the
conventional Hard disk.&lt;/p&gt;

&lt;p&gt;One has to experience the above to &lt;em&gt;know&lt;/em&gt; the dramatic impact it makes in getting
closer in speed to your thoughts, using a customisable system.  Emails can be
easily captured or added as tasks into &lt;a href=&#34;https://orgmode.org/&#34; target=&#34;_blank&#34;&gt;Org mode&lt;/a&gt; documents as a part of task and
project management.&lt;/p&gt;

&lt;p&gt;Using the mu4e and mbsync, I&amp;rsquo;ve devised a &amp;lsquo;sane inbox&amp;rsquo; which is bereft of the
noise, like annoying digests, social media updates and so on.  The idea was to
dedicate focused blocks to rapidly process email, all within Emacs.&lt;/p&gt;

&lt;p&gt;I have tried using Todoist extensively in the past, along with their integration
with Gmail. This approach is a reasonable solution, if one is open to using
different applications.&lt;/p&gt;

&lt;h2 id=&#34;quirks&#34;&gt;Quirks&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;mu4e&lt;/code&gt; is a text based email interface. It can be set such that the rendered &lt;code&gt;HTML&lt;/code&gt;
is displayed in the mu4e-view buffer for each email, which enables graphics and
pictures (if any). However, the render is not perfect at all times.  The HTML
parsing engine can be specified. Thus, heavy &lt;code&gt;HTML&lt;/code&gt; emails are unlikely to
render correctly, to the extent of being a nuisance.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Such emails can be viewed in the browser of your choice with merely 2 key presses, &amp;lsquo;a&amp;rsquo; and then &amp;lsquo;v&amp;rsquo;, with cursor in the body of the email. This could be Firefox, or &lt;a href=&#34;http://w3m.sourceforge.net/&#34; target=&#34;_blank&#34;&gt;w3m&lt;/a&gt; or any other browser of your choice.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-3&#34;&gt;&lt;a href=&#34;#fn:fn-3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Email syncing frequency is set in mu4e. This update process takes a few seconds, and it is not as seamless as a web app. Notifications for new email can be configured on the mode line or through pop-ups in Emacs. However, the experience with working synced emails is good.&lt;/p&gt;

&lt;h2 id=&#34;multiple-levels-of-filters-are-still-necessary-dot&#34;&gt;Multiple levels of filters are still necessary.&lt;/h2&gt;

&lt;p&gt;Situations where I do not have access to Emacs will need me to use the iOS app or the web interface. Therefore the inbox in the web interface here cannot be &amp;lsquo;insane&amp;rsquo;. Therefore a higher level of filters are implemented in Fastmail itself.&lt;/p&gt;

&lt;p&gt;For example all Linked in group and job updates have their own folders. These
folders are all subfolders of the Archive. They never reach the inbox at
all. These emails often remain unread, or if necessary, I can focus on bunches
of them at a time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By grouping all such incoming mails into subfolders within the Archive folder, I can use a single channel for all the &lt;em&gt;relatively&lt;/em&gt; unimportant mail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;takeaways&#34;&gt;Takeaways&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using an &amp;lsquo;archaic&amp;rsquo; text based email client (mu4e) has significantly boosted the speed with which I can handle my emails and focus on tasks. The simple interface and speed enables better focus.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;While there are many articles and plenty of guidance on this topic, it takes time and patience to get this working the way you need it to. However, once it is setup, it does become rather comfortable to use.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Context switching is expensive on the brain and dents productivity.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integrating email with time and project management is important. mu4e integrates well with Org mode. Beyond tasks, it is also a good reference, and I can easily attach notes, summaries etc to these emails.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;links-and-references&#34;&gt;Links and References&lt;/h2&gt;

&lt;p&gt;These are the links and references I&amp;rsquo;ve used in setting up and troubleshooting my email setup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;These could be organized better, and some links may be repeated. All put together, these should give you all you need to get hooked up!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--quoteend--&gt;

&lt;blockquote&gt;
&lt;p&gt;Some of the links have additional comments, and many are tagged with dates, as a reference to when I collected the link. Sometimes, this is fun to reflect on!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;a href=&#34;http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/&#34; target=&#34;_blank&#34;&gt;A Complete Guide to Email in Emacs using Mu and Mu4e&lt;/a&gt;, &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2017-03-08 Wed 10:04&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ict4g.net/adolfo/notes/2014/12/27/EmacsIMAP.html&#34; target=&#34;_blank&#34;&gt;Reading IMAP Mail in Emacs on OSX | Adolfo Villafiorita&lt;/a&gt;, &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2016-11-27 Sun 08:17&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Excellent link talking about mu4e and notifications &lt;a href=&#34;https://martinralbrecht.wordpress.com/2016/05/30/handling-email-with-emacs/&#34; target=&#34;_blank&#34;&gt;Handling Email with Emacs – malb::blog&lt;/a&gt;, &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2016-08-01 Mon 18:37&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/3s5fas/which%5Femail%5Fclient%5Fmu4e%5Fmutt%5Fnotmuch%5Fgnus%5Fdo%5Fyou/&#34; target=&#34;_blank&#34;&gt;Which email client (mu4e, Mutt, notmuch, Gnus) do you use inside Emacs, and why? : emacs&lt;/a&gt;  &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2016-05-31 Tue 07:32&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://emacs-fu.blogspot.in/2012/08/introducing-mu4e-for-email.html&#34; target=&#34;_blank&#34;&gt;emacs-fu: introducing mu4e, an e-mail client for emacs&lt;/a&gt; - Emacs and mu4e stuff  &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2016-04-20 Wed 13:02&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kirang.in/2014/11/13/emacs-as-email-client-with-offlineimap-and-mu4e-on-osx/&#34; target=&#34;_blank&#34;&gt;Emacs as email client with offlineimap and mu4e on OS X &lt;em&gt;/ KG /&lt;/em&gt; Hacks. Thoughts. Writings.&lt;/a&gt; - nice blog related to Emacs and linux  &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2016-04-21 Thu 22:44&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://writequit.org/eos/eos-mail.html&#34; target=&#34;_blank&#34;&gt;EOS: Mail (Email) Module&lt;/a&gt; - explaining multiple email setup in mu4e  &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2016-04-27 Wed 07:56&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.memoryimprintstudio.com/the-ultimate-emailing-agent-with-mu4e-and-emacs/&#34; target=&#34;_blank&#34;&gt;The Ultimate Emailing Agent with Mu4e and Emacs – Emacs, Arduino, Raspberry Pi, Linux and Programming etc&lt;/a&gt;, &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2016-08-17 Wed 13:19&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://varunbpatil.github.io/2013/08/19/eom/#.VxXTtM7hXCs&#34; target=&#34;_blank&#34;&gt;Varun B Patil | EOM a.k.a End of Mail a.k.a Emacs + offlineimap + mu4e&lt;/a&gt; - multiple accounts  &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2016-04-19 Tue 12:19&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/&#34; target=&#34;_blank&#34;&gt;Master your inbox with mu4e and org-mode | Pragmatic Emacs&lt;/a&gt;  &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2016-03-26 Sat 14:56&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;notmuch - email setup  &lt;a href=&#34;https://wwwtech.de/articles/2016/jul/my-personal-mail-setup&#34; target=&#34;_blank&#34;&gt;My personal mail setup — Articles — WWWTech&lt;/a&gt; &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2017-06-13 Tue 16:09&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kmjn.org/notes/unix%5Fstyle%5Fmail%5Ftools.html&#34; target=&#34;_blank&#34;&gt;Search-oriented tools for Unix-style mail | Mark J. Nelson&lt;/a&gt;, &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2017-05-10 Wed 16:29&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;ul&gt;
&lt;li&gt;interesting comparison of mu and notmuch, going beyond superficial
differences, but not too much depth either.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lukespear.co.uk/mutt-multiple-accounts-mbsync-notmuch-gpg-and-sub-minute-updates&#34; target=&#34;_blank&#34;&gt;Mutt with multiple accounts, mbsync, notmuch, GPG and sub-minute updates | French to English translator&lt;/a&gt;, &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2017-04-28 Fri 07:19&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;ul&gt;
&lt;li&gt;interesting link, author profile and content available on-line.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bostonenginerd.com/posts/notmuch-of-a-mail-setup-part-2-notmuch-and-emacs/&#34; target=&#34;_blank&#34;&gt;Assorted Nerdery - Notmuch of a mail setup Part 2 - notmuch and Emacs&lt;/a&gt;, &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2017-04-27 Thu 18:41&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Mutt,  mu4e and notmuch links

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/6805783/send-html-page-as-email-using-mutt&#34; target=&#34;_blank&#34;&gt;bash - Send Html page As Email using &amp;ldquo;mutt&amp;rdquo; - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fiasko-nw.net/~thomas/projects/htmail-view.html.en&#34; target=&#34;_blank&#34;&gt;Reading html email with mutt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://xaizek.github.io/2014-07-22/prefer-plain-text-format-over-html-in-mutt/&#34; target=&#34;_blank&#34;&gt;Prefer plain text format over HTML in mutt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://foivos.zakkak.net/tutorials/using%5Femacs%5Fand%5Fnotmuch%5Fmail%5Fclient.html&#34; target=&#34;_blank&#34;&gt;Using emacs and notmuch as a mail client - Foivos . Zakkak . net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/4jqyzu/help%5Fwith%5Fmu4e%5Fmultiple%5Faccounts/&#34; target=&#34;_blank&#34;&gt;Help with mu4e multiple accounts : emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/linux/comments/3kj6v4/using%5Fmutt%5Fofflineimap%5Fand%5Fnotmuch%5Fto%5Fwrangle/&#34; target=&#34;_blank&#34;&gt;Using Mutt, OfflineIMAP and Notmuch to wrangle your inbox. : linux&lt;/a&gt;  &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2016-06-16 Thu 15:23&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lwn.net/Articles/705856/&#34; target=&#34;_blank&#34;&gt;A year with Notmuch mail {LWN.net}&lt;/a&gt; &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2018-04-17 Tue 01:21&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;mu4e specific Links  &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2016-04-19 Tue 21:48&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.djcbsoftware.nl/code/mu/mu4e/Gmail-configuration.html#Gmail-configuration&#34; target=&#34;_blank&#34;&gt;Mu4e 0.9.16 user manual: Gmail configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.co.in/search?q=mu4e+tutorials&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;gws%5Frd=cr&amp;amp;ei=4IwVV5jkC8fd0ATZ3q2gDA&#34; target=&#34;_blank&#34;&gt;mu4e tutorials - Google Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/3junsg/tutorial%5Femail%5Fin%5Femacs%5Fwith%5Fmu4e%5Fand%5Fimapssl/&#34; target=&#34;_blank&#34;&gt;Tutorial: email in Emacs with mu4e and IMAP+SSL : emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pragmaticemacs.com/mu4e-tutorials/&#34; target=&#34;_blank&#34;&gt;mu4e tutorials | Pragmatic Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html&#34; target=&#34;_blank&#34;&gt;Drowning in Email; mu4e to the Rescue.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://standardsandfreedom.net/index.php/2014/08/28/mu4e/&#34; target=&#34;_blank&#34;&gt;Emacs &amp;amp; the obsessive email mongerer | Moved by Freedom – Powered by Standards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/mu-discuss/NzQmkK4qo7I&#34; target=&#34;_blank&#34;&gt;Mu4e + nullmailer - Google Groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nullprogram.com/blog/2013/09/03/&#34; target=&#34;_blank&#34;&gt;Leaving Gmail Behind « null program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.co.in/search?q=view+html+mails+in+mu4e&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;gws%5Frd=cr&amp;amp;ei=e74VV%5F%5FiOMPM0ASlsq2ACg&#34; target=&#34;_blank&#34;&gt;view html mails in mu4e - Google Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.djcbsoftware.nl/code/mu/mu4e/Reading-messages.html&#34; target=&#34;_blank&#34;&gt;Mu4e 0.9.16 user manual: Reading messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/1xad11/in%5Fmu4e%5Fis%5Fthis%5Fhow%5Fyour%5Fhtmlheavy%5Femails%5Frender/&#34; target=&#34;_blank&#34;&gt;In mu4e, is this how your HTML-heavy emails render? : emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://varunbpatil.github.io/2013/08/19/eom/#.VxXTtM7hXCs&#34; target=&#34;_blank&#34;&gt;Varun B Patil | EOM a.k.a End of Mail a.k.a Emacs + offlineimap + mu4e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.djcbsoftware.nl/code/mu/mu4e/Marking-messages.html#Marking-messages&#34; target=&#34;_blank&#34;&gt;Mu4e 0.9.16 user manual: Marking messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.co.in/search?q=change+the+date+column+view+in+mu4e&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;gws%5Frd=cr&amp;amp;ei=TDgWV8zEBIOLuwTXk5uYAw#q=change+the+date+column+format+in+mu4e&#34; target=&#34;_blank&#34;&gt;change the date column format in mu4e - Google Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.djcbsoftware.nl/code/mu/mu4e/HV-Overview.html&#34; target=&#34;_blank&#34;&gt;Mu4e 0.9.16 user manual: HV Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.co.in/search?q=increase+column+size+in+mu4e&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;gws%5Frd=cr&amp;amp;ei=ZjsWV7TDLJW3uQT6qZEY&#34; target=&#34;_blank&#34;&gt;increase column size in mu4e - Google Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.djcbsoftware.nl/code/mu/mu4e/HV-Custom-headers.html&#34; target=&#34;_blank&#34;&gt;Mu4e 0.9.16 user manual: HV Custom headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ftp.fau.de/gentoo/distfiles/mu4e-manual-0.9.9.pdf&#34; target=&#34;_blank&#34;&gt;mu4e-manual-0.9.9.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.co.in/search?q=do+mu4e+folders+sync+with+gmail+?&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;gws%5Frd=cr&amp;amp;ei=7DsWV7-NHIyXuASgtJ44#q=do+mu4e+folders+sync+with+gmail+folders&#34; target=&#34;_blank&#34;&gt;do mu4e folders sync with gmail folders - Google Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/3r8dr3/mu4e%5Fsend%5Fmail%5Fwith%5Fcustom%5Fsmtp%5Fand%5Farchive%5Fin/&#34; target=&#34;_blank&#34;&gt;mu4e Send mail with custom SMTP and archive in Gmail &amp;ldquo;Sent&amp;rdquo; folder : emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.brool.com/post/using-mu4e/&#34; target=&#34;_blank&#34;&gt;Using mu4e · Brool &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.co.in/search?q=are+maildir+folders+synced+back+to+gmail+?&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;gws%5Frd=cr&amp;amp;ei=RlwWV5TKKI62uASltLz4Ag&#34; target=&#34;_blank&#34;&gt;are maildir folders synced back to gmail ? - Google Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.offlineimap.org/doc/use%5Fcases.html&#34; target=&#34;_blank&#34;&gt;Some real use cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deferred.io/about/&#34; target=&#34;_blank&#34;&gt;About&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bluishcoder.co.nz/2013/04/30/backing%5Fup%5Fgmail%5Fmessages%5Fwith%5Fofflineimap.html&#34; target=&#34;_blank&#34;&gt;Backing up Gmail messages with offlineimap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.co.in/search?q=notmuch+email+versus+mu4e&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;gws%5Frd=cr&amp;amp;ei=zmcWV8eVEIqdugTzkIpo&#34; target=&#34;_blank&#34;&gt;notmuch email versus mu4e - Google Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/3s5fas/which%5Femail%5Fclient%5Fmu4e%5Fmutt%5Fnotmuch%5Fgnus%5Fdo%5Fyou/&#34; target=&#34;_blank&#34;&gt;Which email client (mu4e, Mutt, notmuch, Gnus) do you use inside Emacs, and why? : emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://irreal.org/blog/?p=2897&#34; target=&#34;_blank&#34;&gt;A Followup on Leaving Gmail | Irreal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cscorley.github.io/2014/01/19/sup/&#34; target=&#34;_blank&#34;&gt;Sup?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pbrisbin.com/posts/mutt%5Fgmail%5Fofflineimap/&#34; target=&#34;_blank&#34;&gt;Mutt + Gmail + Offlineimap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pragmaticemacs.com/emacs/migrating-from-offlineimap-to-mbsync-for-mu4e/&#34; target=&#34;_blank&#34;&gt;Migrating from offlineimap to mbsync for mu4e | Pragmatic Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-1&#34;&gt;Fastmail allows for a variety of interesting features like aliases, easy email transfer (from a different email provider like Gmail or MSN), responsive technical support, and many more aspects, and much more. They have their own implementation of the IMAP protocol, &lt;a href=&#34;https://www.fastmail.com/help/guides/interfaceupdate-2018.html#what-is-jmap&#34; target=&#34;_blank&#34;&gt;called JMAP&lt;/a&gt;, which is significantly faster.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-2&#34;&gt;While there are many advantages in Gmail and many swear by it&amp;rsquo;s search capabilities - it is worth noting that Fastmail&amp;rsquo;s ad-free interface and search just feels a lot quicker than Gmail, and I can find my way around the settings better than I used to with Gmail.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-2&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-3&#34;&gt;You may be surprised to see the ease in browsing a good number of websites on a text based web browser. Besides the added advantage of being within Emacs - a surprising number of websites can be viewed functionally on w3m. It works fine for quick searches on Google (which like anything else, can be done within a few key strokes in Emacs).
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-3&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Juggling multiple projects and leveraging org-projectile</title>
      <link>https://shreyas.ragavan.co/post/8f702ce2-8bb7-40a3-b44b-a47222c02909/</link>
      <pubDate>Fri, 25 Jan 2019 14:44:00 -0700</pubDate>
      <guid>https://shreyas.ragavan.co/post/8f702ce2-8bb7-40a3-b44b-a47222c02909/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/jkitchin/scimax&#34; target=&#34;_blank&#34;&gt;Scimax&lt;/a&gt; has a convenient feature of immediately creating projects (&lt;code&gt;M-x nb-new&lt;/code&gt;). The location of the project directory is defined by the setting &lt;code&gt;(setq nb-notebook-directory &amp;quot;~/my_projects/&amp;quot;)&lt;/code&gt;, which has to be set in your Emacs config. Once the name of the project is chosen, a Readme.org buffer is immediately opened and one can start right away. It is an awesome, friction-free method to get started with a project.&lt;/p&gt;

&lt;p&gt;These projects are automatically initialised as git repositories, to which it is trivial to add a new remote using Magit. Therefore individual folders and git repos are automatically created for each project in the specified project directory. This enables the convenient possibility of keeping the data, folder structures, tasks, notes and scripts of each project separate.&lt;/p&gt;

&lt;p&gt;Different projects can be switched to using &lt;code&gt;M-x nb-open&lt;/code&gt; and typing in a few words that denote the title of the project. Choosing a project automatically provides the option to open the Readme.org files created earlier. Therefore it would be convenient to include relevant links to different locations / scripts and etc in the Readme file.&lt;/p&gt;

&lt;p&gt;Using the above technique resulted in me creating a huge number of projects over a period of time. Especially while working on multiple computers, it is worth inculcating the discipline of adding a remote on github/bitbucket and regularly pushing to the remote.&lt;/p&gt;

&lt;p&gt;The advantage of using a separate repo for each project is the alignment with the space constraints imposed by the free tier repos on bitbucket or github. However, it is also useful to have the entire project folder as a git repo. This can be resolved by adding each project as a sub-module. In this way, all the projects are available with a single clone of the project foder, and then specific sub-modules or projects can be initialized as required. Having separate repos for each project also enables more streamlined collaboration or publishing of a particular project, rather than the entire project folder and allowing separate gitignore lists for each project.Using a single file for all the projects will also enable adding notes pertaining to the content of each project, which can be searched before intialising the entire project repo. Scripts for initializing and commit can also be included in this file for convenience.&lt;/p&gt;

&lt;p&gt;Once the above is done, the &lt;a href=&#34;https://github.com/IvanMalison/org-projectile/blob/master/org-projectile.el&#34; target=&#34;_blank&#34;&gt;org-projectile&lt;/a&gt; package can be leveraged to plan the tasks and manage the notes for each project. It is possible to have all the tasks for a project within a separate file within each project, or specify a single file as the task management for all the projects. This file is then appended to the org-agenda files for tasks to show up in the agenda. As mentioned in the Readme of the org-projectile package the settings would look like the following (for a single file pertaining to all the projects):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Setting up org-projectile
(require &#39;org-projectile)
(setq org-projectile-projects-file
      &amp;quot;~/my_org/project-tasks.org&amp;quot;)
(push (org-projectile-project-todo-entry) org-capture-templates)
(setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
(global-set-key (kbd &amp;quot;C-c n p&amp;quot;) &#39;org-projectile-project-todo-completing-read)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above snippet adds a TODO capture template activated by the letter &amp;lsquo;p&amp;rsquo;, and also adds the &lt;code&gt;project-tasks&lt;/code&gt; file to the agenda files. Inside a project, it is then possible to capture using &lt;code&gt;C-cc p&lt;/code&gt; and add a task which will create a top level heading linked to the project, and the task or note as a sub-heading.&lt;/p&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyas.ragavan.co/img/screenshot-org-projectile.png&#34; data-caption=&#34;org-projectile task capture&#34;&gt;
&lt;img src=&#34;https://shreyas.ragavan.co/img/screenshot-org-projectile.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    org-projectile task capture
  &lt;/figcaption&gt;


&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Jupyter notebooks to Org source &#43; Tower of Babel</title>
      <link>https://shreyas.ragavan.co/post/0b63f316-6f6b-4ec2-84a4-5ff287ecf7a7/</link>
      <pubDate>Fri, 25 Jan 2019 14:44:00 -0700</pubDate>
      <guid>https://shreyas.ragavan.co/post/0b63f316-6f6b-4ec2-84a4-5ff287ecf7a7/</guid>
      <description>

&lt;p&gt;This post provides a simple example demonstrating how a shell script can be called with appropriate variables from any Org file in Emacs. The script essentially converts a Jupyter notebook to Org source, and &lt;a href=&#34;https://orgmode.org/worg/org-contrib/babel/&#34; target=&#34;_blank&#34;&gt;Babel&lt;/a&gt; is leveraged to call the script with appropriate variables from any Org file. This &lt;a href=&#34;https://news.ycombinator.com/item?id=11296843&#34; target=&#34;_blank&#34;&gt;reddit thread&lt;/a&gt; and &lt;a href=&#34;https://lepisma.github.io/2016/11/02/org-babel/&#34; target=&#34;_blank&#34;&gt;blog post&lt;/a&gt; elucidate the advantages of using Babel and Org mode over Jupyter notebooks.&lt;/p&gt;

&lt;p&gt;Directly editing code in a Jupyter notebook in a browser is not an attractive long term option and is inconvenient even in the short term. My preference is to have it all in Emacs, leveraging a versatile Org file where it is easy to encapsulate code in notebooks or projects within Org-headings. Thus, projects are integrated with the in-built task management and calendar of Org mode.&lt;/p&gt;

&lt;p&gt;However, it may be a frequent necessity to access an external Jupyter notebook for which there is no Org source.&lt;/p&gt;

&lt;p&gt;One solution is to start up a Jupyter server locally, open the file and then File &amp;gt;&amp;gt; save as a markdown file, which can be converted to an Org file using pandoc. Remarkably, the output code seems similar to the code blocks used in the R-markdown notebooks, rather than pure markdown markup. Therefore this markdown export should work fine in RStudio as well. However, unless the Jupyter server is always running on your machine, this is a relatively slow, multi-step process.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://emacs.stackexchange.com/questions/5465/how-to-migrate-markdown-files-to-emacs-org-mode-format&#34; target=&#34;_blank&#34;&gt;This SO discussion&lt;/a&gt; provided my answer, which is a 2 step script via the versatile &lt;a href=&#34;https://pandoc.org/&#34; target=&#34;_blank&#34;&gt;pandoc&lt;/a&gt;. A workable solution, as a test conversion revealed. The headings and subheadings and code are converted into Org markup along with Org source blocks.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jupyter nbconvert notebook.ipynb --to markdown
pandoc notebook.md -o notebook.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next consideration was to have the above script or recipe handy for converting any Jupyter notebook to an Org file quickly.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-1&#34;&gt;&lt;a href=&#34;#fn:fn-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; For the script to be referenced and called from any other location,  the source block needs to be defined with a name and the necessary arguments, and also added into the org-babel library.&lt;/p&gt;

&lt;p&gt;In this example the path to the Jupyter notebook, markdown file and resulting org file are specified as variables or arguments. Note that the absolute path to any file is required. Save the following in an Org file, named appropriately, like my-recipes.org&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+NAME: jupyter-to-org-current
#+HEADER:  :var path_ipynb=&amp;quot;/Users/xxx/Jupyter_notebook&amp;quot;
#+HEADER: :var path_md = &amp;quot;Jupyter_notebook-markdown&amp;quot;
#+HEADER: :var path_org = &amp;quot;Jupyter-notebook-org&amp;quot;
#+BEGIN_SRC sh :results verbatim
cwd=$(pwd)
jupyter nbconvert --to markdown $path_ipynb.ipynb --output $cwd/$path_md.md
pandoc $cwd/$path_md.md -o $cwd/$path_org.org
cp $path_ipynb.ipynb $cwd
ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;path_ipynb&lt;/code&gt; variable can be changed as required to point to the Jupyter notebook.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-2&#34;&gt;&lt;a href=&#34;#fn:fn-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;All such blocks above can be stored in Org files and added to the Library of Babel (LOB) by including the following in the Emacs init configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(org-babel-lob-ingest &amp;quot;/Users/shreyas/my_projects/my-recipes.org&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The named shell script source block can now be called from any Org file, with specified arguments and have the notebook. The script is called using the &lt;code&gt;#+CALL&lt;/code&gt; function and using the name and arguments of the source block above.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#+CALL: jupyter-to-org-current(path_md=&amp;quot;Jup-to-markdown&amp;quot;, path_org=&amp;quot;Markdown-to-org&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Therefore, the snippet above will convert a Jupyter notebook to a markdown file named &lt;code&gt;Jup-to-markdown&lt;/code&gt; and then an Org file called &lt;code&gt;Markdown-to-org&lt;/code&gt;. If an argument is not specified, the default value of the paths specified in the original source block will be used.&lt;/p&gt;

&lt;p&gt;Of course, the &lt;code&gt;#+CALL&lt;/code&gt; function used above is also too lengthy to remember and reproduce without headaches. This is also bound to happen as the number of such named code snippets increase. One solution (though not ideal) is to store the &lt;code&gt;#+CALL&lt;/code&gt; as a snippet using &lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;yas-new-snippet&lt;/code&gt;, and load it when needed using the excellent &lt;code&gt;ivy-yasnippet&lt;/code&gt; package (see MELPA), with minimal exertions.&lt;/p&gt;

&lt;h2 id=&#34;further-possibilities&#34;&gt;Further possibilities&lt;/h2&gt;

&lt;p&gt;It would be nice to improve the options available for modifications on the fly. Python may be an &amp;lsquo;easier&amp;rsquo; option to write up for such activities rather than a shell script. For example, a script with the working directory being an additional /optional argument could be considered.&lt;/p&gt;

&lt;p&gt;Another desirable factor in the resulting Org file would be iPython blocks in place of python. As a temporary solution, the python blocks could be converted to ipython blocks via a search and replace throughout the document. A lisp macro / source block could run after the above source block to facilitate the search and replace.&amp;nbsp;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-3&#34;&gt;&lt;a href=&#34;#fn:fn-3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-1&#34;&gt;In &lt;a href=&#34;https://github.com/jkitchin/scimax&#34; target=&#34;_blank&#34;&gt;Scimax&lt;/a&gt; - it is possible to quickly start a new project using &lt;code&gt;M-x nb-new&lt;/code&gt;, which creates a sub-folder in the specified projects folder and creates and opens a readme.org file for the project.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-2&#34;&gt;The option &lt;code&gt;C-u-cl&lt;/code&gt; is a messy way to quickly get the full file name path, the resulting path will need to be modified slightly.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-2&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-3&#34;&gt;It is worth noting that a bunch of additional HTML blocks and hyperlinks are inserted via the above export procedure. It should be possible to add some hooks to clean up the org file after the export from pandoc.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-3&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Emacs notes: Select paragraph and browse-kill-ring for effective content capture</title>
      <link>https://shreyas.ragavan.co/post/2d1b3227-28de-4b30-93c8-ad5cbe276e44/</link>
      <pubDate>Fri, 25 Jan 2019 14:45:00 -0700</pubDate>
      <guid>https://shreyas.ragavan.co/post/2d1b3227-28de-4b30-93c8-ad5cbe276e44/</guid>
      <description>&lt;p&gt;I like to have any reading material and my notes side by side&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-1&#34;&gt;&lt;a href=&#34;#fn:fn-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. This is easily done with Emacs by splitting the buffer vertically (&lt;code&gt;C-x 3&lt;/code&gt;)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-2&#34;&gt;&lt;a href=&#34;#fn:fn-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;For example: Once a link has been opened via w3m, I hit org-capture (&lt;code&gt;C-c&lt;/code&gt;) with a preset template that grabs the URL to the article along with the created date in the properties, with the cursor in position ready to take notes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-capture-templates
&#39;((&amp;quot;l&amp;quot; &amp;quot;Link + notes&amp;quot; entry (file+headline &amp;quot;~/my_org/link_database.org&amp;quot; &amp;quot;.UL Unfiled Links&amp;quot;)
	 &amp;quot;** %? %a &amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The snippet above is activated by the command &amp;lsquo;l&amp;rsquo; and is listed with the title Link + notes in the agenda. It captures the link of the file being viewed as the heading and allows further notes to be inserted below. This is stored into the file &lt;code&gt;link_database&lt;/code&gt; and under the specified heading &lt;code&gt;.UL Unfiled Links&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is also possible to capture a highlighted chunk of text to be added under the heading mentioned above. That would look something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-capture-templates
	&#39;((&amp;quot;e&amp;quot; &amp;quot;Snippet + Notes&amp;quot; entry ;; &#39;w&#39; for &#39;org-protocol&#39;
	 (file+headline &amp;quot;~/my_org/link_database.org&amp;quot; &amp;quot;.UL Unfiled Links&amp;quot;)
	 &amp;quot;*** %a, %T\n %:initial&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I have the capture buffer and the viewing content side by side, by calling &lt;code&gt;C-c l&lt;/code&gt;. I can browse through the article use the mark-paragraph function (conveniently set to &lt;code&gt;M-h&lt;/code&gt;) can be used to select and copy (&lt;code&gt;M-w&lt;/code&gt;) entire paragraphs or alternately use &lt;code&gt;C-spc&lt;/code&gt; to select lines of interest from the article them to the kill ring. The figure below depicts how it looks for me:&lt;/p&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyas.ragavan.co/img/capture-content-emacs.png&#34; data-caption=&#34;Emacs content capture and buffer split&#34;&gt;
&lt;img src=&#34;https://shreyas.ragavan.co/img/capture-content-emacs.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Emacs content capture and buffer split
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;p&gt;It is now possible to continue highlighting interesting lines / paragraphs and copy them, which adds them to the kill-ring. Once the article is done with, I switch over to the capture buffer and hit &lt;code&gt;M-x&lt;/code&gt; browse-kill-ring, which brings up a pop-up buffer with all the items in the kill-ring&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-3&#34;&gt;&lt;a href=&#34;#fn:fn-3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. Once called, I can hit n to move to the next item, and hit &amp;lsquo;i&amp;rsquo; to insert the current item at the cursor location. It is also possible to append / prepend/ edit the item before yanking. All the available shortcuts can be found using &amp;lsquo;?&amp;rsquo;, while in the browse-kill-ring buffer.&lt;/p&gt;

&lt;p&gt;The above methodology curiously enables me to ensure capturing atleast some details of interest from an article / source, and also serve as a quick revision of the read content before filing it away.&lt;/p&gt;

&lt;p&gt;One issue with the above workflow is that while reading multiple articles, there is a chance of mixing up the content being captured from different articles. This could be solved by using &amp;lsquo;x&amp;rsquo; in order to pop items out of the kill ring in the selection process above. However, it seems excessive to clear the entire kill ring for each article read. On the other hand, it could promote a focused workflow.&lt;/p&gt;

&lt;p&gt;Additional possibilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To view pdf files side by side and capture notes is via the &lt;a href=&#34;https://github.com/rudolfochrist/interleave&#34; target=&#34;_blank&#34;&gt;Interleave package&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The org-web-clipper concept outlined &lt;a href=&#34;http://www.bobnewell.net/publish/35years/webclipper.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; is also very convenient to rapidly capture entire webpages being browsed in w3m.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Howard Abrams has &lt;a href=&#34;http://www.howardism.org/Technical/Emacs/capturing-intro.html&#34; target=&#34;_blank&#34;&gt;some great tips&lt;/a&gt; on customising the org-capture mechanism,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Bernt Hansen&amp;rsquo;s comprehensive documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-1&#34;&gt;Sometimes, this procedure has to be set specifically. Some good discussions on SO : &lt;a href=&#34;https://stackoverflow.com/questions/2081577/setting-emacs-split-to-horizontal&#34; target=&#34;_blank&#34;&gt;link1&lt;/a&gt;, &lt;a href=&#34;https://stackoverflow.com/questions/7997590/how-to-change-the-default-split-screen-direction&#34; target=&#34;_blank&#34;&gt;link2&lt;/a&gt;. However, at times horizontal splitting is useful. Therefore, I would rather not set a 0 width-threshold enabling only vertical splitting. &lt;code&gt;lisp (setq split-width-threshold 75) (setq split-height-threshold nil)&lt;/code&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-2&#34;&gt;&lt;code&gt;C-x&lt;/code&gt; essentially means Control + x. &lt;code&gt;M-x&lt;/code&gt; or Meta-x is Alt + x
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-2&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-3&#34;&gt;The browse-kill-ring package can be installed via MELPA. (&lt;code&gt;M-x&lt;/code&gt; install package)
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-3&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Iosevka - an awesome font for Emacs</title>
      <link>https://shreyas.ragavan.co/post/951004ce-add0-4e7e-b6e2-2932e0dee429/</link>
      <pubDate>Fri, 25 Jan 2019 14:44:00 -0700</pubDate>
      <guid>https://shreyas.ragavan.co/post/951004ce-add0-4e7e-b6e2-2932e0dee429/</guid>
      <description>&lt;p&gt;Before my foray into Emacs, I purchased applications like &lt;a href=&#34;https://ia.net/writer&#34; target=&#34;_blank&#34;&gt;IAWriter&lt;/a&gt;
(classic)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-1&#34;&gt;&lt;a href=&#34;#fn:fn-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, &lt;a href=&#34;http://brettterpstra.com/2017/08/01/long-form-writing-with-marked-2-plus-2-dot-5-11-teaser/&#34; target=&#34;_blank&#34;&gt;Marked2&lt;/a&gt;, &lt;a href=&#34;http://www.texts.io/&#34; target=&#34;_blank&#34;&gt;Texts&lt;/a&gt; (cross platform Mac/Windows), and have
also tried almost all the recommended apps for longer form writing. I
am a fan of zen writing apps. In particular the font and environment
provided by IAWriter are conducive to focused writing. There also
exist apps like Hemingway that also help check the quality of your
writing.&lt;/p&gt;

&lt;p&gt;Zen writing apps are called so because they have a unique combination
of fonts, background color, including line spacing and overall
text-width - all of which enable a streamlined and focused flow of
words onto the screen. Any customisation required towards this end is
possible in Emacs.&lt;/p&gt;

&lt;p&gt;The Texts app has some nifty features (besides being cross platform),
but the font and appearance is not as beautiful as IAWriter. Both
IAWriter (classic) and Texts have minimal settings for further
customisation. See the comparison below:&lt;/p&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyas.ragavan.co/img/emacs-texts.png&#34; data-caption=&#34;Emacs (writeroom-mode &amp;#43; Iosevka font) || Texts (Sepia theme)&#34;&gt;
&lt;img src=&#34;https://shreyas.ragavan.co/img/emacs-texts.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Emacs (writeroom-mode + Iosevka font) || Texts (Sepia theme)
  &lt;/figcaption&gt;


&lt;/figure&gt;















&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyas.ragavan.co/img/emacs-iawriter.png&#34; data-caption=&#34;Emacs (writeroom-mode, Iosevka font) || IAWriter(Classic)&#34;&gt;
&lt;img src=&#34;https://shreyas.ragavan.co/img/emacs-iawriter.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Emacs (writeroom-mode, Iosevka font) || IAWriter(Classic)
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;p&gt;While everybody&amp;rsquo;s style and approach vary, there are many authors who
swear by archaic text editors and tools that enable distraction free
writing. One example is &lt;a href=&#34;http://tonyballantyne.com/how-to-write/writing-tools/&#34; target=&#34;_blank&#34;&gt;Tony Ballantyne&amp;rsquo;s post on writing tools&lt;/a&gt;,
and several more examples are available in this &lt;a href=&#34;http://irreal.org/blog/?p=4651&#34; target=&#34;_blank&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next best thing to a clear retina display on a MacBook Pro, is a
beautiful font face to take you through the day, enhancing the viewing
pleasure and thus the motivation to work longer.&lt;/p&gt;

&lt;p&gt;In Emacs, &lt;a href=&#34;https://github.com/joostkremers/writeroom-mode&#34; target=&#34;_blank&#34;&gt;writeroom-mode&lt;/a&gt; and Emacs can be customised to
mimic IAWriter. In this regard, the font &lt;a href=&#34;https://be5invis.github.io/Iosevka/&#34; target=&#34;_blank&#34;&gt;Iosevka&lt;/a&gt;, is a great font to
try. This &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/5twcka/which%5Ffont%5Fdo%5Fyou%5Fuse/&#34; target=&#34;_blank&#34;&gt;old Emacs reddit&lt;/a&gt; has many more suggestions. One post
described Iosevka as &lt;em&gt;&amp;ldquo;it&lt;/em&gt; &lt;em&gt;doesn&amp;rsquo;t look like much, but after a few hours
it will be difficult to&lt;/em&gt; &lt;em&gt;use any other font.&amp;rdquo;&lt;/em&gt; This is exactly what
happened to me.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s still a lot of tweaking to be done with &lt;code&gt;writeroom-mode&lt;/code&gt;,
but this is certainly a workable result. My nascent configuration for
writeroom-mode in emacs is as follows (munged off the internet!). It&amp;rsquo;s
remarkable how much was achieved with a few lines of code!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(with-eval-after-load &#39;writeroom-mode
  (define-key writeroom-mode-map (kbd &amp;quot;C-s-,&amp;quot;) #&#39;writeroom-decrease-width)
  (define-key writeroom-mode-map (kbd &amp;quot;C-s-.&amp;quot;) #&#39;writeroom-increase-width)
  (define-key writeroom-mode-map (kbd &amp;quot;C-s-=&amp;quot;) #&#39;writeroom-adjust-width))

(advice-add &#39;text-scale-adjust :after
	    #&#39;visual-fill-column-adjust)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-1&#34;&gt;The latest version of IAWriter has a truck load of features and advantages over over the Classic version. I did consider purchasing it, but Emacs won the day. Nevertheless, as a plain vanilla writing app - IAWriter offers much right out of the box.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Searching the awesome-lists on Github</title>
      <link>https://shreyas.ragavan.co/post/03133c10-709e-4d06-9f3d-c00ffeae64a7/</link>
      <pubDate>Fri, 25 Jan 2019 14:38:00 -0700</pubDate>
      <guid>https://shreyas.ragavan.co/post/03133c10-709e-4d06-9f3d-c00ffeae64a7/</guid>
      <description>&lt;p&gt;Discovered the glorious awesome lists today on Github. They are
available through a &lt;a href=&#34;https://github.com/search?utf8=%E2%9C%93&amp;amp;q=awesome+list&amp;amp;type=&#34; target=&#34;_blank&#34;&gt;simple search on github&lt;/a&gt;, and contain curated
lists of resources of all kinds on a multitude of topics.&lt;/p&gt;

&lt;p&gt;As one might expect, there is a lot of common ground between these lists,
including topics and links.&lt;/p&gt;

&lt;p&gt;How could one search for a keyword through all these repositories?  I
have always wanted search for particular keywords or code snippets in
my Emacs configuration files, or in other files in a particular
location. This is especially to verify if a bit of code or note is
already available, in another location. Something that looks like this ;):&lt;/p&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyas.ragavan.co/img/emacs-helm-ag-anim.gif&#34; data-caption=&#34;Searching for &amp;lsquo;datascience&amp;rsquo; with emacs-helm-ag through a bunch of awesome-lists and other local repositories.&#34;&gt;
&lt;img src=&#34;https://shreyas.ragavan.co/img/emacs-helm-ag-anim.gif&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Searching for &amp;lsquo;datascience&amp;rsquo; with emacs-helm-ag through a bunch of awesome-lists and other local repositories.
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;p&gt;An answer had been available in &lt;a href=&#34;http://www.howardism.org/Technical/Emacs/why-emacs.html&#34; target=&#34;_blank&#34;&gt;Howard&amp;rsquo;s cool blog post&lt;/a&gt; on why one
should learn Emacs - in a footnote (!), in which he&amp;rsquo;s mentioned &lt;code&gt;ack&lt;/code&gt;
and &lt;code&gt;ag&lt;/code&gt; (&lt;a href=&#34;https://github.com/ggreer/the%5Fsilver%5Fsearcher&#34; target=&#34;_blank&#34;&gt;the silver searcher&lt;/a&gt;).&amp;nbsp;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-1&#34;&gt;&lt;a href=&#34;#fn:fn-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. It is even possible to
edit in line with each search.&lt;/p&gt;

&lt;p&gt;The silver searcher github page provides clear examples of how it&amp;rsquo;s
significantly faster than ack (and similar tools). Further exploration led
me to the &lt;a href=&#34;https://github.com/syohex/emacs-helm-ag&#34; target=&#34;_blank&#34;&gt;emacs-helm-ag&lt;/a&gt; package, which is a helm interface to &lt;a href=&#34;https://github.com/ggreer/the%5Fsilver%5Fsearcher&#34; target=&#34;_blank&#34;&gt;the
silver searcher&lt;/a&gt;. Implementing emacs-helm-ag was as simple as adding it
to my list of packages, and adding a basic setup to my helm
configuration.[^fn:2]&lt;/p&gt;

&lt;p&gt;As of now, I add packages to &lt;a href=&#34;https://github.com/jkitchin/scimax&#34; target=&#34;_blank&#34;&gt;Scimax&lt;/a&gt; using this bit of code that I&amp;rsquo;ve obviously borrowed from the internet, and this case - I&amp;rsquo;m afraid I did not note the source.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Setting up use packages
;; list the packages you want
(setq package-list &#39;(diminish org-journal google-this ztree org-gcal w3m org-trello org-web-tools ox-hugo auto-indent-mode ob-sql-mode dash org-super-agenda ox-hugo workgroups2 switch-window ess ess-R-data-view interleave deft org-bookmark-heading writeroom-mode evil evil-leader polymode helm-ag))

;;fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

;; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

;; Remember to start helm-ag. As per the Silver searcher github site, the helm-follow-mode-persistent has to be set before calling helm-ag.

(custom-set-variables
 &#39;(helm-follow-mode-persistent t))

(require &#39;helm-ag)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how it looks in action &amp;gt;&amp;gt; Sweet !!&lt;/p&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyas.ragavan.co/img/helm-ag-emacs.png&#34; data-caption=&#34;Notice the search across multiple files. So I&amp;rsquo;ve called require org capture perhaps more times than necessary.&#34;&gt;
&lt;img src=&#34;https://shreyas.ragavan.co/img/helm-ag-emacs.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Notice the search across multiple files. So I&amp;rsquo;ve called &lt;code&gt;require org capture&lt;/code&gt; perhaps more times than necessary.
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;p&gt;[^fn:2]:&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-1&#34;&gt;This is my first animated gif in a blog post! It was tricky! I used the free &lt;a href=&#34;https://itunes.apple.com/us/app/giphy-capture-the-gif-maker/id668208984?mt=12&#34; target=&#34;_blank&#34;&gt;GIPHY capture app&lt;/a&gt; on the Mac store.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Literate Programming - Emacs, Howard Abrams and Library of Babel</title>
      <link>https://shreyas.ragavan.co/post/6953c104-a8b3-4779-aad3-c33032beb111/</link>
      <pubDate>Fri, 25 Jan 2019 14:44:00 -0700</pubDate>
      <guid>https://shreyas.ragavan.co/post/6953c104-a8b3-4779-aad3-c33032beb111/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m an admirer of &lt;a href=&#34;https://www.linkedin.com/in/howardeabrams/&#34; target=&#34;_blank&#34;&gt;Howard Abrams&lt;/a&gt;, especially because his posts and videos show the awesome power of doing things in Emacs, and the importance of writing clean and logical code. Watching his videos and reading his posts make me feel like I was born yesterday and I am just getting started. But more importantly, they also fire up my imagination regarding the possibilities out there and the potential to create glorious workflows.&lt;/p&gt;

&lt;p&gt;Howard&amp;rsquo;s tutorial on &lt;a href=&#34;//www.howardism.org/Technical/Emacs/literate-programming-tutorial.html&#34; target=&#34;_blank&#34;&gt;Literate Programming&lt;/a&gt;, combined with his &lt;a href=&#34;https://www.youtube.com/watch?v=dljNabciEGg&#34; target=&#34;_blank&#34;&gt;Literate Devops with Emacs video&lt;/a&gt; are among the best ways to get started with understanding the power of using Org Mode and Org-Babel to create complex, inter-connected, multi-language programs / documents / research that are of course well documented (this being one basic tenet of literate programming). Essentially, Org Mode and Org-Babel enable a high quality programming environment in a single Org mode buffer or document. The said environment is significantly more feature rich compared to Jupyter notebooks, especially being supported by it&amp;rsquo;s foundation in Emacs.&lt;/p&gt;

&lt;p&gt;Though I&amp;rsquo;ve been using Org files for a while now for all my programming explorations, I&amp;rsquo;ve been bothered about my sub-par workflows. I could not easily reference other code blocks and snippets and recipes for a new document or project. It was inefficient and time consuming to locate the necessary snippet and re-write or re-paste the code in the new source blocks. I was not making much progress plodding through the vast documentation of org-babel.&lt;/p&gt;

&lt;p&gt;Therefore, I was thrilled to discover the &lt;a href=&#34;https://orgmode.org/worg/org-contrib/babel/library-of-babel.html&#34; target=&#34;_blank&#34;&gt;Library of Babel&lt;/a&gt; through Howard&amp;rsquo;s tutorial, which can be used to add files to a global library that is accessible from anywhere! Did I mention that it involves hitting barely 3 keys, and any number of arguments can be passed to these source blocks? I&amp;rsquo;m not sure such a feature is available with any other IDE.&lt;/p&gt;

&lt;p&gt;In addition, the above tutorial clearly elucidates how different languages can be combined together, and the video elucidates typical Devops procedures, which are easily taken care of with appropriate arguments and headers to the source code blocks. For example, all the source code blocks could be tangled into appropriately named and located script files using a single argument. These tutorials tied up bits and pieces of info in my head from various sources and was invaluable in enhancing my understanding of using Emacs and Org-Babel&lt;/p&gt;

&lt;p&gt;The Library of Babel can be made persistent across sessions by loading a specified org-file from which the named source code blocks are automatically read in. It is surprising that the internet does not seem to contain more references and examples using the Library of Babel. Perhaps there are some caveats that I am yet to encounter. One question that arises is whether the Library of Babel is automatically updated when the source code block is updated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Emacs &#43; Scimax configuration</title>
      <link>https://shreyas.ragavan.co/docs/sr-config/</link>
      <pubDate>Sun, 03 Nov 2019 07:04:34 -0700</pubDate>
      <guid>https://shreyas.ragavan.co/docs/sr-config/</guid>
      <description>

&lt;h2 id=&#34;introduction-and-preamble&#34;&gt;Introduction and preamble&lt;/h2&gt;

&lt;p&gt;This is my literate, Org-mode based configuration for Emacs, which are essentially customisations built on top of the starter-kit Scimax. View a nicely rendered version with easy navigation &lt;a href=&#34;https://shrysr.github.io/docs/sr-config/&#34; target=&#34;_blank&#34;&gt;on my website&lt;/a&gt;, or if you prefer: &lt;a href=&#34;https://github.com/shrysr/dotemacs&#34; target=&#34;_blank&#34;&gt;on github&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scimax - Awesome editing for scientists and engineers. Scimax is an Emacs starterkit for scientists and engineers. It provides a comprehensive configuration of Emacs for scientific programming and publishing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jkitchin&#34; target=&#34;_blank&#34;&gt;John Kitchin&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Scimax specific variables have their own heading to make it &amp;lsquo;easier&amp;rsquo; to experiment with other starter-kits.&lt;/p&gt;

&lt;p&gt;The style of documentation is particularly influenced by the &lt;a href=&#34;https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org&#34; target=&#34;_blank&#34;&gt;dotemacs config&lt;/a&gt; of &lt;a href=&#34;https://github.com/angrybacon&#34; target=&#34;_blank&#34;&gt;Mathieu Marques&lt;/a&gt;, which I found very engaging to read.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The configuration posted on my website and github repo are updated from time to time, and may be older than the version I am using everyday.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;this-configuration&#34;&gt;This configuration&lt;/h3&gt;

&lt;p&gt;Scimax&amp;rsquo;s init calls the &lt;code&gt;user.el&lt;/code&gt; script placed in the user folder. The following snippet is placed in &lt;code&gt;user.el&lt;/code&gt; to load this org file and then my encrypted personal configuration. This org file and the tangled emacs-lisp script is also available in a &lt;a href=&#34;https://github.com/shrysr/dotemacs&#34; target=&#34;_blank&#34;&gt;github repo&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Loading this file that you are viewing, which I name sr-config.org
(org-babel-load-file (expand-file-name &amp;quot;sr-config.org&amp;quot; user-emacs-directory))

;; Loading secret config containing personal information
(org-babel-load-file (expand-file-name &amp;quot;sr-secrets.org.gpg&amp;quot; user-emacs-directory))

(garbage-collect)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Using this configuration&lt;/p&gt;

&lt;p&gt;While using the Org file - you may need to set &lt;code&gt;:tangle no&lt;/code&gt; in the headers for the code snippets that you do not need, and set the location of directories for org files, org agenda etc.&lt;/p&gt;

&lt;p&gt;A bunch these scripts are not tangled and kept for testing or reference purposes. The tangled &lt;code&gt;config.el&lt;/code&gt; contains the actual configuration that is used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Method 1&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone Scimax&lt;/li&gt;
&lt;li&gt;Add the above snippet to &lt;code&gt;user.el&lt;/code&gt; in the user directory. Update the file name and paths as required.&lt;/li&gt;
&lt;li&gt;Place this org file in the user directory.&lt;/li&gt;
&lt;li&gt;Run the provided script for installing the packages needed for Scimax. Once that is done, &lt;code&gt;user.el&lt;/code&gt; will call this org file.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Method 2&lt;/p&gt;

&lt;p&gt;Pick up snippets that you like from the &lt;code&gt;config.el&lt;/code&gt; file, which is tangled from this org file, and only includes the snippets that I actually use.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Overall Tasks and Areas of Improvement &lt;code&gt;[0/5]&lt;/code&gt;&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Remove packages that are no longer used&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Switch to the use-package approach everywhere.&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Improve the documentation to make it more user friendly.&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Improve instructions to use this configuration&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Figure out how external packages can be installed.&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Script to create symlinks of configuration in scimax/user directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ln -s ~/scimax-personal/preload.el ~/scimax/user/
ln -s ~/scimax-personal/user.el ~/scimax/user/
ln -s ~/scimax-personal/sr-config.org ~/scimax/user/
ln -s ~/scimax-personal/user.el ~/scimax/user/
rm -rf ~/scimax/user/snippets
ln -s ~/scimax-personal/snippets ~/scimax/user/
ln -s ~/scimax-personal/sr-secrets.org.gpg ~/scimax/user/
ln -s ~/scimax-personal/archive ~/scimax/user/
ln -s ~/scimax-personal/external_packages ~/scimax/user/
ln -s ~/scimax-personal/preload.el ~/scimax/user/
ln -s ~/scimax-personal/mail/.mbsyncrc ~/.mbsyncrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using sudo for fastmail certification&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ln -s ~/scimax-personal/mail/fmail.crt /etc/postfix/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other-literate-emacs-configs&#34;&gt;Other literate Emacs configs&lt;/h3&gt;

&lt;p&gt;These references were used for exploration and inspiration. Other resources and references are included with the code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://karl-voit.at/2017/06/03/emacs-org/&#34; target=&#34;_blank&#34;&gt;Karl Voit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org&#34; target=&#34;_blank&#34;&gt;Mathieu Marques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://writequit.org/org/&#34; target=&#34;_blank&#34;&gt;Lee Hinman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pages.sachachua.com/.emacs.d/Sacha.html&#34; target=&#34;_blank&#34;&gt;Sacha Chua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Bernt Hansen&amp;rsquo;s very detailed Org-mode config&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;stable-core&#34;&gt;Stable Core&lt;/h2&gt;

&lt;p&gt;These are packages and functions that I know to be working as expected, and settings that I use on a daily basis.&lt;/p&gt;

&lt;h3 id=&#34;os-level-variables&#34;&gt;OS Level variables &lt;code&gt;[0/0]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Since I switch between a Linux machine and a Mac frequently, it is better to define variables that can be used to set other variables depending on the OS.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Get current system&#39;s name
(defun insert-system-name()
  (interactive)
  &amp;quot;Get current system&#39;s name&amp;quot;
  (insert (format &amp;quot;%s&amp;quot; system-name))
  )

;; Get current system type
(defun insert-system-type()
  (interactive)
  &amp;quot;Get current system type&amp;quot;
  (insert (format &amp;quot;%s&amp;quot; system-type))
  )

;; Check if system is Darwin/Mac OS X
(defun system-type-is-darwin ()
  (interactive)
  &amp;quot;Return true if system is darwin-based (Mac OS X)&amp;quot;
  (string-equal system-type &amp;quot;darwin&amp;quot;)
  )

;; Check if system is GNU/Linux
(defun system-type-is-gnu ()
  (interactive)
  &amp;quot;Return true if system is GNU/Linux-based&amp;quot;
  (string-equal system-type &amp;quot;gnu/linux&amp;quot;)
  )
(message &amp;quot;Completed OS Level variables load&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;browse-kill-ring&#34;&gt;Browse kill ring&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package browse-kill-ring
  :ensure t
  :defer nil
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;remove-trailing-whitespace-at-the-end-of-lines&#34;&gt;Remove trailing whitespace at the end of lines&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;before-save-hook &#39;delete-trailing-whitespace)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;remove-at-the-start-of-ivy-commands&#34;&gt;Remove &amp;lsquo;^&amp;rsquo; at the start of ivy commands&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq ivy-initial-inputs-alist nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;move-to-the-next-sentence&#34;&gt;Move to the next sentence&lt;/h3&gt;

&lt;p&gt;As mentioned in the reference, by default in Emacs, a double space is set to end a sentence.  This removes that. However, there are tools in scimax to move backwards.
Reference: &lt;a href=&#34;http://pragmaticemacs.com/emacs/move-to-startend-of-line-or-sentence/&#34; target=&#34;_blank&#34;&gt;http://pragmaticemacs.com/emacs/move-to-startend-of-line-or-sentence/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; sentences end with single space
(setq sentence-end-double-space nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;package-installation&#34;&gt;Package installation&lt;/h3&gt;

&lt;h4 id=&#34;package-list&#34;&gt;Package list&lt;/h4&gt;

&lt;p&gt;Though the use-package approach is a lot more elegant, I also like to have a list of all my installed packages. In any case, this is more in line with my earlier configurations. As things evolve, I will probably shift completely to the use-package method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq package-list &#39;(diminish
                     ;; ztree
                     ;; org-gcal
                     w3m
                     ;; org-trello
                     org-web-tools
                     auto-indent-mode
                     ob-sql-mode
                     dash
                     org-super-agenda
		     ;; workgroups2
                     switch-window
                     ess
                     ess-R-data-view
                     ;; interleave
                     deft
                     org-bookmark-heading
                     writeroom-mode
                     ;; evil
                     ;; evil-leader
                     polymode
                     poly-R
                     helm-ag
                     writegood-mode
                     artbollocks-mode
                     multiple-cursors
                     ox-reveal
                     better-defaults
                     jedi jedi-core
                     ag ein
                     ;; ein-mumamo
                     ido-vertical-mode
                     company-jedi
                     conda
                     ;; spacemacs-theme
                     ;; elfeed-goodies
                     helpful
                     browse-kill-ring
                     ivy-yasnippet
                     speed-type
                     clojure-mode
                     cider
                     helm-dash
                     org-projectile
                     bash-completion
                     elmacro
                     helm-org-rifle
                     sx define-word))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;fetch-and-install-missing-packages&#34;&gt;Fetch and install missing packages&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;;fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

;; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;switch-window-configuration&#34;&gt;Switch-window configuration&lt;/h3&gt;

&lt;p&gt;Source link: &lt;a href=&#34;https://github.com/dimitri/switch-window&#34; target=&#34;_blank&#34;&gt;https://github.com/dimitri/switch-window&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package switch-window
  :config
  ;;

  (require &#39;switch-window)

  (global-set-key (kbd &amp;quot;C-x o&amp;quot;) &#39;switch-window)
  (global-set-key (kbd &amp;quot;C-x 1&amp;quot;) &#39;switch-window-then-maximize)
  (global-set-key (kbd &amp;quot;C-x 2&amp;quot;) &#39;switch-window-then-split-below)
  (global-set-key (kbd &amp;quot;C-x 3&amp;quot;) &#39;switch-window-then-split-right)
  (global-set-key (kbd &amp;quot;C-x 0&amp;quot;) &#39;switch-window-then-delete)

  (global-set-key (kbd &amp;quot;C-x 4 d&amp;quot;) &#39;switch-window-then-dired)
  (global-set-key (kbd &amp;quot;C-x 4 f&amp;quot;) &#39;switch-window-then-find-file)
  (global-set-key (kbd &amp;quot;C-x 4 m&amp;quot;) &#39;switch-window-then-compose-mail)
  (global-set-key (kbd &amp;quot;C-x 4 r&amp;quot;) &#39;switch-window-then-find-file-read-only)

  (global-set-key (kbd &amp;quot;C-x 4 C-f&amp;quot;) &#39;switch-window-then-find-file)
  (global-set-key (kbd &amp;quot;C-x 4 C-o&amp;quot;) &#39;switch-window-then-display-buffer)

  (global-set-key (kbd &amp;quot;C-x 4 0&amp;quot;) &#39;switch-window-then-kill-buffer)

  ;; selecting minibuffer
  (setq switch-window-minibuffer-shortcut ?z)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-intermediate-directories-while-saving-files&#34;&gt;Create intermediate directories while saving files&lt;/h3&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://superuser.com/questions/131538/can-i-create-directories-that-dont-exist-while-creating-a-new-file-in-emacs&#34; target=&#34;_blank&#34;&gt;https://superuser.com/questions/131538/can-i-create-directories-that-dont-exist-while-creating-a-new-file-in-emacs&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defadvice find-file (before make-directory-maybe (filename &amp;amp;optional wildcards) activate)
  &amp;quot;Create parent directory if not exists while visiting file.&amp;quot;
  (unless (file-exists-p filename)
    (let ((dir (file-name-directory filename)))
      (unless (file-exists-p dir)
        (make-directory dir)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;shortcuts-and-registers&#34;&gt;Shortcuts and registers&lt;/h3&gt;

&lt;h4 id=&#34;registers&#34;&gt;Registers&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(set-register ?n (cons &#39;file &amp;quot;~/my_org/notes.org&amp;quot;))
(set-register ?l (cons &#39;file &amp;quot;~/application_letters/letter.md&amp;quot;))
(set-register ?k (cons &#39;file &amp;quot;~/application_letters/Cover_letter_Shreyas_R.pdf&amp;quot;))
(set-register ?p (cons &#39;file &amp;quot;~/org_cv/CV_Shreyas_Ragavan.pdf&amp;quot;))
(set-register ?r (cons &#39;file &amp;quot;~/org_cv/CV_Shreyas_Ragavan.org&amp;quot;))
(set-register ?t (cons &#39;file &amp;quot;~/my_org/todo-global.org&amp;quot;))
(set-register ?i (cons &#39;file &amp;quot;~/dotemacs/.emacs.d/new-init.org&amp;quot;))
(set-register ?j (cons &#39;file &amp;quot;~/my_org/mrps_canjs.org&amp;quot;))
(set-register ?f (cons &#39;file &amp;quot;~/scimax/user/sr-cust/&amp;quot;))
(set-register ?d (cons &#39;file &amp;quot;~/my_org/datascience.org&amp;quot;))
(set-register ?m (cons &#39;file &amp;quot;~/my_org/&amp;quot;))
(set-register ?b (cons &#39;file &amp;quot;~/my_org/blog-book.org&amp;quot;))
(set-register ?g (cons &#39;file &amp;quot;~/my_gits/&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;google-this&#34;&gt;Google this&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;M-s g&amp;quot;) &#39;google-this-mode-submap)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;ivy-yasnippet&#34;&gt;ivy-yasnippet&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;M-s i&amp;quot;) &#39;ivy-yasnippet)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;mu4e-related&#34;&gt;Mu4e related&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;M-s u&amp;quot;) &#39;mu4e-update-mail-and-index)
(global-set-key (kbd &amp;quot;M-s m&amp;quot;) &#39;mu4e~headers-jump-to-maildir)
(global-set-key (kbd &amp;quot;C-x m&amp;quot;) &#39;mu4e-compose-new)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-related&#34;&gt;Org related&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;C-x t&amp;quot;) &#39;org-insert-todo-heading)
(global-set-key (kbd &amp;quot;C-c d&amp;quot;) &#39;org-time-stamp)
(global-set-key (kbd &amp;quot;M-s s&amp;quot;) &#39;org-save-all-org-buffers)
;;(global-set-key (kbd &amp;quot;M-s j&amp;quot;) &#39;org-journal-new-entry)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;shortcuts-for-punching-in-and-out&#34;&gt;Shortcuts for punching in and Out&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;C-&amp;lt;f9&amp;gt;&amp;quot;) &#39;sr/punch-in)
(global-set-key (kbd &amp;quot;M-&amp;lt;f9&amp;gt;&amp;quot;) &#39;sr/punch-out)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setting-the-super-and-hyper-key&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Setting the super and hyper Key&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(if system-name-is-darwin
    (progn
      (setq mac-right-command-modifier &#39;hyper)
      (setq mac-right-option-modifier &#39;super)
      )
  )

(if system-name-is-gnu
    (progn
      (setq right-command-)
      )
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;shortcut-for-frog-jump-buffer&#34;&gt;Shortcut for frog-jump-Buffer&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;M-s f&amp;quot;) &#39;frog-jump-buffer)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#+END_SRC&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;frog-jump-buffer
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;yanking-links-in-org-format&#34;&gt;yanking links in org format&lt;/h3&gt;

&lt;p&gt;Source: sacha chua.&lt;/p&gt;

&lt;p&gt;Enables inserting a URL into an org document as &amp;lsquo;[&lt;URL&gt;][link]&amp;rsquo; by tapping F6 after copying the URL. This is useful to reduce clutter with long links, and even include links in headings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun my/yank-more ()
  (interactive)
  (insert &amp;quot;[[&amp;quot;)
  (yank)
  (insert &amp;quot;][link]]&amp;quot;))
(global-set-key (kbd &amp;quot;&amp;lt;f6&amp;gt;&amp;quot;) &#39;my/yank-more)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;export-setup&#34;&gt;Export setup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;ox-org)
(require &#39;ox-word)
(require &#39;ox-md)
(load &amp;quot;~/scimax/ox-ipynb/ox-ipynb.el&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;markdown-config&#34;&gt;Markdown config&lt;/h3&gt;

&lt;p&gt;Setting pandoc as the markdown command for live previews. The default command is &lt;code&gt;markdown&lt;/code&gt;, which could be installed as a separate package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq markdown-command &amp;quot;pandoc&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;slime-and-lisp&#34;&gt;SLIME and lisp&lt;/h3&gt;

&lt;p&gt;Installing the SLIME package&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package slime
  :ensure t
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting the location of the lisp interpreter based on the OS being used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(if (system-type-is-darwin)
    (setq inferior-lisp-program &amp;quot;/usr/local/bin/clisp&amp;quot;)
  )

(if (system-type-is-gnu)
    (setq inferior-lisp-program &amp;quot;/usr/bin/clisp&amp;quot;)
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;expand-region&#34;&gt;Expand region&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:27]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Explore how this works, and customise it.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package expand-region
  :ensure t
  :bind (&amp;quot;C-=&amp;quot; . er/expand-region))

(message &amp;quot;Loaded easier selection&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hippie-expand&#34;&gt;Hippie Expand&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;M-/&amp;quot;) (make-hippie-expand-function
			     &#39;(try-expand-dabbrev-visible
			       try-expand-dabbrev
			       try-expand-dabbrev-all-buffers) t))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;theme-and-visuals&#34;&gt;Theme and visuals&lt;/h3&gt;

&lt;h4 id=&#34;emacsclient-or-frame-specific-settings&#34;&gt;Emacsclient or frame specific settings&lt;/h4&gt;

&lt;p&gt;Since I run emacs as a daemon and call the emacsclient, the background has to be set for new frames. Additionally, I&amp;rsquo;d like the frames to launch full screen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq default-frame-alist
      &#39;(;; (background-color . &amp;quot;whitesmoke&amp;quot;)
        ;; (foreground-color . &amp;quot;black&amp;quot;)
        (fullscreen . maximized)
        ))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;custom-safe-themes-and-background-change-to-light-grey&#34;&gt;Custom Safe themes and Background change to light grey&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq custom-safe-themes t)
(set-background-color &amp;quot;whitesmoke&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;font-customisation-based-on-os&#34;&gt;Font Customisation based on OS&lt;/h4&gt;

&lt;p&gt;The same font is named differently in Antergos (Linux) and in the Mac OS.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; For Linux
(if (system-type-is-gnu)
    (set-face-attribute &#39;default nil :family &amp;quot;ttf-iosevka&amp;quot; :height 130 ))

;; For Mac OS
(if (system-type-is-darwin)
    (set-face-attribute &#39;default nil :family &amp;quot;Iosevka Type&amp;quot; :height 160 ))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;spaceline-modeline-configuration&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Spaceline : modeline configuration&lt;/h4&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://pragmaticemacs.com/emacs/get-that-spacemacs-look-without-spacemacs/&#34; target=&#34;_blank&#34;&gt;http://pragmaticemacs.com/emacs/get-that-spacemacs-look-without-spacemacs/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package spaceline
  :demand t
  :init
  (setq powerline-default-separator &#39;arrow-fade)
  :config
  (disable-theme &#39;smart-mode-line-light)
  (require &#39;spaceline-config)
  (spaceline-emacs-theme)
  (spaceline-toggle-buffer-position-off)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;basic-cosmetics-dot-review-and-convert-to-use-package-style&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Basic cosmetics. Review &amp;amp; Convert to use-package style&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:20]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
These settings have to be cleaned up and the code optimised.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-hide-leading-stars t)
;;(setq org-alphabetical-lists t)
(setq org-src-fontify-natively t)  ;; you want this to activate coloring in blocks
(setq org-src-tab-acts-natively t) ;; you want this to have completion in blocks
(setq org-hide-emphasis-markers t) ;; to hide the *,=, or / markers
(setq org-pretty-entities t)       ;; to have \alpha, \to and others display as utf8 http://orgmode.org/manual/Special-symbols.html

;; Highlighting lines in the agenda, where the cursor is placed.
(add-hook &#39;org-agenda-mode-hook (lambda () (hl-line-mode 1)))

;; Setting up clean indenting below respective headlines at startup. - from the org mode website
(setq org-startup-indented t)

;; ;; use org bullets from emacsist
;; (use-package org-bullets
;;   :ensure t
;;   :init
;;   :config
;;   (add-hook &#39;org-mode-hook (lambda () (org-bullets-mode 1))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;striking-out-done-headlines&#34;&gt;Striking out Done headlines&lt;/h4&gt;

&lt;p&gt;source: Sacha Chua&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-fontify-done-headline t)
(custom-set-faces
 &#39;(org-done ((t (:foreground &amp;quot;DarkGreen&amp;quot;
			     :weight normal
			     :strike-through t))))
 &#39;(org-headline-done
   ((((class color) (min-colors 16) (background dark))
     (:foreground &amp;quot;LightSalmon&amp;quot; :strike-through t)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;formatting-keywords-as-boxes-with-inverted-colors&#34;&gt;Formatting keywords as boxes with inverted colors&lt;/h4&gt;

&lt;p&gt;Source : SO &lt;a href=&#34;https://stackoverflow.com/questions/12707492/add-custom-markers-to-emacs-org-mode&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt; ,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(set-face-attribute &#39;org-todo nil
                    :box &#39;(:line-width 2
                           :color &amp;quot;black&amp;quot;
                           :style released-button)
                    :inverse-video t
                    )
(set-face-attribute &#39;org-done nil
                    :box &#39;(:line-width 2
                           :color &amp;quot;black&amp;quot;
                           :style released-button)
                    :inverse-video t
                    )
(set-face-attribute &#39;org-priority nil
                    :inherit font-lock-keyword-face
                    :inverse-video t
                    :box &#39;(:line-width 2
                           :color &amp;quot;black&amp;quot;
                           :style released-button)
                    )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mu4e&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; mu4e&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 14:53] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The use-package documentation specifies a method to do this via use-package itself, without enclosing the whole snippet within a if clause.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 20:43] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The mu4e config has to be broken down and the send email with htmlize has to be evaluated.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:04] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
As of now, I do not acess my email on different computers via Emacs. The end goal is to setup a mail server via VPS and store my email online, which can then be searched via Emacs and mu4e from any location.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(if (system-type-is-darwin)
    (progn
      (add-to-list &#39;load-path &amp;quot;/usr/local/share/emacs/site-lisp/mu4e&amp;quot;)
      (require &#39;mu4e)
      (require &#39;mu4e-contrib)
      (require &#39;org-mu4e)

      (setq
       mue4e-headers-skip-duplicates  t
       mu4e-view-show-images t
       mu4e-view-show-addresses &#39;t
       mu4e-compose-format-flowed nil
       mu4e-update-interval 200
       message-ignored-cited-headers &#39;nil
       mu4e-date-format &amp;quot;%y/%m/%d&amp;quot;
       mu4e-headers-date-format &amp;quot;%Y/%m/%d&amp;quot;
       mu4e-change-filenames-when-moving t
       mu4e-attachments-dir &amp;quot;~/Downloads/Mail-Attachments/&amp;quot;
       mu4e-maildir (expand-file-name &amp;quot;~/my_mail/fmail&amp;quot;)
       message-citation-line-format &amp;quot;On %Y-%m-%d at %R %Z, %f wrote...&amp;quot;
       )

      ;; mu4e email refiling loations
      (setq
       mu4e-refile-folder &amp;quot;/Archive&amp;quot;
       mu4e-trash-folder  &amp;quot;/Trash&amp;quot;
       mu4e-sent-folder   &amp;quot;/Sent&amp;quot;
       mu4e-drafts-folder &amp;quot;/Drafts&amp;quot;
       )

      ;; setup some handy shortcuts
      (setq mu4e-maildir-shortcuts
            &#39;((&amp;quot;/INBOX&amp;quot;   . ?i)
	      (&amp;quot;/Sent&amp;quot;    . ?s)
	      (&amp;quot;/Archive&amp;quot; . ?a)
	      (&amp;quot;/Trash&amp;quot;   . ?t)))

      ;;store link to message if in header view, not to header query
      (setq org-mu4e-link-query-in-headers-mode nil
            org-mu4e-convert-to-html t) ;; org -&amp;gt; html

      ;; Enabling view in browser for HTML heavy emails that don&#39;t render well
      (add-to-list &#39;mu4e-view-actions
	           &#39;(&amp;quot;ViewInBrowser&amp;quot; . mu4e-action-view-in-browser) t)

      (autoload &#39;mu4e &amp;quot;mu4e&amp;quot; &amp;quot;mu for Emacs.&amp;quot; t)

      ;; Config for sending email
      (setq
       message-send-mail-function &#39;message-send-mail-with-sendmail
       send-mail-function &#39;sendmail-send-it
       message-kill-buffer-on-exit t
       )

      ;; allow for updating mail using &#39;U&#39; in the main view:
      (setq mu4e-get-mail-command  &amp;quot;mbsync -a -q&amp;quot;)

      ;; Don&#39;t keep asking for confirmation for every action
      (defun my-mu4e-mark-execute-all-no-confirm ()
        &amp;quot;Execute all marks without confirmation.&amp;quot;
        (interactive)
        (mu4e-mark-execute-all &#39;no-confirm))
      ;; mapping x to above function
      (define-key mu4e-headers-mode-map &amp;quot;x&amp;quot; #&#39;my-mu4e-mark-execute-all-no-confirm)

      ;; source: http://matt.hackinghistory.ca/2016/11/18/sending-html-mail-with-mu4e/

      ;; this is stolen from John but it didn&#39;t work for me until I
      ;; made those changes to mu4e-compose.el
      (defun htmlize-and-send ()
        &amp;quot;When in an org-mu4e-compose-org-mode message, htmlize and send it.&amp;quot;
        (interactive)
        (when
            (member &#39;org~mu4e-mime-switch-headers-or-body post-command-hook)
          (org-mime-htmlize)
          (org-mu4e-compose-org-mode)
          (mu4e-compose-mode)
          (message-send-and-exit)))

      ;; This overloads the amazing C-c C-c commands in org-mode with one more function
      ;; namely the htmlize-and-send, above.
      (add-hook &#39;org-ctrl-c-ctrl-c-hook &#39;htmlize-and-send t)
      ))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;multiple-cursors&#34;&gt;Multiple Cursors&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package multiple-cursors
  :ensure t
  :config
  (global-set-key (kbd &amp;quot;C-S-c C-S-c&amp;quot;) &#39;mc/edit-lines)
  (global-set-key (kbd &amp;quot;C-&amp;gt;&amp;quot;) &#39;mc/mark-next-like-this)
  (global-set-key (kbd &amp;quot;C-&amp;lt;&amp;quot;) &#39;mc/mark-previous-like-this)
  (global-set-key (kbd &amp;quot;C-c C-&amp;lt;&amp;quot;) &#39;mc/mark-all-like-this)
  )

(message &amp;quot;Loaded MC&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;git-related&#34;&gt;git related&lt;/h3&gt;

&lt;h4 id=&#34;git-gutter&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Git gutter&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:30]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Started using this today. It is actually very convenient to quickly view the changes made in the document. There is a function to pop up the changes at that location. I need to learn more about using this tool effectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package git-gutter
  :ensure t
  :config
  (global-git-gutter-mode &#39;t)
  :diminish git-gutter-mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;magit-settings&#34;&gt;magit settings&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq magit-revert-buffers &#39;silent)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;completed-loading-message&#34;&gt;Completed loading message&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(message &amp;quot;Loaded git related config&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;projectile-behavior&#34;&gt;Projectile behavior&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq projectile-sort-order &#39;recently-active)

;; Change cache file location
(setq projectile-cache-file &amp;quot;~/my_org/emacs_meta/.projectile-cache&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;helm&#34;&gt;Helm&lt;/h3&gt;

&lt;h4 id=&#34;enabling-helm-mode-and-activation-for-basic-functions&#34;&gt;Enabling Helm mode and activation for basic functions&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-05 Fri 11:55] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Adding &lt;code&gt;helm-for-files&lt;/code&gt; as this is not being autoloaded for enabling the hotspot feature in Scimax.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-06 Wed 17:26] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
I tried using Ivy for a period. However, Helm&amp;rsquo;s interface is simply a lot more pleasing and there are actually several additional actions that can be performed via helm itself.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-04 Mon 15:48] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Though I preferred Helm initially for several commands - I realised that scimax has several useful customisations for the ivy and counsel packages. Overall ivy is also lighter than helm and therefore these customisations are being discarded for now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I prefer using Helm for specific functions like M-x, find files and bookmarks and switching buffers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;M-x&amp;quot;) &#39;helm-M-x)
;; Enable fuzzy match for helm-M-x
(setq helm-M-x-fuzzy-match t)

(global-set-key (kbd &amp;quot;C-x C-f&amp;quot;) #&#39;helm-find-files)
(global-set-key (kbd &amp;quot;C-x b&amp;quot;) #&#39;helm-mini)

(require &#39;helm-config)
(require &#39;helm-for-files)
(helm-mode 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;bookmarks-with-helm&#34;&gt;Bookmarks with Helm&lt;/h4&gt;

&lt;p&gt;The default save location in the .emacs folder is not very convenient. I would rather store this with my org files since I commit them Everyday.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq bookmark-default-file &amp;quot;~/my_org/emacs_meta/bookmarks&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default bookmarks list &lt;code&gt;C-x r l&lt;/code&gt; can be accessed using &lt;code&gt;helm-bookmarks&lt;/code&gt;. The location of the file would be a nice addition. Technically, &lt;code&gt;helm-filtered-bookmarks&lt;/code&gt; has almost the same functionality as the list in terms of being able to fuzzy-match a bookmark.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;C-x r b&amp;quot;) #&#39;helm-filtered-bookmarks)
(global-set-key (kbd &amp;quot;C-x r l&amp;quot;) #&#39;helm-bookmarks)
(setq helm-bookmark-show-location t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setting-sources-for-helm&#34;&gt;&lt;span class=&#34;org-todo done STABLE&#34;&gt;STABLE&lt;/span&gt; Setting sources for helm&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-04 Thu 08:08] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Interim issue with bookmarks file becoming corrupted due to a git conflict. The sources work as expected, with helm mini as well as hotspots.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-04-29 Mon 07:43] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
After a package update, setting the sources explicitly is causing issues with helm-mini and with scimax hotspots.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-04 Mon 15:49] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The scimax hotspots can be customised with an improved function that only requires commands locations to be separately defined. This resolved the helm-recentf problem.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 14:55] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This is still causing issues: the recentf list has to be cleared via helm-mini first.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 16:28] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This was needed as it seems helm was not sourcing from recentf file lists. With this source list defined, it provides options to choose from recent files, bookmarks, open buffers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example: setting these sources enables my bookmarks to be available along with my buffers, enabling a jump to either.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq helm-mini-default-sources &#39;(helm-source-buffers-list
                                  helm-source-recentf
                                  helm-source-bookmarks
                                  helm-source-bookmark-set
                                  helm-source-buffer-not-found))

(setq helm-buffers-list-default-sources &#39;(helm-source-buffers-list
                                          helm-source-recentf
                                          helm-source-bookmarks
                                          helm-source-bookmark-set
                                          helm-source-buffer-not-found))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;helm-semantic&#34;&gt;helm-semantic&lt;/h4&gt;

&lt;p&gt;This needs &lt;a href=&#34;#semantic-mode&#34;&gt;Semantic Mode&lt;/a&gt; enabled, and is a really cool function that enables jumping around variables and functions in a script file with fuzzy matching !&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq helm-semantic-fuzzy-match t
      helm-imenu-fuzzy-match t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;persistent-follow-mode-for-helm&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Persistent follow mode for Helm&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 07:46]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to find exactly what this does&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(custom-set-variables
 &#39;(helm-follow-mode-persistent t))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;helm-ag-and-helm-org-rifle-with-refiling-set-to-helm-org-rifle&#34;&gt;&lt;code&gt;helm-ag&lt;/code&gt; and &lt;code&gt;helm-org-rifle&lt;/code&gt;, with refiling set to &lt;code&gt;helm-org-rifle&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package helm-ag
  :ensure t
  :defer nil
  :config
  (require &#39;helm-ag)
)

(use-package helm-org-rifle
  :ensure t
  :defer nil
  :config
  (require &#39;helm-org-rifle)
  (global-set-key (kbd &amp;quot;C-c C-w&amp;quot;) #&#39;helm-org-rifle--refile)
)

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;helm-swoop&#34;&gt;helm-swoop&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 16:53] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This is an awesome find. Helm swoop changes the search pattern depending on the location of the cursor. Therefore, while placed on an org headline, calling helm-swoop will preset the search pattern to have headings. The same is true for source code blocks! Fantastic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://writequit.org/org/#orgheadline92&#34; target=&#34;_blank&#34;&gt;https://writequit.org/org/#orgheadline92&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package helm-swoop
  :ensure t
  :bind ((&amp;quot;M-i&amp;quot; . helm-swoop)
         (&amp;quot;M-I&amp;quot; . helm-swoop-back-to-last-point)
         (&amp;quot;C-c M-i&amp;quot; . helm-multi-swoop))
  :config
  ;; When doing isearch, hand the word over to helm-swoop
  (define-key isearch-mode-map (kbd &amp;quot;M-i&amp;quot;) &#39;helm-swoop-from-isearch)
  ;; From helm-swoop to helm-multi-swoop-all
  (define-key helm-swoop-map (kbd &amp;quot;M-i&amp;quot;) &#39;helm-multi-swoop-all-from-helm-swoop)
  ;; Save buffer when helm-multi-swoop-edit complete
  (setq helm-multi-swoop-edit-save t
        ;; If this value is t, split window inside the current window
        helm-swoop-split-with-multiple-windows t
        ;; Split direcion. &#39;split-window-vertically or &#39;split-window-horizontally
        helm-swoop-split-direction &#39;split-window-vertically
        ;; If nil, you can slightly boost invoke speed in exchange for text color
        helm-swoop-speed-or-color nil))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;helm-loading-completed&#34;&gt;Helm Loading completed&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(message &amp;quot;Loaded Helm customisations&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;org-mode-related&#34;&gt;Org mode related&lt;/h3&gt;

&lt;h4 id=&#34;org-tags-to-be-available-everywhere&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Org tags to be available everywhere&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-complete-tags-always-offer-all-agenda-tags t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;default-org-directory-and-agenda-file-directory&#34;&gt;Default org directory and agenda file directory&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq
 org-directory &amp;quot;~/my_org/&amp;quot;
 org-agenda-files &#39;(&amp;quot;~/my_org/&amp;quot;)
 )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-notes-into-log-drawer&#34;&gt;Org-notes into log drawer&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;ve been inserting org notes into the body of the text, since I do not make extensive use of the log book in the agenda and prefer active time stamped notes and the org-journal and org-projectile to take down &amp;lsquo;linked&amp;rsquo; log notes. However, I would like the notes to be inserted after any properties drawers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-log-state-notes-insert-after-drawers t)
(setq org-log-redeadline &#39;time)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;enabling-org-capture-and-org-protocol&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Enabling org capture and org protocol&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:55]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to actually get org-capture via external browser protocol working. Not sure if I need to require org-capture in scimax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://www.diegoberrocal.com/blog/2015/08/19/org-protocol/&#34; target=&#34;_blank&#34;&gt;http://www.diegoberrocal.com/blog/2015/08/19/org-protocol/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;org-capture)
(require &#39;org-protocol)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;ensuring-archive-files-are-also-in-org-mode&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Ensuring archive files are also in org mode&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:31]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
check whether the add-to-list function is sufficient.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;find-file-hooks
          (lambda ()
            (let ((file (buffer-file-name)))
              (when (and file (equal (file-name-directory file) &amp;quot;~/my_org/archive/&amp;quot;))
                (org-mode)))))

(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.org_archive\\&#39;&amp;quot; . org-mode))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;archiving-mechanics&#34;&gt;Archiving mechanics&lt;/h4&gt;

&lt;p&gt;Archive organised by Top level headings in the original file and with Tag preservation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;
(defun my-org-inherited-no-file-tags ()
  (let ((tags (org-entry-get nil &amp;quot;ALLTAGS&amp;quot; &#39;selective))
        (ltags (org-entry-get nil &amp;quot;TAGS&amp;quot;)))
    (mapc (lambda (tag)
            (setq tags
                  (replace-regexp-in-string (concat tag &amp;quot;:&amp;quot;) &amp;quot;&amp;quot; tags)))
          (append org-file-tags (when ltags (split-string ltags &amp;quot;:&amp;quot; t))))
    (if (string= &amp;quot;:&amp;quot; tags) nil tags)))

(defadvice org-archive-subtree (around my-org-archive-subtree-low-level activate)
  (let ((tags (my-org-inherited-no-file-tags))
        (org-archive-location
         (if (save-excursion (org-back-to-heading)
                             (&amp;gt; (org-outline-level) 1))
             (concat (car (split-string org-archive-location &amp;quot;::&amp;quot;))
                     &amp;quot;::* &amp;quot;
                     (car (org-get-outline-path)))
           org-archive-location)))
    ad-do-it
    (with-current-buffer (find-file-noselect (org-extract-archive-file))
      (save-excursion
        (while (org-up-heading-safe))
        (org-set-tags-to tags)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-wiki&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; org-wiki&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Installation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(let ((url &amp;quot;https://raw.githubusercontent.com/caiorss/org-wiki/master/org-wiki.el&amp;quot;))
      (with-current-buffer (url-retrieve-synchronously url)
    (goto-char (point-min))
    (re-search-forward &amp;quot;^$&amp;quot;)
    (delete-region (point) (point-min))
    (kill-whole-line)
    (package-install-from-buffer)))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Setup&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;org-wiki)
(setq org-wiki-location &amp;quot;~/my_projects/ds-job-search&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;org-id&#34;&gt;org-id&lt;/h4&gt;

&lt;p&gt;Using the org-id for reference to headings ensures that even if the heading changes, the links will still work.&lt;/p&gt;

&lt;p&gt;In addition, I would like an org id to be created every time the capture is used. This facilitates using packages like org-brain which rely extensively on org-id&amp;rsquo;s.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;org-id)
(setq org-id-link-to-org-use-id t)
(org-link-set-parameters &amp;quot;id&amp;quot; :store #&#39;org-id-store-link)
(org-link-set-parameters &amp;quot;nb&amp;quot; :store nil)
;; Update ID file .org-id-locations on startup
;; This adds too much time to startup
;; (org-id-update-id-locations)

(setq org-id-method (quote uuidgen))
(add-hook &#39;org-capture-prepare-finalize-hook &#39;org-id-get-create)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setting-custom-keywords-with-fast-access&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Setting custom keywords with fast access&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 12:19] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This requires a complete reload of org to come in effect.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-todo-keywords
      &#39;((sequence &amp;quot;TODO(t)&amp;quot; &amp;quot;NEXT(n)&amp;quot; &amp;quot;CANCEL(c)&amp;quot; &amp;quot;POSTPONED(p)&amp;quot; &amp;quot;|&amp;quot; &amp;quot;DONE(d)&amp;quot; &amp;quot;STABLE(s)&amp;quot;)
        (sequence &amp;quot;TEST(T)&amp;quot; &amp;quot;BUG(b)&amp;quot; &amp;quot;KNOWNCAUSE(k)&amp;quot; &amp;quot;|&amp;quot; &amp;quot;FIXED(f)&amp;quot;)
        (sequence &amp;quot;|&amp;quot; )))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;refiling-settings&#34;&gt;Refiling settings&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-06 Sat 13:56] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Helm org rifle is mapped to the refile command. See Helm section.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Refile target level for search&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-refile-targets
      &#39;((nil :maxlevel . 4)
        (org-agenda-files :maxlevel . 4)))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  General refile settings&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:33]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Needs further review and optimisation&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-refile-use-outline-path &#39;file)
(setq org-outline-path-complete-in-steps nil)
(setq org-reverse-note-order t)
(setq org-refile-allow-creating-parent-nodes &#39;confirm)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#refiling&#34;&gt;Also refer Refiling hydra&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;agenda-mechanics&#34;&gt;Agenda mechanics&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Weekday starts on Monday&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-agenda-start-on-weekday 1)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Display heading tags farther to the right&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-agenda-tags-column -150)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Agenda customisation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:26]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to clear up the search functions, enabling complete search in journal files. Archive and some external directories are included, since they are explictly in org mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;
(setq org-agenda-custom-commands
      &#39;((&amp;quot;c&amp;quot; &amp;quot;Simple agenda view&amp;quot;
         ((tags &amp;quot;recurr&amp;quot;
        ((org-agenda-overriding-header &amp;quot;Recurring Tasks&amp;quot;)))
          (agenda &amp;quot;&amp;quot;)
          (todo &amp;quot;&amp;quot;)))
        (&amp;quot;o&amp;quot; agenda &amp;quot;Office mode&amp;quot; ((org-agenda-tag-filter-preset &#39;(&amp;quot;-course&amp;quot; &amp;quot;-habit&amp;quot; &amp;quot;-someday&amp;quot; &amp;quot;-book&amp;quot; &amp;quot;-emacs&amp;quot;))))
        (&amp;quot;qc&amp;quot; tags &amp;quot;+commandment&amp;quot;)
    (&amp;quot;e&amp;quot; tags &amp;quot;+org&amp;quot;)
    (&amp;quot;w&amp;quot; agenda &amp;quot;Today&amp;quot; ((org-agenda-tag-filter-preset &#39;(&amp;quot;+work&amp;quot;))))
    (&amp;quot;W&amp;quot; todo-tree &amp;quot;WAITING&amp;quot;)
    (&amp;quot;q&amp;quot; . &amp;quot;Custom queries&amp;quot;) ;; gives label to &amp;quot;q&amp;quot;
    (&amp;quot;d&amp;quot; . &amp;quot;ds related&amp;quot;)     ;; gives label to &amp;quot;d&amp;quot;
    (&amp;quot;ds&amp;quot; agenda &amp;quot;Datascience&amp;quot; ((org-agenda-tag-filter-preset &#39;(&amp;quot;+datascience&amp;quot;))))
    (&amp;quot;qw&amp;quot; agenda &amp;quot;MRPS&amp;quot; ((org-agenda-tag-filter-preset &#39;(&amp;quot;+canjs&amp;quot;))))
    (&amp;quot;qa&amp;quot; &amp;quot;Archive tags search&amp;quot; org-tags-view &amp;quot;&amp;quot;
         ((org-agenda-files (file-expand-wildcards &amp;quot;~/my_org/*.org*&amp;quot;))))
        (&amp;quot;j&amp;quot; &amp;quot;Journal Search&amp;quot; search &amp;quot;&amp;quot;
         &#39;&#39;((org-agenda-text-search-extra-files (file-expand-wildcards &amp;quot;~/my_org/journal/&amp;quot;))))
        (&amp;quot;S&amp;quot; search &amp;quot;&amp;quot;
     ((org-agenda-files &#39;(&amp;quot;~/my_org/&amp;quot;))
      (org-agenda-text-search-extra-files )))
    )
      )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include gpg files in agenda generation&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://emacs.stackexchange.com/questions/36542/include-org-gpg-files-in-org-agenda&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/36542/include-org-gpg-files-in-org-agenda&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; (unless (string-match-p &amp;quot;\\.gpg&amp;quot; org-agenda-file-regexp)
;;   (setq org-agenda-file-regexp
;;         (replace-regexp-in-string &amp;quot;\\\\\\.org&amp;quot; &amp;quot;\\\\.org\\\\(\\\\.gpg\\\\)?&amp;quot;
;;                                   org-agenda-file-regexp)))

(setq org-agenda-file-regexp &amp;quot;\\`\\\([^.].*\\.org\\\|[0-9]\\\{8\\\}\\\(\\.gpg\\\)?\\\)\\&#39;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Expanding search locations&lt;/p&gt;

&lt;p&gt;I initially included my journal location to the agenda search. However it is very slow compared to using grep/rgrep/ag. Therefore, the agenda full text search is now limited to the project directory and the org-brain directory. The snippet below enables searching recursively within folders.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-agenda-text-search-extra-files &#39;(agenda-archives))

(setq org-agenda-text-search-extra-files (apply &#39;append
                        (mapcar
                         (lambda (directory)
                           (directory-files-recursively
                            directory org-agenda-file-regexp))
                         &#39;(&amp;quot;~/my_projects/&amp;quot; &amp;quot;~/my_org/brain/&amp;quot;))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Adding org archive for text search. Optimise this&lt;/dt&gt;
&lt;/dl&gt;

&lt;p&gt;:CREATED:  &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2019-02-07 Thu 08:29&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-agenda-text-search-extra-files &#39;(agenda-archives))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enable default fuzzy search like in google&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-agenda-search-view-always-boolean t)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enable sticky agenda&lt;/p&gt;

&lt;p&gt;Experimenting with this setting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-agenda-sticky t)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt;  org-habit&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 13:20] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Adding a require has brought org-habit back on track.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:50] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Appears the use-package config for org-habit is not correct and there is some issue in downloading it as a package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want to shift the org habit graph in the agenda further out right so as to leave enough room for the headings to be visible.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;org-habit)
(setq org-habit-graph-column 90)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;capture-mechanics&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Capture mechanics&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:24]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
need to clean this up.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Removing timestamp from datetree captures&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-datetree-add-timestamp nil)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Capture templates&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-capture-templates
      &#39;((&amp;quot;t&amp;quot; &amp;quot;Task entry&amp;quot;)
        (&amp;quot;tt&amp;quot; &amp;quot;Todo - Fast&amp;quot; entry (file+headline &amp;quot;~/my_org/todo-global.org&amp;quot; &amp;quot;@Inbox&amp;quot;)
     &amp;quot;** TODO %?&amp;quot;)
        (&amp;quot;tj&amp;quot; &amp;quot;Todo -Job journal&amp;quot; entry (file+olp+datetree &amp;quot;~/my_org/ds-jobs.org&amp;quot; &amp;quot;Job Search Journal&amp;quot;)
     &amp;quot;** TODO %?&amp;quot;)
        (&amp;quot;te&amp;quot; &amp;quot;Todo - Emacs&amp;quot; entry (file+headline &amp;quot;~/my_org/todo-global.org&amp;quot; &amp;quot;@Emacs notes and tasks&amp;quot;)
         &amp;quot;** TODO %?&amp;quot;)
        (&amp;quot;td&amp;quot; &amp;quot;Datascience inbox&amp;quot; entry (file+headline &amp;quot;~/my_org/datascience.org&amp;quot; &amp;quot;@Datascience @Inbox&amp;quot;)
         &amp;quot;** TODO %?&amp;quot;)
    (&amp;quot;tm&amp;quot; &amp;quot;Mail Link Todo&amp;quot; entry (file+headline &amp;quot;~/my_org/todo-global.org&amp;quot; &amp;quot;@Inbox&amp;quot;)
     &amp;quot;** TODO Mail: %a &amp;quot;)
        (&amp;quot;l&amp;quot; &amp;quot;Link/Snippet&amp;quot; entry (file+headline &amp;quot;~/my_org/link_database.org&amp;quot; &amp;quot;.UL Unfiled Links&amp;quot;)
         &amp;quot;** %? %a &amp;quot;)
        (&amp;quot;e&amp;quot; &amp;quot;Protocol info&amp;quot; entry ;; &#39;w&#39; for &#39;org-protocol&#39;
         (file+headline &amp;quot;~/my_org/link_database.org&amp;quot; &amp;quot;.UL Unfiled Links&amp;quot;)
         &amp;quot;*** %a, \n %:initial&amp;quot;)
        (&amp;quot;n&amp;quot; &amp;quot;Notes&amp;quot;)
        (&amp;quot;ne&amp;quot; &amp;quot;Emacs note&amp;quot; entry (file+headline &amp;quot;~/my_org/todo-global.org&amp;quot; &amp;quot;@Emacs notes and tasks&amp;quot;)
         &amp;quot;** %?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;quot;)
        (&amp;quot;nn&amp;quot; &amp;quot;General note&amp;quot; entry (file+headline &amp;quot;~/my_org/notes.org&amp;quot; &amp;quot;@NOTES&amp;quot;)
         &amp;quot;** %?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;quot;)
        (&amp;quot;nd&amp;quot; &amp;quot;Datascience note&amp;quot; entry (file+headline &amp;quot;~/my_org/datascience.org&amp;quot; &amp;quot;@Datascience @Notes&amp;quot;)
         &amp;quot;** %?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;quot;)
        (&amp;quot;g&amp;quot; &amp;quot;BGR stuff&amp;quot;)
        (&amp;quot;gi&amp;quot; &amp;quot;Inventory project&amp;quot;)
        (&amp;quot;gil&amp;quot; &amp;quot;Daily log&amp;quot; entry (file+olp+datetree &amp;quot;~/my_org/bgr.org&amp;quot; &amp;quot;Inventory management Project&amp;quot;) &amp;quot;** %? %i&amp;quot;)
        (&amp;quot;C&amp;quot; &amp;quot;Commandment&amp;quot; entry (file+datetree &amp;quot;~/my_org/lifebook.org&amp;quot; &amp;quot;&amp;quot;)
         &amp;quot;** %? %i :commandment:&amp;quot;)
        (&amp;quot;J&amp;quot; &amp;quot;Job search&amp;quot; entry (file+headline &amp;quot;~/my_org/mrps_canjs.org&amp;quot; &amp;quot;MRPS #CANJS&amp;quot;)
         &amp;quot;** TODO %? %i &amp;quot;)
        (&amp;quot;w&amp;quot; &amp;quot;Website&amp;quot; plain
         (function org-website-clipper)
         &amp;quot;* %a %T\n&amp;quot; :immediate-finish t)
        (&amp;quot;j&amp;quot; &amp;quot;Journal entry&amp;quot; entry (function org-journal-find-location)
         &amp;quot;* %(format-time-string org-journal-time-format) %?&amp;quot;)
        (&amp;quot;i&amp;quot; &amp;quot;Whole article capture&amp;quot; entry
         (file+headline &amp;quot;~/my_org/full_article_archive.org&amp;quot; &amp;quot;&amp;quot; :empty-lines 1)
         &amp;quot;** %a, %T\n %:initial&amp;quot; :empty-lines 1)
        (&amp;quot;c&amp;quot; &amp;quot;Clocking capture&amp;quot;)
        (&amp;quot;ct&amp;quot; &amp;quot;Clock TODO&amp;quot; entry (clock) &amp;quot;** TODO %?&amp;quot;)
        (&amp;quot;cn&amp;quot; &amp;quot;Clock Note&amp;quot; entry (clock) &amp;quot;** %?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;quot;)
        (&amp;quot;r&amp;quot; &amp;quot;Review note&amp;quot; entry (file+weektree &amp;quot;~/my_org/lifebook.org&amp;quot; &amp;quot;#Personal #Reviews&amp;quot;)
         &amp;quot;** %?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;quot;)
         ))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt;  Closing org-capture frame on abort&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-13 Wed 07:35] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This basically ensures a clean exit in case of aborting a capture.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:53]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Needs further review.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://stackoverflow.com/questions/23517372/hook-or-advice-when-aborting-org-capture-before-template-selection&#34; target=&#34;_blank&#34;&gt;http://stackoverflow.com/questions/23517372/hook-or-advice-when-aborting-org-capture-before-template-selection&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defadvice org-capture
    (after make-full-window-frame activate)
  &amp;quot;Advise capture to be the only window when used as a popup&amp;quot;
  (if (equal &amp;quot;emacs-capture&amp;quot; (frame-parameter nil &#39;name))
      (delete-other-windows)))

(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  &amp;quot;Advise capture-finalize to close the frame&amp;quot;
  (if (equal &amp;quot;emacs-capture&amp;quot; (frame-parameter nil &#39;name))))

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Controlling org-capture buffers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-13 Wed 08:01] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This interferes with org-journal&amp;rsquo;s capture format.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I dislike the way org-capture disrupts my current window, and shows me the capture buffer, and the target buffer as well. I would prefer a small pop up window, and then a revert back to the existing windows once the capture is completed or aborted. However this does not seem possible without modifying Org-mode&amp;rsquo;s source code. This is a workaround described at &lt;a href=&#34;https://stackoverflow.com/questions/54192239/open-org-capture-buffer-in-specific-Window&#34; target=&#34;_blank&#34;&gt;https://stackoverflow.com/questions/54192239/open-org-capture-buffer-in-specific-Window&lt;/a&gt; ,which partially resolves the issue by enabling just a single capture buffer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;
(defun my-org-capture-place-template-dont-delete-windows (oldfun args)
  (cl-letf (((symbol-function &#39;delete-other-windows) &#39;ignore))
    (apply oldfun args)))

(with-eval-after-load &amp;quot;org-capture&amp;quot;
  (advice-add &#39;org-capture-place-template :around &#39;my-org-capture-place-template-dont-delete-windows))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;version-control-and-backup-of-files&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; version control and backup of files&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:15]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to check out how this works and whether this is still necessary, since I am using Git.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq delete-old-versions -1)
(setq version-control t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-noter&#34;&gt;org-noter&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Org-noter’s purpose is to let you create notes that are kept in sync when you scroll through the document, but that are external to it - the notes themselves live in an Org-mode file. As such, this leverages the power of Org-mode (the notes may have outlines, latex fragments, babel, etc…) while acting like notes that are made inside the document. Also, taking notes is very simple: just press i and annotate away!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/weirdNox&#34; target=&#34;_blank&#34;&gt;Gonçalo Santos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-noter
  :ensure t
  :defer t
  :config
  (setq org-noter-set-auto-save-last-location t)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-projectile&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; org-projectile&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:42]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
need to optimise further and convert to use-package style. Also need a way to capture Notes from projects, in addition to tasks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting off with the basic configuration posted in org-projectile github repo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-projectile
  :ensure t
  :bind ((&amp;quot;C-c n p&amp;quot; . org-projectile-project-todo-completing-read)
         (&amp;quot;C-c c&amp;quot; . org-capture))
  :config
  (setq org-projectile-projects-file
        &amp;quot;~/my_org/project-tasks.org&amp;quot;)
  ;; (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files))) ;; Not necessary as my task projects are a part of the main org folder
  (push (org-projectile-project-todo-entry) org-capture-templates)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-gcal-customisation&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; org-gcal customisation&lt;/h4&gt;

&lt;h4 id=&#34;property-customisation&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Property customisation&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt;  Optimise CREATED and PLANNED property tags&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:10]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Needs further review and optimisation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using an active date tag on the heading itself makes the org document look ugly, and makes navigation difficult. This is better entered into a property drawer. Two properties should work well - CREATED (inactive date-time tag) and PLANNED (active date-time tag). This will enable me to filter based on property in the future and easily archive older or irrelevant tasks. When the task is shifted or postponed, only the PLANNED property is changed, leaving clear reference of the created date.&lt;/p&gt;

&lt;p&gt;The above is implemented only for tasks with a TODO heading. For now, I want to test using Notes with an inactive date-time tag, which can be individually setup via the capture templates. The attempt is to have a clear separation between tasks and notes.&lt;/p&gt;

&lt;p&gt;This is a modified version of the snippet at &lt;a href=&#34;https://emacs.stackexchange.com/questions/35751/how-to-add-a-created-field-to-any-todo-task&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/35751/how-to-add-a-created-field-to-any-todo-task&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun sr/log-todo-creation-date (&amp;amp;rest ignore)
  &amp;quot;Log TODO creation time in the property drawer under the key &#39;CREATED&#39;.&amp;quot;
  (when (and (org-get-todo-state)
             (not (org-entry-get nil &amp;quot;CREATED&amp;quot;)))
    (org-entry-put nil &amp;quot;CREATED&amp;quot; (format-time-string &amp;quot;[%Y-%m-%d %a]&amp;quot;))
    (org-entry-put nil &amp;quot;PLANNED&amp;quot; (format-time-string (cdr org-time-stamp-formats)))
    ))

(advice-add &#39;org-insert-todo-heading :after #&#39;sr/log-todo-creation-date)
(advice-add &#39;org-insert-todo-heading-respect-content :after #&#39;sr/log-todo-creation-date)
(advice-add &#39;org-insert-todo-subheading :after #&#39;sr/log-todo-creation-date)
(advice-add &#39;org-capture :after #&#39;sr/log-todo-creation-date)
(advice-add &#39;org-projectile-project-todo-completing-read :after #&#39;sr/log-todo-creation-date)

;; (require &#39;org-expiry)
;; ;; Configure it a bit to my liking
;; (setq
;;  org-expiry-created-property-name &amp;quot;CREATED&amp;quot; ; Name of property when an item is created
;;  org-expiry-inactive-timestamps   nil         ; Don&#39;t have everything in the agenda view
;;  )

;; (defun mrb/insert-created-timestamp()
;;   &amp;quot;Insert a CREATED property using org-expiry.el for TODO entries&amp;quot;
;;   (org-expiry-insert-created)
;;   (org-back-to-heading)
;;   (org-end-of-line)
;;   (insert &amp;quot; &amp;quot;)
;;   )

;; ;; Whenever a TODO entry is created, I want a timestamp
;; ;; Advice org-insert-todo-heading to insert a created timestamp using org-expiry
;; (defadvice org-insert-todo-heading (after mrb/created-timestamp-advice activate)
;;   &amp;quot;Insert a CREATED property using org-expiry.el for TODO entries&amp;quot;
;;   (mrb/insert-created-timestamp)
;;   )
;; ;; Make it active
;; (ad-activate &#39;org-insert-todo-heading)

;; (require &#39;org-capture)

;; (defadvice org-capture (after mrb/created-timestamp-advice activate)
;;   &amp;quot;Insert a CREATED property using org-expiry.el for TODO entries&amp;quot;
;;                      ; Test if the captured entry is a TODO, if so insert the created
;;                      ; timestamp property, otherwise ignore
;;   (mrb/insert-created-timestamp))
;; ;;  (when (member (org-get-todo-state) org-todo-keywords-1)
;; ;;    (mrb/insert-created-timestamp)))
;;   (ad-activate &#39;org-capture)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enabling adding tags in the capture window&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Add feature to allow easy adding of tags in a capture window
(defun mrb/add-tags-in-capture()
  (interactive)
  &amp;quot;Insert tags in a capture window without losing the point&amp;quot;
  (save-excursion
    (org-back-to-heading)
    (org-set-tags)))
;; Bind this to a reasonable key
(define-key org-capture-mode-map &amp;quot;\C-c\C-t&amp;quot; &#39;mrb/add-tags-in-capture)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;org-web-clipper&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; org web clipper&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:11]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
This works fine now. However, it would be nice to find a way to strip the headers and menu columns and other unnecessary information before capture.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://www.bobnewell.net/publish/35years/webclipper.html&#34; target=&#34;_blank&#34;&gt;http://www.bobnewell.net/publish/35years/webclipper.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; org-eww and org-w3m should be in your org distribution, but see
;; note below on patch level of org-eww.
(require &#39;org-eww)
(require &#39;org-w3m)
(defvar org-website-page-archive-file &amp;quot;~/my_org/full_article_archive.org&amp;quot;)
(defun org-website-clipper ()
  &amp;quot;When capturing a website page, go to the right place in capture file,
   but do sneaky things. Because it&#39;s a w3m or eww page, we go
   ahead and insert the fixed-up page content, as I don&#39;t see a
   good way to do that from an org-capture template alone. Requires
   Emacs 25 and the 2017-02-12 or later patched version of org-eww.el.&amp;quot;
  (interactive)

  ;; Check for acceptable major mode (w3m or eww) and set up a couple of
  ;; browser specific values. Error if unknown mode.

  (cond
   ((eq major-mode &#39;w3m-mode)
    (org-w3m-copy-for-org-mode))
   ((eq major-mode &#39;eww-mode)
    (org-eww-copy-for-org-mode))
   (t
    (error &amp;quot;Not valid -- must be in w3m or eww mode&amp;quot;)))

  ;; Check if we have a full path to the archive file.
  ;; Create any missing directories.

  (unless (file-exists-p org-website-page-archive-file)
    (let ((dir (file-name-directory org-website-page-archive-file)))
      (unless (file-exists-p dir)
        (make-directory dir))))

  ;; Open the archive file and yank in the content.
  ;; Headers are fixed up later by org-capture.

  (find-file org-website-page-archive-file)
  (goto-char (point-max))
  ;; Leave a blank line for org-capture to fill in
  ;; with a timestamp, URL, etc.
  (insert &amp;quot;\n\n&amp;quot;)
  ;; Insert the web content but keep our place.
  (save-excursion (yank))
  ;; Don&#39;t keep the page info on the kill ring.
  ;; Also fix the yank pointer.
  (setq kill-ring (cdr kill-ring))
  (setq kill-ring-yank-pointer kill-ring)
  ;; Final repositioning.
  (forward-line -1)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-babel&#34;&gt;Org-babel&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Loading language base&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(org-babel-do-load-languages
 &#39;org-babel-load-languages
 &#39;((clojure . t)
   (scheme . t)
   (sqlite . t)
   (R . t)
   (lisp . t)
   (sql .  t)
   ;(jupyter . t)
   )
 )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clojure and cider&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;cider)
(setq org-babel-clojure-backend &#39;cider)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;org-trello&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Org-trello&lt;/h4&gt;

&lt;h4 id=&#34;clock-customisation&#34;&gt;Clock Customisation&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Continuous clocking + punch in/out approach&lt;/p&gt;

&lt;p&gt;This approach and code snippets are adapted (and shamelessly borrowed) from &lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Bernt Hansen&amp;rsquo;s approach&lt;/a&gt;. While Bernt follows a complex approach of clocking into parent tasks - my current workflow favors clocking in directly to set clocking headlines within projects, which are placed in my org-projectile todo task file.&lt;/p&gt;

&lt;p&gt;I have a default continuous clock after punching in (defined by org-id) which will cater to general re-organisation, including capturing notes, refiling , email etc. Other tasks or even mini projects can be directly clocked into when required. These mini-projets are often just located within my org-agenda files and not as a separate git repositoy. Every time I am on my computer, whether on Emacs or not, I would like the automatic clock to capture time, unless it is being clocked to a specific project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Defining default Task&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defvar sr/organization-task-id &amp;quot;a8712a47-a648-477f-bdbf-d6004a0cc70b&amp;quot;)

(defun sr/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find sr/organization-task-id &#39;marker)
    (org-clock-in &#39;(16))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Punch in&lt;/p&gt;

&lt;p&gt;Bernt Hansen shares that he has a default punch in and punch out task that keeps the clock on all day. I think this will work for me as well. Other than work and projects, most of the time I am tinkering with Emacs, or writing a journal note or trying to re-organise my stuff. By using a punch in and out, I can track how much time I am engaged with a computer, other than specific projects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun sr/punch-in (arg)
    (interactive &amp;quot;p&amp;quot;)
  (setq sr/keep-clock-running t)
  (sr/clock-in-organization-task-as-default))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Punch Out&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun sr/punch-out ()
  (interactive)
  (setq sr/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Advising clock Out&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun sr/clock-out-maybe ()
  (when (and sr/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (sr/clock-in-organization-task-as-default)))

(add-hook &#39;org-clock-out-hook &#39;sr/clock-out-maybe &#39;append)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt;  org-mru-clock&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-14 Thu 10:16] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Issue is with the org-mru-select-recent-task command - it doesn&amp;rsquo;t jump to the specified task and always pesudo messes up the format of the headings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a handy package to quickly select past tasks which have been clocked in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-mru-clock
  :ensure t
  :bind ((&amp;quot;M-s 1&amp;quot; . org-mru-clock-in)
          (&amp;quot;C-c C-x C-j&amp;quot; . org-mru-clock-select-recent-task))
  :init
  (setq org-mru-clock-how-many 100
        org-mru-clock-completing-read #&#39;ivy-completing-read))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do not log or consider 0 Clocks&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-clock-out-remove-zero-time-clocks t)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;set idle timer for clocked task&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; setting idle timer to 15 minutes
(setq org-clock-idle-time 15)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Show clocked task history and enable re-clocking&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://writequit.org/denver-emacs/presentations/2017-04-11-time-clocking-with-org.html&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This should enable me to quickly clock back into specific tasks.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Show lot of clocking history so it&#39;s easy to pick items off the `C-c I` list
(setq org-clock-history-length 23)

(defun eos/org-clock-in ()
  (interactive)
  (org-clock-in &#39;(4)))

(global-set-key (kbd &amp;quot;C-c I&amp;quot;) #&#39;eos/org-clock-in)
(global-set-key (kbd &amp;quot;C-c O&amp;quot;) #&#39;org-clock-out)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;org-brain&#34;&gt;Org-Brain &lt;code&gt;[&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;]&lt;/code&gt;&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;org-brain implements a variant of concept mapping in Emacs, using org-mode.&lt;/p&gt;

&lt;p&gt;You can think of org-brain as a combination of a wiki and a mind map, where each wiki page / mind map node is an org-mode file which resides in your org-brain-path, or a headline with an ID property in one of those files. These are called entries. Entries can be linked together, and you can then view the network of links as a mind map, using M-x org-brain-visualize&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Kungsgeten/org-brain&#34; target=&#34;_blank&#34;&gt;org-brain on github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo done STABLE&#34;&gt;STABLE&lt;/span&gt;  Basic setup along with org-id&lt;/p&gt;

&lt;p&gt;Since org-brain requires the org id for a heading to be recognized and displayed, it is convenient to have capture and refile mechanisms that create the org-id if the heading does not have it.&lt;/p&gt;

&lt;p&gt;Further streamlining is necessary as such.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-brain
  :ensure t
  :init
  (setq org-brain-path &amp;quot;~/my_org/brain/&amp;quot;)
  ;; ;; For Evil users
  ;; (with-eval-after-load &#39;evil
  ;;   (evil-set-initial-state &#39;org-brain-visualize-mode &#39;emacs))
  :config
  (setq org-id-track-globally t)
  (setq org-id-locations-file &amp;quot;~/my_org/emacs_meta/.org-id-locations&amp;quot;)
  (push &#39;(&amp;quot;b&amp;quot; &amp;quot;Brain&amp;quot; plain (function org-brain-goto-end)
          &amp;quot;* %i%?\n:PROPERTIES:\n:CREATED: [%&amp;lt;%Y-%m-%d %a %H:%M&amp;gt;]\n:END:&amp;quot; :empty-lines 1)
        org-capture-templates)
  (setq org-brain-visualize-default-choices &#39;all)
  (setq org-brain-title-max-length 12)
  (add-hook &#39;org-brain-refile &#39;org-id-get-create)
  (global-set-key (kbd &amp;quot;M-s v&amp;quot;) #&#39;org-brain-visualize)
  )

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;org-journal&#34;&gt;Org journal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Base config&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-journal
  :ensure t
  :defer t
  :custom
  (org-journal-dir &amp;quot;~/my_org/journal/&amp;quot;)
  (org-journal-file-format &amp;quot;%Y%m%d&amp;quot;)
  (org-journal-enable-agenda-integration t)
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;setting org-capture template for Journal&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun org-journal-find-location ()
  ;; Open today&#39;s journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  ;; Position point on the journal&#39;s top-level heading so that org-capture
  ;; will add the new entry as a child entry.
  (goto-char (point-min)))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Figure out easy encryption approach for org journal&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;org-sticky-header&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Org sticky Header &lt;code&gt;[0/1]&lt;/code&gt;&lt;/h4&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Explore further options : example full path or customised path to be shown&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This package displays in the header-line the Org heading for the node that’s at the top of the window. This way, if the heading for the text at the top of the window is beyond the top of the window, you don’t forget which heading the text belongs to. The display can be customized to show just the heading, the full outline path, or the full outline path in reverse.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/alphapapa/org-sticky-header/blob/master/README.org&#34; target=&#34;_blank&#34;&gt;org-sticky-header&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is especially useful for free form longer Documentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-sticky-header
  :ensure t
  :config
  (org-sticky-header-mode)
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-wild-notifier&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Org wild Notifier&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-28 Thu 13:48] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This seems to be able to do exactly what I am looking for. However there are unexplained errors while starting up the package.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-wild-notifier
  :ensure t
  :custom
  (require &#39;org-wild-notifier)
  (org-wild-notifier-mode)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-to-rst-exporter&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Org to RST Exporter&lt;/h4&gt;

&lt;p&gt;It is useful to be able to export to the RST format to develop documentation for projects and host with the sphinx or readthedocs platform.&lt;/p&gt;

&lt;p&gt;This platform is actually pleasant to browse through documentation and has good search facilities as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ox-rst
  :ensure t
  :defer t
  :config
  (require &#39;ox-rst)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-to-slack-exporter&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Org to Slack exporter&lt;/h4&gt;

&lt;p&gt;This should prove handy as I write almost all my responses within Org mode and copy this into Slack.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ox-slack
  :ensure t
  :defer
  :config
  (require &#39;ox-slack)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;ox-pandoc&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; ox-pandoc&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ox-pandoc
  :ensure t
  :defer
  :config
  (require &#39;ox-pandoc)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setting-the-columns-for-the-column-view&#34;&gt;Setting the columns for the column view&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-columns-default-format &amp;quot;%50ITEM %TODO %3PRIORITY %10TAGS %17Effort(Estimated Effort){:} %12CLOCKSUM&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-sidebar&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; org-sidebar&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-sidebar
  :ensure t
  :defer nil
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;stable-extras&#34;&gt;Stable Extras&lt;/h2&gt;

&lt;p&gt;These are packages and code snippets that I know to be working fine. Some still have rough edges and these are marked test. However not having these will not break my experience. Over time, some of these may make it to the core stable group.&lt;/p&gt;

&lt;h3 id=&#34;time-machine-for-git&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Time machine for git&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-08 Fri 13:21] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Launched by &lt;code&gt;M-x git-timemachine&lt;/code&gt;, this lets you navigate through the commit history with a single key press! This is especially awesome for tracking changes to a particular snippet of code.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 09:30]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to evaluate this. The purpose is for stepping through the history of a file recorded in git. This should be very interesting.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package git-timemachine
  :ensure t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;loading-external-packages&#34;&gt;Loading External Packages&lt;/h3&gt;

&lt;p&gt;Loading external packages:  there are some packages which are not avaialble on MELPA and have to be loaded via cloning their git Repositories. This is especially relevant to new packages.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(let ((default-directory  &amp;quot;~/scimax/user/external_packages/&amp;quot;))
  (normal-top-level-add-subdirs-to-load-path))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;memento-mori&#34;&gt;memento mori&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-15 Mon 09:37] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This package requires the birthdate to be specified, therefore it is included in the encrypted section of my personal config. A sample configuration is provided for reference.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a cool little package that displays your age with double decimal digits. A good reminder to get productive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package memento-mori
  :ensure t
  :defer nil
  :config
  (setq memento-mori-birth-date &amp;quot;2018-12-31&amp;quot;)
  (memento-mori-mode 1)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#+END_SRC&lt;/p&gt;

&lt;h3 id=&#34;treemacs-setup&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Treemacs Setup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load &#39;winum
    (define-key winum-keymap (kbd &amp;quot;M-0&amp;quot;) #&#39;treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs
          (if (executable-find &amp;quot;python3&amp;quot;) 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              &amp;quot;&amp;quot;
          treemacs-goto-tag-strategy             &#39;refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            &amp;quot; &amp;quot;
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          ttreemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  &amp;quot;~/my_org/emacs_meta/.treemacs-persist&amp;quot;
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   &#39;always
          treemacs-recenter-after-project-expand &#39;on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       &#39;alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    ;;(treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find &amp;quot;git&amp;quot;)))
                 (not (null (executable-find &amp;quot;python3&amp;quot;))))
      (`(t . t)
       (treemacs-git-mode &#39;deferred))
      (`(t . _)
       (treemacs-git-mode &#39;simple))))
  :bind
  (:map global-map
        (&amp;quot;M-0&amp;quot;       . treemacs-select-window)
        (&amp;quot;M-s t t&amp;quot; . treemacs)
        (&amp;quot;M-s t w&amp;quot; . treemacs-switch-workspace)
        ;; (&amp;quot;C-x t 1&amp;quot;   . treemacs-delete-other-windows)
        ;; (&amp;quot;C-x t t&amp;quot;   . treemacs)
        ;; (&amp;quot;C-x t B&amp;quot;   . treemacs-bookmark)
        ;; (&amp;quot;C-x t C-t&amp;quot; . treemacs-find-file)
        ;; (&amp;quot;C-x t M-t&amp;quot; . treemacs-find-tag)
        )
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; (use-package treemacs-evil
;;   :after treemacs evil
;;   :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scimax-customisations&#34;&gt;Scimax customisations&lt;/h3&gt;

&lt;p&gt;These are settings which custmise scimax specific variables. These are separated out here so that it becomes easier to try out Emacs configurations that are outside scimax.&lt;/p&gt;

&lt;h4 id=&#34;redefining-scimax-apps&#34;&gt;Redefining scimax-apps&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt;  explorer&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun explorer (&amp;amp;optional path)
  &amp;quot;Open Finder or Windows Explorer in the current directory.&amp;quot;
  (interactive (list (if (buffer-file-name)
             (file-name-directory (buffer-file-name))
               (expand-file-name default-directory))))
  (cond
   ((string= system-type &amp;quot;gnu/linux&amp;quot;)
    (shell-command &amp;quot;nautilus&amp;quot;))
   ((string= system-type &amp;quot;darwin&amp;quot;)
    (shell-command (format &amp;quot;open -b com.apple.finder%s&amp;quot;
               (if path (format &amp;quot; \&amp;quot;%s\&amp;quot;&amp;quot;
                        (file-name-directory
                         (expand-file-name path))) &amp;quot;&amp;quot;))))
   ((string= system-type &amp;quot;windows-nt&amp;quot;)
    (shell-command (format &amp;quot;explorer %s&amp;quot;
               (replace-regexp-in-string
                &amp;quot;/&amp;quot; &amp;quot;\\\\&amp;quot;
                path))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;bash&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; (defun sr/bash (args) ...)

(defun sr/bash (&amp;amp;optional path)
  &amp;quot;Open a bash window.
PATH is optional, and defaults to the current directory.
commands (`scimax-user-bash-app&#39;)
&amp;quot;
  (interactive (list (if (buffer-file-name)
             (file-name-directory (buffer-file-name))
               (expand-file-name default-directory))))
  (cond
   ((string= system-type &amp;quot;gnu/linux&amp;quot;)
    (shell-command &amp;quot;xfce4-terminal&amp;quot;))
   ((string= system-type &amp;quot;darwin&amp;quot;)
    (shell-command
     (format &amp;quot;open -b com.apple.iterm2&amp;quot;
         (if path (format &amp;quot; \&amp;quot;%s\&amp;quot;&amp;quot; (expand-file-name path)) &amp;quot;&amp;quot;))))
   ((string= system-type &amp;quot;windows-nt&amp;quot;)
    (shell-command &amp;quot;start \&amp;quot;\&amp;quot; \&amp;quot;%SYSTEMDRIVE%\\Program Files\\Git\\bin\\bash.exe\&amp;quot; --login &amp;amp;&amp;quot;))))

(advice-add &#39;bash :override #&#39;sr/bash)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(advice-remove &#39;bash #&#39;scimax-user-bash-app)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;scimax-autoformat-and-corrections&#34;&gt;Scimax autoformat and corrections&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-07 Thu 16:24] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Changing keyboard shortcut for equation insertion as this interferes with i3wm functioning.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: any expansion can be undone with C-/&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lips&#34;&gt;(add-hook &#39;org-mode-hook &#39;scimax-autoformat-mode)
(scimax-toggle-abbrevs &#39;scimax-month-abbreviations +1)
(scimax-toggle-abbrevs &#39;scimax-transposition-abbreviations +1)
(scimax-toggle-abbrevs &#39;scimax-misc-abbreviations nil)
(scimax-toggle-abbrevs &#39;scimax-weekday-abbreviations +1)
(global-set-key (kbd &amp;quot;s-q&amp;quot;) &#39;org-latex-math-region-or-point)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;scimax-hotspots&#34;&gt;Scimax Hotspots&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq scimax-user-hotspot-commands
      &#39;((&amp;quot;Agenda All&amp;quot; . (lambda () (org-agenda &amp;quot;&amp;quot; &amp;quot;a&amp;quot;)))
        (&amp;quot;Agenda Office&amp;quot; . (lambda () (org-agenda &amp;quot;&amp;quot; &amp;quot;o&amp;quot;)))
	(&amp;quot;Mail&amp;quot; . (lambda ()
                    (if (get-buffer &amp;quot;*mu4e-headers*&amp;quot;)
                        (progn
                          (switch-to-buffer &amp;quot;*mu4e-headers*&amp;quot;)
                          (delete-other-windows))
                      (mu4e))))
        (&amp;quot;Bookmarks&amp;quot; . (lambda () (helm-source-bookmarks)))
        (&amp;quot;Reload custom config - org babel&amp;quot; . (lambda () (org-babel-load-file (expand-file-name &amp;quot;sr-config.org&amp;quot; user-emacs-directory))))
        )
      )

(setq scimax-user-hotspot-locations
      &#39;(
        (&amp;quot;CV Org&amp;quot; . &amp;quot;~/org_cv/CV_Shreyas_Ragavan.org&amp;quot;)
        (&amp;quot;tmrs&amp;quot;  .  &amp;quot;~/my_org/tmsr.org&amp;quot;)
        (&amp;quot;scd - scimax dir&amp;quot; . &amp;quot;~/scimax/&amp;quot; )
        (&amp;quot;scu - scimax user dir&amp;quot; . &amp;quot;~/scimax/user/&amp;quot;)
        ( &amp;quot;sco - scimax org conf&amp;quot; . &amp;quot;~/scimax/user/sr-config.org&amp;quot;)
        (&amp;quot;blog&amp;quot; . &amp;quot;~/my_org/blog-book.org&amp;quot;)
	(&amp;quot;github&amp;quot; . &amp;quot;~/my_gits/&amp;quot;)
        (&amp;quot;project&amp;quot; . &amp;quot;~/my_projects/&amp;quot;)
        (&amp;quot;cheatsheet&amp;quot; . &amp;quot;~/my_projects/ds_cheatsheets/&amp;quot;)
        (&amp;quot;passwords&amp;quot; . &amp;quot;~/my_org/secrets.org.gpg&amp;quot;)
        (&amp;quot;references&amp;quot; . &amp;quot;~/Dropbox/bibliography/references.bib&amp;quot;)
        )
      )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;scimax-elfeed&#34;&gt;Scimax Elfeed&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;scimax-elfeed)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;scimax-notebook-directory&#34;&gt;Scimax Notebook directory&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq nb-notebook-directory &amp;quot;~/my_projects/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;scimax-notebook&#34;&gt;Scimax notebook&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;M-s n&amp;quot;) &#39;nb-open)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;changing-key-for-scimax-body&#34;&gt;Changing key for scimax/body&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;C-\\&amp;quot;) &#39;scimax/body)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;scimax-python&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Scimax Python&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;scimax-org-babel-python)
(require &#39;ob-ipython)
(require &#39;scimax-ob)
(require &#39;scimax-org-babel-ipython-upstream)
(setq ob-ipython-exception-results nil)
(scimax-ob-ipython-turn-on-eldoc)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;message-loaded-scimax-customisations&#34;&gt;Message : loaded scimax Customisations&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(message &amp;quot;Loaded scimax customisations&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;swiper&#34;&gt;Swiper&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-09-24 Tue 10:31] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Swiper and below keybinding is included by default in scimax.&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 16:50] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
I use swiper for a general search. However &lt;a href=&#34;#helm-swoop&#34;&gt;helm-swoop&lt;/a&gt; is awesome.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &amp;quot;C-s&amp;quot;) &#39;swiper)
(setq ivy-display-style &#39;fancy)

;; advise swiper to recenter on exit
(defun bjm-swiper-recenter (&amp;amp;rest args)
  &amp;quot;recenter display after swiper&amp;quot;
  (recenter)
  )
(advice-add &#39;swiper :after #&#39;bjm-swiper-recenter)

(message &amp;quot;Loaded Swiper customisation&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;writeroom-customisations&#34;&gt;Writeroom customisations&lt;/h3&gt;

&lt;p&gt;The goal is to enable a customised zen writing mode, especially facilitating blog posts and other longer forms of writing. As of now, there are customisations for the width, and calling the art-bollocks mode when writeroom mode is enabled.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(with-eval-after-load &#39;writeroom-mode
  (define-key writeroom-mode-map (kbd &amp;quot;C-s-,&amp;quot;) #&#39;writeroom-decrease-width)
  (define-key writeroom-mode-map (kbd &amp;quot;C-s-.&amp;quot;) #&#39;writeroom-increase-width)
  (define-key writeroom-mode-map (kbd &amp;quot;C-s-=&amp;quot;) #&#39;writeroom-adjust-width))

(advice-add &#39;text-scale-adjust :after
	    #&#39;visual-fill-column-adjust)

;;  loading artbollocks whenever the writeroom mode is called in particular.
(autoload &#39;artbollocks-mode &amp;quot;artbollocks-mode&amp;quot;)
(add-hook &#39;writeroom-mode-hook &#39;artbollocks-mode)

(message &amp;quot;Loaded writeroom customisations&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ess-configuration&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; ESS configuration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-19 Tue 10:14] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Using the tabviewer application for Antergos.&lt;a href=&#34;https://bbs.archlinux.org/viewtopic.php?id=156295&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-09 Sat 12:36] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Set this up with use-package and explore further customisations. As of now, I use yasnippet to insert commonly used operators like the assign and pipe operators.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note:  I use the TAD application to view CSV files. It is a cross platform application that is a lot faster than launching a spreadsheet based program.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ess
  :ensure t
  :config
  (require &#39;ess)
  (use-package ess-R-data-view)
  (use-package polymode)
  (setq ess-describe-at-point-method nil)
  (setq ess-switch-to-end-of-proc-buffer t)
  (setq ess-rutils-keys +1)
  (setq ess-eval-visibly &#39;nil)
  (setq ess-use-flymake +1)
  (setq ess-use-company t)
  (setq ess-history-file &amp;quot;~/.Rhistory&amp;quot;)
  (setq ess-use-ido t)
  (setq ess-roxy-hide-show-p t)
  ;;(speedbar-add-supported-extension &amp;quot;.R&amp;quot;)
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)
  )

;; The following chunk is taken from: https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Blang/ess/packages.el
;;; Follow Hadley Wickham&#39;s R style guide
(setq ess-first-continued-statement-offset 2
      ess-continued-statement-offset 0
      ess-expression-offset 2
      ess-nuke-trailing-whitespace-p t
      ess-default-style &#39;DEFAULT)


;; Adding Poly-R package

(use-package poly-R
  :ensure t
  )
;; The following chunk is taken from antonio&#39;s answer from https://stackoverflow.com/questions/16172345/how-can-i-use-emacs-ess-mode-with-r-markdown
(defun rmd-mode ()
  &amp;quot;ESS Markdown mode for rmd files.&amp;quot;
  (interactive)
  (require &#39;poly-R)
  (require &#39;poly-markdown)
  (poly-markdown+r-mode))

(use-package ess-view
  :ensure t
  :config
  (require &#39;ess-view)
  (if (system-type-is-darwin)
      (setq ess-view--spreadsheet-program
            &amp;quot;/Applications/Tad.app/Contents/MacOS/Tad&amp;quot;
            )
    )
  (if (system-type-is-gnu)
      (setq ess-view--spreadsheet-program
            &amp;quot;tad&amp;quot;
            )
    )
  )

;; This is taken and slightly modified from the ESS manual
;; The display config is similar to that of Rstudio

(setq display-buffer-alist
      `((&amp;quot;*R Dired&amp;quot;
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (slot . -1)
         (window-width . 0.33)
         (reusable-frames . nil))
        (&amp;quot;*R&amp;quot;
         (display-buffer-reuse-window display-buffer-at-bottom)
         (window-width . 0.35)
         (reusable-frames . nil))
        (&amp;quot;*Help&amp;quot;
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (slot . 1)
         (window-width . 0.33)
         (reusable-frames . nil))))

(message &amp;quot;Loaded ESS configuration&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ox-reveal-presentations&#34;&gt;ox-reveal - presentations&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ox-reveal
  :ensure ox-reveal
  :defer nil
  :config
  (setq org-reveal-root &amp;quot;http://cdn.jsdelivr.net/reveal.js/3.0.0/&amp;quot;)
  (setq org-reveal-mathjax t)
  )

(use-package htmlize
  :ensure t)

(message &amp;quot;Loaded ox-reveal cust&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;deft&#34;&gt;Deft&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Deft is an Emacs mode for quickly browsing, filtering, and editing directories of plain text notes, inspired by Notational Velocity. It was designed for increased productivity when writing and taking notes by making it fast and simple to find the right file at the right time and by automating many of the usual tasks such as creating new files and saving files.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jblevins.org/projects/deft/&#34; target=&#34;_blank&#34;&gt;Deft project&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package deft
  :bind (&amp;quot;&amp;lt;f8&amp;gt; d&amp;quot; . deft)
  :commands (deft)
  :config (setq deft-directory &amp;quot;~/my_org/brain/&amp;quot;
                deft-extensions &#39;(&amp;quot;md&amp;quot; &amp;quot;org&amp;quot; &amp;quot;txt&amp;quot;)
                deft-recursive t
                ))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;w3m-customisation&#34;&gt;w3m customisation&lt;/h3&gt;

&lt;p&gt;w3m is a suprisingly able browser that is able to cater to most websites, except those that are a little too rich with java and etc. Being within Emacs, and launching almost instantly with significantly less overhead in terms of RAM no matter how many tabs are open - it is also easy to customise the behavior as needed and is an excellent method of distraction free browsing.&lt;/p&gt;

&lt;p&gt;However, it pays to have handy shortcuts to open a link in the default browser of the OS. This is especially to cater to heavier websites. The w3m package would need to be installed using the package manager of the OS to use w3m.&lt;/p&gt;

&lt;p&gt;A few snippets were sourced from: &lt;a href=&#34;http://beatofthegeek.com/2014/02/my-setup-for-using-emacs-as-web-browser.html&#34; target=&#34;_blank&#34;&gt;http://beatofthegeek.com/2014/02/my-setup-for-using-emacs-as-web-browser.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;setting-default-browser-to-be-w3m&#34;&gt;Setting default browser to be w3m&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;;(setq browse-url-browser-function &#39;browse-url-default-browser)
(setq browse-url-browser-function &#39;w3m-goto-url-new-session)
(setq w3m-default-display-inline-images t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;appending-http-to-web-addresses-entered-by-hand&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Appending HTTP to web addresses entered by hand&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 07:40]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Check whether this is necessary&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;;when I want to enter the web address all by hand
(defun w3m-open-site (site)
  &amp;quot;Opens site in new w3m session with &#39;http://&#39; appended&amp;quot;
  (interactive
   (list (read-string &amp;quot;Enter website address(default: w3m-home):&amp;quot; nil nil w3m-home-page nil )))
  (w3m-goto-url-new-session
   (concat &amp;quot;http://&amp;quot; site)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;changing-w3m-shortcuts-for-better-tabbed-browsing&#34;&gt;Changing w3m shortcuts for better tabbed browsing&lt;/h4&gt;

&lt;p&gt;Source:  Sacha Chua : &lt;a href=&#34;http://sachachua.com/blog/2008/09/emacs-and-w3m-making-tabbed-browsing-easier/&#34; target=&#34;_blank&#34;&gt;http://sachachua.com/blog/2008/09/emacs-and-w3m-making-tabbed-browsing-easier/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(eval-after-load &#39;w3m
  &#39;(progn
     (define-key w3m-mode-map &amp;quot;q&amp;quot; &#39;w3m-previous-buffer)
     (define-key w3m-mode-map &amp;quot;w&amp;quot; &#39;w3m-next-buffer)
     (define-key w3m-mode-map &amp;quot;x&amp;quot; &#39;w3m-close-window)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;default-external-browser-settings&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Default external browser settings&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 07:37]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to have this change depending whether the OS is Linux or Mac OS&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun wicked/w3m-open-current-page-in-default-browser ()
  &amp;quot;Open the current URL in Mozilla Firefox.&amp;quot;
  (interactive)
  (browse-url-default-browser w3m-current-url)) ;; (1)

(defun wicked/w3m-open-link-or-image-in-default-browser ()
  &amp;quot;Open the current link or image in Firefox.&amp;quot;
  (interactive)
  (browse-url-default-browser (or (w3m-anchor) ;; (2)
                                         (w3m-image)))) ;; (3)

(eval-after-load &#39;w3m
  &#39;(progn
     (define-key w3m-mode-map &amp;quot;o&amp;quot; &#39;wicked/w3m-open-current-page-in-default-browser)
     (define-key w3m-mode-map &amp;quot;O&amp;quot; &#39;wicked/w3m-open-link-or-image-in-default-browser)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;wikipedia-search&#34;&gt;Wikipedia search&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun wikipedia-search (search-term)
  &amp;quot;Search for SEARCH-TERM on wikipedia&amp;quot;
  (interactive
   (let ((term (if mark-active
                   (buffer-substring (region-beginning) (region-end))
                 (word-at-point))))
     (list
      (read-string
       (format &amp;quot;Wikipedia (%s):&amp;quot; term) nil nil term)))
   )
  (browse-url
   (concat
    &amp;quot;http://en.m.wikipedia.org/w/index.php?search=&amp;quot;
    search-term
    ))
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;access-hacker-news&#34;&gt;Access Hacker News&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun hn ()
  (interactive)
  (browse-url &amp;quot;http://news.ycombinator.com&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;open-specific-browser-depending-on-the-url&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Open specific browser depending on the URL&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-07 Thu 11:59] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This is worth setting up. It would be convenient for frequently visited websites like reddit and others, to open in the external browser, especially as they do not render well within w3m.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source : &lt;a href=&#34;http://ergoemacs.org/emacs/emacs%5Fset%5Fdefault%5Fbrowser.Html&#34; target=&#34;_blank&#34;&gt;http://ergoemacs.org/emacs/emacs%5Fset%5Fdefault%5Fbrowser.Html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; use browser depending on url
(setq
 browse-url-browser-function
 &#39;(
  (&amp;quot;wikipedia\\.org&amp;quot; . browse-url-firefox)
  (&amp;quot;github&amp;quot; . browse-url-chromium)
  (&amp;quot;thefreedictionary\\.com&amp;quot; . eww-browse-url)
  (&amp;quot;.&amp;quot; . browse-url-default-browser)
  ))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;frog-jump-buffer&#34;&gt;frog jump buffer&lt;/h3&gt;

&lt;p&gt;This package provides a nifty little pop up containing a list of buffers (that can be filtered), and enables jumping to the specified buffer with just a single key press.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package frog-jump-buffer
  :ensure t
  :defer nil
  :config
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;easy-kill-and-easy-mark&#34;&gt;easy-kill and easy mark&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-04-25 Thu 07:48] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The line selection, &amp;lsquo;e&amp;rsquo;, does not pick up lines separated with a full stop. Instead the entire paragraph is being selected.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Provide commands easy-kill and easy-mark to let users kill or mark things easily.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/leoliu/easy-kill&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This looks like a very handy package. The easiest way to get started is to cycle through the selections and use the help. Activate the command with &lt;code&gt;M-w&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt; for help which provides the list of key bindings. Alternately, use &lt;code&gt;SPC&lt;/code&gt; to cycle through the options available.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package easy-kill
  :config
  (global-set-key [remap kill-ring-save] &#39;easy-kill)
  (global-set-key [remap mark-sexp] &#39;easy-mark)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;eyebrowse&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; eyebrowse&lt;/h3&gt;

&lt;p&gt;This has to be combined with desktop.el or some other method to enable persistence across sessions. However, this does work well for a single session.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package eyebrowse
  :ensure t
  :defer nil
  :config
  (setq eyebrowse-mode-line-separator &amp;quot; &amp;quot;
        eyebrowse-new-workspace t)
  (eyebrowse-mode 1)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hugo&#34;&gt;Hugo&lt;/h3&gt;

&lt;h4 id=&#34;function-to-create-specific-properties-for-a-blog-post&#34;&gt;Function to create specific properties for a blog post&lt;/h4&gt;

&lt;p&gt;Modified this function from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Defining content directory&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-07 Thu 08:06]  &lt;/span&gt;&lt;/span&gt;  &lt;br /&gt;
Need to check if this is still required since I have switche to ox-hugo&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defvar hugo-content-dir &amp;quot;~/my_gits/hugo-sr/content/post/&amp;quot;
  &amp;quot;Path to Hugo&#39;s content directory&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ensuring properties exist and creating if they dont exist&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun hugo-ensure-property (property)
  &amp;quot;Make sure that a property exists. If not, it will be created.
Returns the property name if the property has been created, otherwise nil.&amp;quot;
  (org-id-get-create)
  (if (org-entry-get nil property)
      nil
    (progn (org-entry-put nil property &amp;quot;&amp;quot;)
           property)))

(defun hugo-ensure-properties ()

  (require &#39;dash)
  (let ((current-time (format-time-string
                       (org-time-stamp-format t t) (org-current-time)))
        first)
    (save-excursion
      (setq first (--first it (mapcar #&#39;hugo-ensure-property
                                      &#39;(&amp;quot;HUGO_TAGS&amp;quot; &amp;quot;HUGO_CATEGORIES&amp;quot;))))
      (unless (org-entry-get nil &amp;quot;HUGO_DATE&amp;quot;)
        (org-entry-put nil &amp;quot;EXPORT_DATE&amp;quot; current-time)))
    (org-entry-put nil &amp;quot;EXPORT_FILE_NAME&amp;quot; (org-id-get-create))
    (org-entry-put nil &amp;quot;EXPORT_HUGO_CUSTOM_FRONT_MATTER&amp;quot; &amp;quot;:profile false&amp;quot;)
    (when first
      (goto-char (org-entry-beginning-position))
      ;; The following opens the drawer
      (forward-line 1)
      (beginning-of-line 1)
      (when (looking-at org-drawer-regexp)
        (org-flag-drawer nil))
      ;; And now move to the drawer property
      (search-forward (concat &amp;quot;:&amp;quot; first &amp;quot;:&amp;quot;))
      (end-of-line))
    first))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hugo function calling the above&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun hugo ()
  (interactive)
  (unless (hugo-ensure-properties)
    (let* ((type    (concat &amp;quot;type = \&amp;quot;&amp;quot; (org-entry-get nil &amp;quot;HUGO_TYPE&amp;quot;) &amp;quot;\&amp;quot;\n&amp;quot;))
           (date     (concat &amp;quot;date = \&amp;quot;&amp;quot;
                             (format-time-string &amp;quot;%Y-%m-%d&amp;quot;
                                                 (apply &#39;encode-time
                                                        (org-parse-time-string
                                                         (org-entry-get nil &amp;quot;HUGO_DATE&amp;quot;))) t) &amp;quot;\&amp;quot;\n&amp;quot;))
           (tags     (concat &amp;quot;tags = [ \&amp;quot;&amp;quot;
                             (mapconcat &#39;identity
                                        (split-string
                                         (org-entry-get nil &amp;quot;HUGO_TAGS&amp;quot;)
                                         &amp;quot;\\( *, *\\)&amp;quot; t) &amp;quot;\&amp;quot;, \&amp;quot;&amp;quot;) &amp;quot;\&amp;quot; ]\n&amp;quot;))
           (fm (concat &amp;quot;+++\n&amp;quot;
                       title
               type
                       date
                       tags
                       topics
                       &amp;quot;+++\n\n&amp;quot;))
           (coding-system-for-write buffer-file-coding-system)
           (backend  &#39;md)
           (blog))
      ;; try to load org-mode/contrib/lisp/ox-gfm.el and use it as backend
      (if (require &#39;ox-gfm nil t)
          (setq backend &#39;gfm)
        (require &#39;ox-md))
      (setq blog (org-export-as backend t))
      ;; Normalize save file path
      (unless (string-match &amp;quot;^[/~]&amp;quot; file)
        (setq file (concat hugo-content-dir file))
        (unless (string-match &amp;quot;\\.md$&amp;quot; file)
          (setq file (concat file &amp;quot;.md&amp;quot;)))
        ;; save markdown
        (with-temp-buffer
          (insert fm)
          (insert blog)
          (untabify (point-min) (point-max))
          (write-file file)
          (message &amp;quot;Exported to %s&amp;quot; file))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ox-hugo-setup&#34;&gt;ox-hugo setup&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ox-hugo
  :ensure t
  :defer t
  :after ox
  :custom
  (org-hugo--tag-processing-fn-replace-with-hyphens-maybe t)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;

&lt;p&gt;These are packages and functions that I am exploring, and also ones that I can live without. i.e not having these packages functioning, will not make Emacs useless for me, however, having these snippets working could potentially improve my workflow in general.&lt;/p&gt;

&lt;p&gt;Some of these snippets or packages are enabled and some are not. In the case of troubleshooting, I will disable&lt;/p&gt;

&lt;h3 id=&#34;scimax-cusomisations&#34;&gt;Scimax cusomisations&lt;/h3&gt;

&lt;h4 id=&#34;scimax-journal-settings&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Scimax journal settings&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-09-25 Wed 13:15] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Adding the shortcut to new entry does not work. This has to be refined.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; (setq scimax-journal-root-dir &amp;quot;~/my_org/journal&amp;quot;)
;;(require &#39;calendar)
;;(global-set-key (kbd &amp;quot;M-s j&amp;quot;) &#39;scimax-journal-new-entry)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;bibliography-settings-and-customisation&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Bibliography settings and customisation&lt;/h4&gt;

&lt;p&gt;This was setup a long time ago to convert past technical repots into org mode, with references made in correct technical style. This project is on hold.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;doi-utils)
(require &#39;org-ref-wos)
(require &#39;org-ref-pubmed)
(require &#39;org-ref-arxiv)
(require &#39;org-ref-bibtex)
(require &#39;org-ref-pdf)
(require &#39;org-ref-url-utils)
(require &#39;org-ref-helm)

;; note and bib location

(setq org-ref-bibliography-notes &amp;quot;~/my_org/references/references.org&amp;quot;
      org-ref-bibliography-notes &amp;quot;~/my_org/references/research_notes.org&amp;quot;
      org-ref-default-bibliography &#39;(&amp;quot;~/my_org/references/references.bib&amp;quot;)
      org-ref-pdf-directory &amp;quot;~/my_org/references/pdfs/&amp;quot;)

;; setting up helm-bibtex
(setq helm-bibtex-bibliography &amp;quot;~/my_org/references/references.bib&amp;quot;
      helm-bibtex-library-path &amp;quot;~/my_org/org/references/pdfs&amp;quot;
      helm-bibtex-notes-path &amp;quot;~/my_org/references/research_notes.org&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;adding-actions-to-ivy&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Adding actions to ivy&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(ivy-add-actions
 &#39;projectile-completing-read
 &#39;((&amp;quot;b&amp;quot; (lambda (x)
	  (bash x))  &amp;quot;Open bash here.&amp;quot;)
   (&amp;quot;f&amp;quot; (lambda (x)
	  (finder x))  &amp;quot;Open Finder here.&amp;quot;)
   (&amp;quot;a&amp;quot; (lambda (x)
	  (helm-do-ag x) &amp;quot;helm do ag here.&amp;quot;))))

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setting-hyper-key-for-the-mac&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Setting Hyper key for the mac&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(if (system-name-is-darwin)
    (setq mac-)
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;org-db&#34;&gt;org-Db&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;`org-db&amp;rsquo; is an org-mode database. When it is active every org-mode file you visit will be indexed into a sqlite database. In each file, each headline with its title, tags and properties are stored, and every link in each file is stored.&lt;/p&gt;

&lt;p&gt;This becomes useful because you can then search all of your org-files and jump to different locations.&lt;/p&gt;

&lt;p&gt;Scimax help documentation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package emacsql-sqlite
  :ensure t
  :config
  (require &#39;org-db)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;tangle-org-mode-config-on-save&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Tangle org mode config on save&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-08-28 Wed 13:44] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Though this is an after-save hook : there is something wrong with the method of tangling. Perhaps an older version of the file is being used. I have changed this to a tangle during the loading of Scimax.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-14 Thu 13:14] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Need to add a condition of check: tangle if the file does not exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://thewanderingcoder.com/2015/02/literate-emacs-configuration/&#34; target=&#34;_blank&#34;&gt;https://thewanderingcoder.com/2015/02/literate-emacs-configuration/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a nice code snippet to automate the tangling on saving the config. This saves time while starting up Emacs&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun sr/tangle-on-save-emacs-config-org-file()
  (interactive)
  (if (string= buffer-file-name (file-truename &amp;quot;~/scimax/user/sr-config.org&amp;quot;))
      (org-babel-tangle-file &amp;quot;~/scimax/user/sr-config.org&amp;quot; &amp;quot;~/scimax/user/sr-config.el&amp;quot;)
    )
  )

(defun sr/tangle-if-file-absent ()
  (interactive)
  (if nil  (file-exists-p &amp;quot;~/scimax/user/sr-config.el&amp;quot;)
    (org-babel-tangle-file  &amp;quot;~/scimax/user/sr-config.org&amp;quot; &amp;quot;~/scimax/user/sr-config.el&amp;quot;)
    )
  )
;; (add-hook &#39;after-save-hook &#39;sr/dotemacs-export)
(add-hook &#39;after-save-hook
          &#39;sr/tangle-on-save-emacs-config-org-file)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;visual-line-and-visual-fill-column&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Visual line and visual fill column&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package visual-fill-column
  :ensure t
  :config
  (setq visual-fill-column-width 80)
  (setq global-visual-fill-column-mode 1)
  (setq global-visual-line-mode 1)
)

;;(add-hook &#39;visual-line-mode-hook #&#39;visual-fill-column-mode)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;marking&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Marking&lt;/h3&gt;

&lt;p&gt;I want a way to efficiently mark a location in a long script and jump around these locations (forward and backwards). The &lt;code&gt;transient-mark-mode&lt;/code&gt; and the different mark-rings need to be leveraged to do accomplish this. First step is to set a mark using &lt;code&gt;C-spc C-spc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Adopting the approach described at &lt;a href=&#34;https://masteringemacs.org/article/fixing-mark-commands-transient-mark-mode&#34; target=&#34;_blank&#34;&gt;Mastering Emacs&lt;/a&gt;. This enables a single key for a mark to activate and then deactivate, thus creating a mark.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun push-mark-no-activate ()
  &amp;quot;Pushes `point&#39; to `mark-ring&#39; and does not activate the region
   Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled&amp;quot;
  (interactive)
  (push-mark (point) t nil)
  (message &amp;quot;Pushed mark to ring&amp;quot;))

(global-set-key (kbd &amp;quot;C-`&amp;quot;) &#39;push-mark-no-activate)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;tmm-menu&lt;/code&gt; command&amp;rsquo;s shortcut &lt;code&gt;M-`&lt;/code&gt; is much better served by &lt;code&gt;M-x counsel-tmm&lt;/code&gt; where search is possible.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun jump-to-mark ()
  &amp;quot;Jumps to the local mark, respecting the `mark-ring&#39; order.
  This is the same as using \\[set-mark-command] with the prefix argument.&amp;quot;
  (interactive)
  (set-mark-command 1))
(global-set-key (kbd &amp;quot;M-`&amp;quot;) &#39;jump-to-mark)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;semantic-mode&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Semantic Mode&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Semantic is a package that provides language-aware editing commands based on &amp;lsquo;source-code parsers&amp;rsquo;. When enabled, each file you visit is automatically parsed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tuhdo.github.io/helm-intro.html&#34; target=&#34;_blank&#34;&gt;https://tuhdo.github.io/helm-intro.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(semantic-mode 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sauron&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Sauron&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package sauron
  :ensure t
  :config
  (require &#39;sauron)
  (setq sauron-modules &#39;(sauron-org sauron-notifications))
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;emacs-url-shortener&#34;&gt;emacs url shortener&lt;/h3&gt;

&lt;p&gt;Note that to use one of the url shortening services, an API access token will be needed. Currently, I am using bitly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package url-shortener
  :ensure t
  :defer t
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;free-keys&#34;&gt;free-keys&lt;/h3&gt;

&lt;p&gt;This seems to be a nifty little package that lists the key combinations that are not bound.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package free-keys
  :defer t
  :ensure t
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;zenburn-theme-exploration&#34;&gt;Zenburn theme exploration&lt;/h3&gt;

&lt;p&gt;For a long period, I was using the zenburn theme and had started customising it for my needs. However, I think leuven with a greyish background is really quite suitable. Even so, it&amp;rsquo;s nice to have a dark theme available when required. I&amp;rsquo;m keeping this around for tinkering down the line.&lt;/p&gt;

&lt;h4 id=&#34;disabling-leuven-and-loading-other-theme&#34;&gt;Disabling leuven and loading other theme&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(disable-theme &#39;leuven)
;;(load-theme &#39;spacemacs-dark t)
(load-theme &#39;zenburn t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;background-color-for-org-source-blocks&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Background color for org source Blocks&lt;/h4&gt;

&lt;p&gt;This is necessary due to the customisation in scimax&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(set-face-background &#39;org-block-emacs-lisp &amp;quot;black&amp;quot;)
(set-face-background &#39;org-block-python &amp;quot;black&amp;quot;)
(set-face-background &#39;org-block-ipython &amp;quot;black&amp;quot;)
(set-face-background &#39;org-block &amp;quot;black&amp;quot;)
;; (set-face-background &#39;org-block-quote &amp;quot;black&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;initial-setup-of-zenburn&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Initial setup of Zenburn&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; use variable-pitch fonts for some headings and titles
(setq zenburn-use-variable-pitch t)

;; scale headings in org-mode
(setq zenburn-scale-org-headlines t)

;; scale headings in outline-mode
(setq zenburn-scale-outline-headlines t)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;use-package-based-template-for-customising-zenburn&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Use-package based template for customising zenburn&lt;/h4&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://github.com/m-parashar/emax64/issues/5&#34; target=&#34;_blank&#34;&gt;https://github.com/m-parashar/emax64/issues/5&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package zenburn-theme
  :demand t
  :config
  (load-theme &#39;zenburn t)
  (set-face-attribute &#39;font-lock-comment-face nil :italic t)
  (set-face-attribute &#39;font-lock-doc-face nil :italic t)
  (zenburn-with-color-variables
    (set-face-attribute &#39;button nil :foreground zenburn-yellow-2)
    (set-face-attribute &#39;default nil
                        :background zenburn-bg-05
                        :height mp/font-size-default
                        :font mp/font-family)
    (set-face-attribute &#39;help-argument-name nil :foreground zenburn-orange :italic nil)
    (set-face-attribute &#39;hl-line nil :background zenburn-bg+1)
    (set-face-attribute &#39;header-line nil
                        :background zenburn-bg-1
                        :box `(:line-width 2 :color ,zenburn-bg-1)
                        :height mp/font-size-header-line)
    (set-face-attribute &#39;mode-line nil
                        :box `(:line-width 2 :color ,zenburn-bg-1)
                        :foreground zenburn-bg+3
                        :height mp/font-size-mode-line)
    (set-face-attribute &#39;mode-line-inactive nil
                        :box `(:line-width 2 :color ,zenburn-bg-05)
                        :foreground zenburn-bg+3
                        :height mp/font-size-mode-line)
    (set-face-attribute &#39;region nil
                        :background zenburn-fg-1
                        :distant-foreground &#39;unspecified)
    (set-face-attribute &#39;vertical-border nil :foreground zenburn-bg))

  ;; NOTE: See https://github.com/bbatsov/zenburn-emacs/issues/278.
  (zenburn-with-color-variables
    (mapc
     (lambda (face)
       (when (eq (face-attribute face :background) zenburn-bg)
         (set-face-attribute face nil :background &#39;unspecified)))
     (face-list))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setting-font-faces-for-headline-level&#34;&gt;Setting font faces for headline level&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-03-28 Thu 07:09] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This is available as in-built settings for the zenburn theme. However, once the font is changed, the&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(custom-set-faces
 &#39;(org-level-1 ((t (:inherit outline-1 :height 1.2))))
 &#39;(org-level-2 ((t (:inherit outline-2 :height 1.1))))
 &#39;(org-level-3 ((t (:inherit outline-3 :height 1.05))))
 &#39;(org-level-4 ((t (:inherit outline-4 :height 1.00))))
 &#39;(org-level-5 ((t (:inherit outline-5 :height .95))))
 )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;alfred-integration&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Alfred Integration&lt;/h3&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://github.com/jjasghar/alfred-org-capture&#34; target=&#34;_blank&#34;&gt;https://github.com/jjasghar/alfred-org-capture&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(if (system-type-is-darwin)
    (progn
      ;;; Code:
      (defun make-orgcapture-frame ()
        &amp;quot;Create a new frame and run org-capture.&amp;quot;
        (interactive)
        (make-frame &#39;((name . &amp;quot;remember&amp;quot;) (width . 80) (height . 16)
                      (top . 400) (left . 300)
                      (font . &amp;quot;-apple-Monaco-medium-normal-normal-*-13-*-*-*-m-0-iso10646-1&amp;quot;)
                      ))
        (select-frame-by-name &amp;quot;remember&amp;quot;)
        (org-capture))
      )
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;project-publishing-setup&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Project publishing setup &lt;code&gt;[0/3]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is under construction and was initially started with the idea of having custom publishing settings for different projects. I was initially looking at this for publishing my hugo blog. However, the need has been negated with the excellent ox-hugo package.&lt;/p&gt;

&lt;h4 id=&#34;ox-tufte&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; ox-Tufte&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-04 Thu 11:20] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Minor experiments are completed with this package. However, detailed exploration is required to incorporate intoa  workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This is an export backend for Org-mode that exports buffers to HTML that is compatible with Tufte CSS out of the box (meaning no CSS modifications needed).&lt;/p&gt;

&lt;p&gt;It’s still a work-in-progress, but it works well right now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dakrone/ox-tufte&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ox-tufte
  :defer t
  :config
  (require &#39;ox-tufte)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;exporting-org-projects&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Exporting org projects&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(
 setq org-publish-project-alist
 &#39;(
   (&amp;quot;org-repo&amp;quot;
    :base-directory &amp;quot;./&amp;quot;
    :base-extension &amp;quot;org&amp;quot;
    :publishing-directory &amp;quot;/Users/shreyas/my_projects/dotemacs&amp;quot;
    :EXPORT_FILE_NAME &amp;quot;README.org&amp;quot;
    :recursive f
    :publishing-function org-html-publish-to-html
    ;; :html-head &amp;quot;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;http://dakrone.github.io/org2.css&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;&amp;quot;
    )

   (&amp;quot;md&amp;quot;
    :base-directory &amp;quot;./&amp;quot;
    :base-extension &amp;quot;org&amp;quot;
    :publishing-directory &amp;quot;./export/&amp;quot;
    :recursive t
    :publishing-function org-md-export-to-markdown
    )

   (&amp;quot;Documentation - html + md&amp;quot;
    :components (&amp;quot;html-static&amp;quot; &amp;quot;md&amp;quot; )
    )))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;function-for-exporting-dotemacs-config&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Function for exporting dotemacs config &lt;code&gt;[&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;]&lt;/code&gt;&lt;/h4&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-14 Thu 14:05] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Save the filename as variables.&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-14 Thu 13:30] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Add a condition to check if the directory exists.&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-10 Sun 07:16] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Add a line to revert target export files if they are open. Prefer exporting the org file rather than copying.&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the beginning of a function to perform 3 exports:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Export to my hugo website as a part of my documentation (ox-hugo)&lt;/li&gt;
&lt;li&gt;Copy the org file to my github repo.&lt;/li&gt;
&lt;li&gt;Tangle the copied org file to the above github repository to have the script ready.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Maintaining the documentation on my website does not make it easy to others to view the changes in the configuration and fork or download the same as an org file or emacs-lisp script. Therefore the config that I publish should be maintained in it&amp;rsquo;s own repository.&lt;/p&gt;

&lt;p&gt;As of now, I&amp;rsquo;m calling this function from my Emacs config file, and need to improve the above workflow.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun sr/dotemacs-export()
  (interactive)
  &amp;quot;If directories exist - exporting Org config to Hugo blog, and to Github repository org file and lisp&amp;quot;

  (if (file-directory-p &amp;quot;~/my_projects/dotemacs&amp;quot;)
      (progn
        (copy-file &amp;quot;~/scimax/user/sr-config.org&amp;quot; &amp;quot;~/my_projects/dotemacs/README.org&amp;quot; &amp;quot;OK-IF-ALREADY-EXISTS&amp;quot;)
        (copy-file &amp;quot;~/scimax/user/sr-config.el&amp;quot; &amp;quot;~/my_projects/dotemacs/config.el&amp;quot; &amp;quot;OK-IF-ALREADY-EXISTS&amp;quot;)
        ;; (org-babel-tangle-file  &amp;quot;~/my_projects/dotemacs/README.org&amp;quot; &amp;quot;~/my_projects/dotemacs/config.el&amp;quot;)
        )
    )
  (if (file-directory-p &amp;quot;~/hugo-sr&amp;quot;)
      (progn
        (org-hugo-export-to-md)
        )
    )
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;docker&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Docker&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve started playing with Docker, and need Emacs to take care of my workflows! :).&lt;/p&gt;

&lt;h4 id=&#34;docker-package&#34;&gt;Docker package&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;docker&lt;/code&gt; package enables several commands, but does not seem to include syntax highlighting for docker files.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package docker
  :ensure t
  :defer t
  :config
  (require &#39;docker)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;docker-compose-mode&#34;&gt;docker-compose-mode&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package docker-compose-mode
  :ensure t
  :defer t
  :config
  (require &#39;docker-compose-mode)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;docker-file-mode&#34;&gt;docker-file-mode&lt;/h4&gt;

&lt;p&gt;This is required for syntax highlighting in dockerfiles.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package dockerfile-mode
  :ensure t
  :defer t
  :config
  (require &#39;dockerfile-mode)
  (add-to-list &#39;auto-mode-alist
               &#39;(&amp;quot;Dockerfile\\&amp;quot; . dockerfile-mode)
               )
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;org-bookmark-heading&#34;&gt;org-bookmark-heading&lt;/h3&gt;

&lt;p&gt;For some reason, the default bookmark behavior in org mode is that the bookmark is not linked to the org-id. This means that if the heading is shifted somewhere, the bookmark becomes useless! The remedy seems to be using the package org-bookmark-Heading&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-bookmark-heading
  :ensure t
  :config
  (require &#39;org-bookmark-heading)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;crux-basic-movement&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Crux  - basic movement&lt;/h3&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://jamiecollinson.com/blog/my-emacs-config/&#34; target=&#34;_blank&#34;&gt;https://jamiecollinson.com/blog/my-emacs-config/&lt;/a&gt;
Contains functions from  Prelude. I should check this out in more detail.&lt;/p&gt;

&lt;p&gt;Set C-a to move to the first non-whitespace character on a line, and then to toggle between that and the beginning of the line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package crux
  :ensure t
  :bind ((&amp;quot;C-a&amp;quot; . crux-move-beginning-of-line)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;crypto-setup&#34;&gt;Crypto setup&lt;/h3&gt;

&lt;h4 id=&#34;basic-crypto&#34;&gt;Basic crypto&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq epa-file-encrypt-to &amp;quot;shreyas@fastmail.com&amp;quot;)
(require &#39;org-crypt)
(add-to-list &#39;org-modules &#39;org-crypt)
                                        ; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
;;(setq org-tags-exclude-from-inheritance (quote (&amp;quot;crypt&amp;quot;)))
                                        ; GPG key to use for encryption. nil for symmetric encryption
;;(setq org-crypt-key nil)
(setq org-crypt-disable-auto-save t)
;;(setq org-crypt-tag-matcher &amp;quot;locked&amp;quot;)

(message &amp;quot;Loaded crypto setup&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setting-auth-sources&#34;&gt;Setting auth sources&lt;/h4&gt;

&lt;p&gt;This was prompted by this discussion &lt;a href=&#34;https://emacs.stackexchange.com/questions/10207/how-to-get-org2blog-to-use-authinfo-gpg&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/10207/how-to-get-org2blog-to-use-authinfo-gpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have modified it to my own file names.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;auth-source)

(setq
 auth-sources &#39;(default
                 &amp;quot;secrets:session&amp;quot;
                 &amp;quot;secrets:Login&amp;quot;
                 &amp;quot;~/.gh.authinfo.gpg&amp;quot;
                 &amp;quot;~/.netrc.gpg&amp;quot;
                 &amp;quot;~/.bitly-access.token.gpg&amp;quot;
                 )
 epa-file-cache-passphrase-for-symmetric-encryption t)

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;github-token-access&#34;&gt;github token access&lt;/h4&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://emacs.stackexchange.com/questions/40994/using-auth-source-with-magit-and-bitbucket&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/40994/using-auth-source-with-magit-and-bitbucket&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fill the out the following details before executing the script. Machine can be found be executing &amp;lsquo;hostname&amp;rsquo; in shell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat &amp;gt; ~/.gh.authinfo &amp;lt;&amp;lt; EOF
machine shrysr@github.com password ABCD
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;M-x epa-encrypt-file&lt;/code&gt; and point towards the above file and choose your key for encryptions. This will generate the .gpg file.&lt;/p&gt;

&lt;p&gt;Remove the original file when done.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rm -f ~/.gh.authinfo
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq magit-process-find-password-functions &#39;(magit-process-password-auth-source))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;persp-projectile&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Persp-projectile&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/howardabrams/dot-files/blob/master/emacs.org#perspective&#34; target=&#34;_blank&#34;&gt;Refer Howard&amp;rsquo;s config snippet&lt;/a&gt; to setup a test.&lt;/p&gt;

&lt;h3 id=&#34;lob&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; LOB&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-04-25 Thu 07:39] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Since shifting to using org-brain for permanent notes and snippets, I need to review this ingest.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a bunch of scripts that I would like ingested into the Library of Babel to be available for ready use. In some cases, with specific and relatively simple actions these are useful, and generally easier to define that Emacs Functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(org-babel-lob-ingest &amp;quot;~/my_projects/sr-snip-lob/README.org&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hydras-and-some-custom-functions&#34;&gt;Hydras and some custom functions&lt;/h3&gt;

&lt;h4 id=&#34;refiling&#34;&gt;Refiling&lt;/h4&gt;

&lt;p&gt;Adapted from &lt;a href=&#34;https://emacs.stackexchange.com/questions/8045/org-refile-to-a-known-fixed-location&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/8045/org-refile-to-a-known-fixed-location&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;source: &lt;a href=&#34;https://gist.github.com/mm--/60e0790bcbf8447160cc87a66dc949ab&#34; target=&#34;_blank&#34;&gt;https://gist.github.com/mm--/60e0790bcbf8447160cc87a66dc949ab&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also see&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;
(defun my/refile (file headline &amp;amp;optional arg)
  &amp;quot;Refile to a specific location.

With a &#39;C-u&#39; ARG argument, we jump to that location (see
`org-refile&#39;).

Use `org-agenda-refile&#39; in `org-agenda&#39; mode.&amp;quot;
  (let* ((pos (with-current-buffer (or (get-buffer file) ;Is the file open in a buffer already?
				       (find-file-noselect file)) ;Otherwise, try to find the file by name (Note, default-directory matters here if it isn&#39;t absolute)
		(or (org-find-exact-headline-in-buffer headline)
		    (error &amp;quot;Can&#39;t find headline `%s&#39;&amp;quot; headline))))
	 (filepath (buffer-file-name (marker-buffer pos))) ;If we&#39;re given a relative name, find absolute path
	 (rfloc (list headline filepath nil pos)))
    (if (and (eq major-mode &#39;org-agenda-mode) (not (and arg (listp arg)))) ;Don&#39;t use org-agenda-refile if we&#39;re just jumping
	(org-agenda-refile nil rfloc)
      (org-refile arg nil rfloc))))

(defun josh/refile (file headline &amp;amp;optional arg)
  &amp;quot;Refile to HEADLINE in FILE. Clean up org-capture if it&#39;s activated.

With a `C-u` ARG, just jump to the headline.&amp;quot;
  (interactive &amp;quot;P&amp;quot;)
  (let ((is-capturing (and (boundp &#39;org-capture-mode) org-capture-mode)))
    (cond
     ((and arg (listp arg))	    ;Are we jumping?
      (my/refile file headline arg))
     ;; Are we in org-capture-mode?
     (is-capturing      	;Minor mode variable that&#39;s defined when capturing
      (josh/org-capture-refile-but-with-args file headline arg))
     (t
      (my/refile file headline arg)))
    (when (or arg is-capturing)
      (setq hydra-deactivate t))))

(defun josh/org-capture-refile-but-with-args (file headline &amp;amp;optional arg)
  &amp;quot;Copied from `org-capture-refile&#39; since it doesn&#39;t allow passing arguments. This does.&amp;quot;
  (unless (eq (org-capture-get :type &#39;local) &#39;entry)
    (error
     &amp;quot;Refiling from a capture buffer makes only sense for `entry&#39;-type templates&amp;quot;))
  (let ((pos (point))
	(base (buffer-base-buffer (current-buffer)))
	(org-capture-is-refiling t)
	(kill-buffer (org-capture-get :kill-buffer &#39;local)))
    (org-capture-put :kill-buffer nil)
    (org-capture-finalize)
    (save-window-excursion
      (with-current-buffer (or base (current-buffer))
	(org-with-wide-buffer
	 (goto-char pos)
	 (my/refile file headline arg))))
    (when kill-buffer (kill-buffer base))))

(defmacro josh/make-org-refile-hydra (hydraname file keyandheadline)
  &amp;quot;Make a hydra named HYDRANAME with refile targets to FILE.
KEYANDHEADLINE should be a list of cons cells of the form (\&amp;quot;key\&amp;quot; . \&amp;quot;headline\&amp;quot;)&amp;quot;
  `(defhydra ,hydraname (:color blue :after-exit (unless (or hydra-deactivate
							     current-prefix-arg) ;If we&#39;re just jumping to a location, quit the hydra
						   (josh/org-refile-hydra/body)))
     ,file
     ,@(cl-loop for kv in keyandheadline
		collect (list (car kv) (list &#39;josh/refile file (cdr kv) &#39;current-prefix-arg) (cdr kv)))
     (&amp;quot;q&amp;quot; nil &amp;quot;cancel&amp;quot;)))

;;;;;;;;;;
;; Here we&#39;ll define our refile headlines
;;;;;;;;;;

(josh/make-org-refile-hydra josh/org-refile-hydra-file-ds
			    &amp;quot;~/my_org/datascience.org&amp;quot;
			    ((&amp;quot;1&amp;quot; . &amp;quot;@Datascience @Inbox&amp;quot;)
			     (&amp;quot;2&amp;quot; . &amp;quot;@Datascience @Notes&amp;quot;)))

(josh/make-org-refile-hydra josh/org-refile-hydra-file-bgr
			    &amp;quot;~/my_org/bgr.org&amp;quot;
			    ((&amp;quot;1&amp;quot; . &amp;quot;#BGR #Inbox&amp;quot;)
			     (&amp;quot;2&amp;quot; . &amp;quot;#questions @ BGR&amp;quot;)
                             (&amp;quot;3&amp;quot; . &amp;quot;Inventory management Project&amp;quot;)))

(josh/make-org-refile-hydra josh/org-refile-hydra-file-todoglobal
			    &amp;quot;todo-global.org&amp;quot;
			    ((&amp;quot;1&amp;quot; . &amp;quot;;Emacs Stuff&amp;quot;)
			     (&amp;quot;2&amp;quot; . &amp;quot;;someday&amp;quot;)))

(defhydra josh/org-refile-hydra (:foreign-keys run)
  &amp;quot;Refile&amp;quot;
  (&amp;quot;a&amp;quot; josh/org-refile-hydra-file-ds/body &amp;quot;File A&amp;quot; :exit t)
  (&amp;quot;b&amp;quot; josh/org-refile-hydra-file-bgr/body &amp;quot;File B&amp;quot; :exit t)
  (&amp;quot;c&amp;quot; josh/org-refile-hydra-file-todoglobal/body &amp;quot;File C&amp;quot; :exit t)
  (&amp;quot;j&amp;quot; org-refile-goto-last-stored &amp;quot;Jump to last refile&amp;quot; :exit t)
  (&amp;quot;q&amp;quot; nil &amp;quot;cancel&amp;quot;))

(global-set-key (kbd &amp;quot;&amp;lt;f8&amp;gt; r&amp;quot;) &#39;josh/org-refile-hydra/body)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;window-manipulation&#34;&gt;Window manipulation&lt;/h4&gt;

&lt;p&gt;Source : Hydra documentation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;
;;  Hydras for window configuration. Using the deluxe
(defhydra hydra-window ()
  &amp;quot;
Movement^^        ^Split^         ^Switch^		^Resize^
----------------------------------------------------------------
_h_ ←       	_v_ertical    	_b_uffer		_q_ X←
_j_ ↓        	_x_ horizontal	_f_ind files	_w_ X↓
_k_ ↑        	_z_ undo      	_a_ce 1		_e_ X↑
_l_ →        	_Z_ reset      	_s_wap		_r_ X→
_F_ollow		_D_lt Other   	_S_ave		max_i_mize
_SPC_ cancel	_o_nly this   	_d_elete
&amp;quot;
  (&amp;quot;h&amp;quot; windmove-left )
  (&amp;quot;j&amp;quot; windmove-down )
  (&amp;quot;k&amp;quot; windmove-up )
  (&amp;quot;l&amp;quot; windmove-right )
  (&amp;quot;q&amp;quot; hydra-move-splitter-left)
  (&amp;quot;w&amp;quot; hydra-move-splitter-down)
  (&amp;quot;e&amp;quot; hydra-move-splitter-up)
  (&amp;quot;r&amp;quot; hydra-move-splitter-right)
  (&amp;quot;b&amp;quot; helm-mini)
  (&amp;quot;f&amp;quot; helm-find-files)
  (&amp;quot;F&amp;quot; follow-mode)
  (&amp;quot;a&amp;quot; (lambda ()
         (interactive)
         (ace-window 1)
         (add-hook &#39;ace-window-end-once-hook
                   &#39;hydra-window/body))
   )
  (&amp;quot;v&amp;quot; (lambda ()
         (interactive)
         (split-window-right)
         (windmove-right))
   )
  (&amp;quot;x&amp;quot; (lambda ()
         (interactive)
         (split-window-below)
         (windmove-down))
   )
  (&amp;quot;s&amp;quot; (lambda ()
         (interactive)
         (ace-window 4)
         (add-hook &#39;ace-window-end-once-hook
                   &#39;hydra-window/body)))
  (&amp;quot;S&amp;quot; save-buffer)
  (&amp;quot;d&amp;quot; delete-window)
  (&amp;quot;D&amp;quot; (lambda ()
         (interactive)
         (ace-window 16)
         (add-hook &#39;ace-window-end-once-hook
                   &#39;hydra-window/body))
   )
  (&amp;quot;o&amp;quot; delete-other-windows)
  (&amp;quot;i&amp;quot; ace-maximize-window)
  (&amp;quot;z&amp;quot; (progn
         (winner-undo)
         (setq this-command &#39;winner-undo))
   )
  (&amp;quot;Z&amp;quot; winner-redo)
  (&amp;quot;SPC&amp;quot; nil)
  )

(global-set-key (kbd &amp;quot;&amp;lt;f8&amp;gt; w&amp;quot;) &#39;hydra-window/body)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;helm-do-ag-in-specific-locations&#34;&gt;helm-do-ag in specific locations&lt;/h4&gt;

&lt;p&gt;Reference: &lt;a href=&#34;https://emacs.stackexchange.com/questions/44128/function-to-do-helm-do-ag-for-a-specific-project&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/44128/function-to-do-helm-do-ag-for-a-specific-project&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In project directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun helm-do-ag-projects ()
  &amp;quot;Grep string in Project directory&amp;quot; (interactive)
  (let ((rootdir (concat &amp;quot;~/my_projects/&amp;quot;)))
    (let ((helm-ag-command-option (concat helm-ag-command-option &amp;quot;&amp;quot;)))
      (helm-do-ag rootdir))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scimax config directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun helm-do-ag-emacs-config ()
  &amp;quot;Grep string in Emacs custom code&amp;quot;
  (interactive)
  (let ((rootdir (concat &amp;quot;~/scimax/user/sr-cust/&amp;quot;)))
    (let ((helm-ag-command-option (concat helm-ag-command-option &amp;quot;&amp;quot;)))
      (helm-do-ag rootdir))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Journal directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun helm-do-ag-journal ()
  &amp;quot;Grep string in journal directory&amp;quot;
  (interactive)
  (let ((specfile (concat &amp;quot;~/my_org/journal/&amp;quot;)))
    (let ((helm-ag-command-option (concat helm-ag-command-option &amp;quot;&amp;quot;)))
      (helm-ag-this-file specfile))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;BGR file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun helm-do-ag-bgr ()
  &amp;quot;Grep string in BGR file&amp;quot;
  (interactive)
  (let ((specfile (concat &amp;quot;~/my_org/bgr.org&amp;quot;)))
    (let ((helm-ag-command-option (concat helm-ag-command-option &amp;quot;&amp;quot;)))
      (helm-do-ag-this-file specfile))))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Defining hydra&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defhydra shrysr/hydra-helm-ag-do-menu ()
  &amp;quot;
Helm-do-ag in specified locations
^location^  ^command^
----------------------------------------------------------
e:        emacs custom config
b:        bgr file
o:        org files
j:        journal search
&amp;quot;
  (&amp;quot;e&amp;quot; helm-do-ag-emacs-config)
  (&amp;quot;j&amp;quot; helm-do-ag-journal :color blue)
  (&amp;quot;p&amp;quot; helm-do-ag-projects)
  (&amp;quot;o&amp;quot; helm-do-ag-org)
  (&amp;quot;q&amp;quot; quit-window &amp;quot;quit&amp;quot; :color red))

(global-set-key (kbd &amp;quot;&amp;lt;f8&amp;gt; h&amp;quot;) &#39;shrysr/hydra-helm-ag-do-menu/body)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;frame-configurations-fo-magit-and-project-launch&#34;&gt;Frame configurations fo magit and project launch&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Scimax - magit and windows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; scimax directory magit status
(defun sr/windows-magit-scimax ()
  (interactive)
  (ace-delete-other-windows)
  (dired &amp;quot;~/scimax/user/&amp;quot;)
  (switch-window-then-split-right nil)
  (magit-status &amp;quot;~/scimax/&amp;quot;)
  (switch-window)
  (split-window-vertically)
  (dired-up-directory)
  (windmove-right)
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Org files - magit and windows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; my_org magit status
(defun sr/windows-magit-org ()
  (interactive)
  (ace-delete-other-windows)
  (magit-status &amp;quot;~/my_org/&amp;quot;)
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Project directory - magit and windows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; magit status
(defun sr/windows-magit-projects ()
  (interactive)
  (ace-delete-other-windows)
  (switch-window-then-split-right nil)
  (magit-status &amp;quot;~/my_projects/&amp;quot;)
  (switch-window)
  (dired &amp;quot;~/my_projects/&amp;quot;)
  (switch-window)
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Project: Switch and windows&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-10 Sun 07:09] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Experiment with helm-swoop functions to target only top level headings&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun sr/windows-projects ()
  (interactive)
  (ace-delete-other-windows)
  (switch-window-then-split-right nil)
  (projectile-switch-project)
  (switch-window)
  (find-file &amp;quot;~/my_org/project-tasks.org&amp;quot;)
  (widen)
  (helm-org-rifle-current-buffer)
  (org-narrow-to-subtree)
  (outline-show-children)
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Defining Hydra&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defhydra sr/process-window-keys ()
  &amp;quot;
Key^^   ^Workflow^
--------------------
o       org magit
s       scimax magit
p       projects magit
w       select project and set window config
SPC     exit
&amp;quot;
  (&amp;quot;o&amp;quot; sr/windows-magit-org )
  (&amp;quot;p&amp;quot; sr/windows-magit-projects )
  (&amp;quot;s&amp;quot; sr/windows-magit-scimax )
  (&amp;quot;w&amp;quot; sr/windows-projects)
  (&amp;quot;SPC&amp;quot; nil)
  )

(global-set-key (kbd &amp;quot;&amp;lt;f8&amp;gt; m&amp;quot;) &#39;sr/process-window-keys/body)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;loading-completed&#34;&gt;Loading completed&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(message &amp;quot;Loaded Hydras&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;python&#34;&gt;Python &lt;code&gt;[0/4]&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&#34;setup-virtual-environment-approach&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; setup virtual environment approach&lt;/h4&gt;

&lt;p&gt;I have tried using the conda.el package, but for some reason, it will not recognise the virtual environments in the paths specified. An excellent guide to using virtual environments with python is available on &lt;a href=&#34;http://rakan.me/emacs/python-dev-with-emacs-and-pyenv/&#34; target=&#34;_blank&#34;&gt;Rakan&amp;rsquo;s blog&lt;/a&gt;, and I&amp;rsquo;ve borrowed some bits of it.&lt;/p&gt;

&lt;p&gt;I prefer to use miniconda for my python programming, and therefore the environment path is set appropriately below.&lt;/p&gt;

&lt;p&gt;Switching an environment is as simple as &lt;code&gt;M-x pyenv-workon&lt;/code&gt;. This is quite excellent.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package pyenv-mode
  :init
  ;;(add-to-list &#39;exec-path &amp;quot;~/.pyenv/shims&amp;quot;)
  (setenv &amp;quot;WORKON_HOME&amp;quot; &amp;quot;~/miniconda3/envs/&amp;quot;)
  :config
  (pyenv-mode)
;; :bind
;; (&amp;quot;C-x p e&amp;quot; . pyenv-activate-current-project)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setup-conda-for-virtual-environment-management&#34;&gt;&lt;span class=&#34;org-todo todo POSTPONED&#34;&gt;POSTPONED&lt;/span&gt; setup conda for virtual environment management&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;
(use-package conda
  :ensure t
  :config
  (require &#39;conda)
  ;;(conda-env-initialize-interactive-shells)

  ;;  Yes I want conda active for eshell as well
  ;;(conda-env-initialize-eshell)

  ;; Setting home path for  miniconda. I use the same path everywhee.
  (custom-set-variables
   &#39;(conda-anaconda-home &amp;quot;~/miniconda3/&amp;quot;))
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;general-config&#34;&gt;General config&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 14:52] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This is to take care of the annoying indentation message that always pops up.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq python-indent-guess-indent-offset nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;autocomplete-for-python-blocks&#34;&gt;&lt;span class=&#34;org-todo todo NEXT&#34;&gt;NEXT&lt;/span&gt; Autocomplete for python blocks&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-to-list &#39;company-backends &#39;company-ob-ipython)
(company-mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;emacs-jupyter&#34;&gt;&lt;span class=&#34;org-todo todo NEXT&#34;&gt;NEXT&lt;/span&gt; Emacs-jupyter&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-12 Tue 14:48] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Since I am more familiar with ob-ipython and there are a bunch of interesting features already implemented in it like the automatic setting of a kernel and file names for graphic outputs and so on - I will explore jupyter-emacs at a later date.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package jupyter
  :ensure t
  :defer t
  :config
  ;(org-babel-load-languages &#39;(jupyter .t))
  (setq org-babel-default-header-args:jupyter-python &#39;((:async . &amp;quot;yes&amp;quot;)
                                                       (:session . &amp;quot;jipython&amp;quot;)
                                                       (:kernel . &amp;quot;python3&amp;quot;)))
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;disabled&#34;&gt;Disabled&lt;/h2&gt;

&lt;p&gt;These are packages and snippets that disabled from tangling and execution. Some of them have been explored and discarded for various reasons. The rest are packages / features I could not get working satisfactorily.&lt;/p&gt;

&lt;h3 id=&#34;org2blog-publishing-to-wordpress&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; org2blog : publishing to wordpress &lt;code&gt;[0/1]&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-21 Sun 16:17] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
I have a suspicion that the mp-wp implementation is different from the usual wordpress installation and therefore, the org2blog function may not work with it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fueled by discussions in #ossasepia, I have decided to shift direction towards Wordpress and a custom VPS server to host and secure my own data.&lt;/p&gt;

&lt;p&gt;While there are disadvantages in using a behemoth like wordpress over a simple static hugo site - one key driver is the ability to create comment systems with pingbacks, and control the data. Well to the extent possible on a rented VPS server, which is still more control than using services like Bitbucket / Github.&lt;/p&gt;

&lt;p&gt;Why bother with comment systems?
I&amp;rsquo;ve realised from my discussions with diana_coman  that despite the inconvenience, the whole point of the web is sharing and hopefully creating a seed for intellectual discussions that could lead somewhere meaningful. A good commenting system is obviously needed, for the little that takes place.&lt;/p&gt;

&lt;p&gt;Eventually, it would be interesting to run V to host my own repository and files, and perhaps employing git annex, for managing an index of other files in different locations.&lt;/p&gt;

&lt;p&gt;The good thing that I&amp;rsquo;ve become more comfortable with Emacs and getting packages to work, and even exploring the source code to understand the arguments better.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This was intimidating in the past, but reading the source code may be the best way to understand a language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://vinhtrieublog.wordpress.com/2016/02/03/publishing-to-wordpress-with-org2blog/&#34; target=&#34;_blank&#34;&gt;Samuel Zhao&amp;rsquo;s post&lt;/a&gt; is a good introduction to setting up org2blog, and I have replicated the steps with some additional twists:&lt;/p&gt;

&lt;ol class=&#34;task-list&#34;&gt;
&lt;li&gt;Encryption of the login details with my personal key, and setup to ingest a list of authsources.&lt;/li&gt;
&lt;li&gt;Setting up the org2blog package to enable publishing and control of blog posts right within Emacs.&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; It would be nice to have a link to the source file in each wordpress post. Perhaps the file could be signed with gpg as well?&lt;/label&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org2blog
  :ensure t
  :defer nil
  :config
  (require &#39;xml-rpc)
  (require &#39;org2blog-autoloads)
  ;; (require &#39;netrc)
  (setq org2blog/wp-blog-alist
        `((&amp;quot;young-hands-club&amp;quot;
           :url &amp;quot;http://younghands.club/xmlrc.php&amp;quot;
           :default-title &amp;quot;&amp;quot;
           :default-categories (&amp;quot;daily-log&amp;quot;)
           :username ,(auth-source-user-or-password &#39;young-hands-club &amp;quot;login&amp;quot;)
           :password ,(auth-source-user-or-password young-hands-club &amp;quot;password&amp;quot;)
           :tags-as-categories true)))
  (setq wpcredentials (auth-source-user-and-password &amp;quot;young-hands-club&amp;quot;))
  (setq org2blog/wp-blog-alist
        `((&amp;quot;young-hands-club&amp;quot;
           :url &amp;quot;http://younghands.club/xmlrc.php&amp;quot;
           :username ,(car wpcredentials)
           :password ,(cadr wpcredentials))))

  ;; implemented as HTML styling. Your pick!
  (setq org2blog/wp-use-sourcecode-shortcode &#39;t)

  ;; removed light=&amp;quot;true&amp;quot;
  (setq org2blog/wp-sourcecode-default-params nil)

  ;; target language needs to be in here
  (setq org2blog/wp-sourcecode-langs
        &#39;(&amp;quot;actionscript3&amp;quot; &amp;quot;bash&amp;quot; &amp;quot;coldfusion&amp;quot; &amp;quot;cpp&amp;quot; &amp;quot;csharp&amp;quot; &amp;quot;css&amp;quot; &amp;quot;delphi&amp;quot;
          &amp;quot;erlang&amp;quot; &amp;quot;fsharp&amp;quot; &amp;quot;diff&amp;quot; &amp;quot;groovy&amp;quot; &amp;quot;html&amp;quot; &amp;quot;javascript&amp;quot; &amp;quot;java&amp;quot; &amp;quot;javafx&amp;quot; &amp;quot;matlab&amp;quot;
          &amp;quot;objc&amp;quot; &amp;quot;perl&amp;quot; &amp;quot;php&amp;quot; &amp;quot;text&amp;quot; &amp;quot;powershell&amp;quot; &amp;quot;python&amp;quot; &amp;quot;ruby&amp;quot; &amp;quot;scala&amp;quot; &amp;quot;sql&amp;quot;
          &amp;quot;vb&amp;quot; &amp;quot;xml&amp;quot;
          &amp;quot;sh&amp;quot; &amp;quot;emacs-lisp&amp;quot; &amp;quot;lisp&amp;quot; &amp;quot;lua&amp;quot; &amp;quot;R&amp;quot;))

  (setq org-src-fontify-natively t)

  ;; ;; You want set the keymode map you can use these.
  ;; (global-set-key (kbd &amp;quot; l&amp;quot;) &#39;org2blog/wp-login)
  ;; (global-set-key (kbd &amp;quot; p&amp;quot;) &#39;org2blog/wp-post-buffer-and-publish)
  ;; )))
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;helm-ext&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; helm-ext&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-04-29 Mon 08:01] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Disabling excecution for the time being.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Extensions to helm, which I find useful but are unlikely to be accepted in the upstream. A collection of dirty hacks for helm!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cute-jumper/helm-ext&#34; target=&#34;_blank&#34;&gt;https://github.com/cute-jumper/helm-ext&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package helm-ext
  :ensure t
  :config
  (helm-ext-ff-enable-skipping-dots t)
  ;; Testing the auto path expansion
  ;;(helm-ff-ext-enable-auto-path-expansion t)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scimax-customisations-1&#34;&gt;Scimax customisations&lt;/h3&gt;

&lt;h4 id=&#34;enabling-scimax-statistics&#34;&gt;Enabling Scimax Statistics&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-10-07 Mon 13:17] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The default config is insufficient and in particular, uses the ess-smart-underscore package which is not useful to my general workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;scimax-statistics)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dired&#34;&gt;Dired&lt;/h3&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org&#34; target=&#34;_blank&#34;&gt;https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package dired
  :ensure nil
  :delight dired-mode &amp;quot;Dired&amp;quot;
  :preface
  (defun me/dired-directories-first ()
    &amp;quot;Sort dired listings with directories first before adding marks.&amp;quot;
    (save-excursion
      (let (buffer-read-only)
        (forward-line 2)
        (sort-regexp-fields t &amp;quot;^.*$&amp;quot; &amp;quot;[ ]*.&amp;quot; (point) (point-max)))
      (set-buffer-modified-p nil)))
  ;:hook ;(dired-mode . dired-hide-details-mode)
  :config
  (advice-add &#39;dired-readin :after #&#39;me/dired-directories-first)
  (setq-default
   dired-auto-revert-buffer t
   dired-dwim-target t
   dired-hide-details-hide-symlink-targets nil
   dired-listing-switches &amp;quot;-alh&amp;quot;
   dired-ls-F-marks-symlinks nil
   dired-recursive-copies &#39;always))

(use-package dired-x
  :ensure nil
  :preface
  (defun me/dired-revert-after-command (command &amp;amp;optional output error)
    (revert-buffer))
  :config
  (advice-add &#39;dired-smart-shell-command :after #&#39;me/dired-revert-after-command))

(message &amp;quot;Loaded Dired customisation&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;activating-windmove-to-facilitate-hydras&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Activating windmove to facilitate Hydras&lt;/h3&gt;

&lt;p&gt;Super would actually be a good option. However, this interferes with default configurations in MS Windows, especially while using virtualbox. Using Meta for now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(windmove-default-keybindings &#39;meta)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;export-async&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Export async&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-14 Thu 16:03] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This requires a separate init file to be setup that enables Emacs to launch a separate process to export large files. It would be better as a vanilla emacs file.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq org-export-async-init-file
      (expand-file-name &amp;quot;async-export.el&amp;quot; user-emacs-directory)
      )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ob-async&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Ob-async&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-14 Thu 16:02] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This should enable evaluating code in org babel source blocks asynchronously. The header in the source block should have the async enabled.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package ob-async
  :ensure t
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;auto-saving-all-org-files-by-the-hour&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Auto saving all org files by the hour&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-05 Fri 11:49] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
On the mac, this seems to be saving for each house since the time specified ? This behavior needs to be checked out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is adopted from &lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Bernt Hansen&amp;rsquo;s&lt;/a&gt; configuration. Essentially, all the org buffers are saved 1 minute before the hour, every hour.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(run-at-time &amp;quot;00:59&amp;quot; 3600 &#39;org-save-all-org-buffers)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;tags-setup&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Tags setup&lt;/h3&gt;

&lt;p&gt;Borrowing &lt;a href=&#34;https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-tags.el&#34; target=&#34;_blank&#34;&gt;Kaushal modi&amp;rsquo;s setup&lt;/a&gt; for tags. I will start with using gtags and expand later to ctags.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;;; gtags, GNU global

(when (executable-find &amp;quot;global&amp;quot;)
;;;; ggtags
  ;; https://github.com/leoliu/ggtags
  (use-package ggtags
    :config
    (progn
      (setq ggtags-update-on-save nil) ;Don&#39;t try to update GTAGS on each save; makes the system sluggish for huge projects.
      (setq ggtags-highlight-tag nil)  ;Don&#39;t auto-highlight tag at point.. makes the system really sluggish!
      (setq ggtags-sort-by-nearness nil) ; Enabling nearness requires global 6.5+
      (setq ggtags-navigation-mode-lighter nil)
      (setq ggtags-mode-line-project-name nil)
      (setq ggtags-oversize-limit (* 30 1024 1024)) ; 30 MB

      (dolist (hook &#39;(verilog-mode-hook
                      c-mode-hook))
        (add-hook hook #&#39;ggtags-mode))

      ;; Don&#39;t consider ` (back quote) as part of `tag&#39; when looking for a
      ;; Verilog macro definition
      (defun ggtags-tag-at-point ()
        (pcase (funcall ggtags-bounds-of-tag-function)
          (`(,beg . ,end)
           (if (eq ?` (string-to-char (buffer-substring beg end)))
               ;; If `(buffer-substring beg end)&#39; returns &amp;quot;`uvm_info&amp;quot; (for example),
               ;; discard the ` and return just &amp;quot;uvm_info&amp;quot;
               (buffer-substring (1+ beg) end)
             ;; else return the whole `(buffer-substring beg end)&#39;
             (buffer-substring beg end)))))

      ;; Remove the default binding for `M-.&#39; in `ggtags-mode-map&#39;
      (bind-key &amp;quot;M-.&amp;quot; nil ggtags-mode-map)
      ;; Remove the default binding for `M-o&#39; in `ggtags-navigation-map&#39;
      (bind-key &amp;quot;M-o&amp;quot; nil ggtags-navigation-map)

      (key-chord-define-global &amp;quot;??&amp;quot; #&#39;ggtags-show-definition))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;icicles&#34;&gt;&lt;span class=&#34;org-todo todo TEST&#34;&gt;TEST&lt;/span&gt; Icicles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-28 Thu 16:01] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
The default key bindings of icicles changes the org source block edit shortcut. However, the package appears very interesting so far, if not a bit slow to respond. Switching over to icicles will need some research for making sure none of the existing keybindings and workflows are crippled. This package cannot be installed via Melpa. The easiest method appears to be to download the files as a zip folder from the &lt;a href=&#34;https://github.com/emacsmirror/icicles&#34; target=&#34;_blank&#34;&gt;icicle git repository&lt;/a&gt;. The automatic install script draws files from the Emacs wiki, which at times may be down. As such icicles can be switched off by using &lt;code&gt;M-x icy-mode&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(load &amp;quot;~/scimax/user/external_packages/icicles-install.el&amp;quot;)
(setq icicle-download-dir &amp;quot;~/scimax/user/external_packages/icicle_packages/&amp;quot;)
(add-to-list &#39;load-path &amp;quot;~/scimax/user/external_packages/icicle_packages/&amp;quot;)
(require &#39;icicles)
(icy-mode 1)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;erc&#34;&gt;erc&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-10-23 Wed 09:15] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
I&amp;rsquo;m currently using weechat over tmux, but there are great conveniences in using erc. It is possible then to capture conversation and make notes more easily.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Base config setting the channels that I would like frequent. I have actually had enjoyable experiences chatting with the Emacs and coding whizzes in the Emacs channel.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package erc
  :config
  (setq erc-hide-list &#39;(&amp;quot;PART&amp;quot; &amp;quot;QUIT&amp;quot; &amp;quot;JOIN&amp;quot;))
  (setq erc-autojoin-channels-alist &#39;((&amp;quot;freenode.net&amp;quot;
                                       &amp;quot;#org-mode&amp;quot;
                                       &amp;quot;#emacs&amp;quot;
                                       &amp;quot;#emacs-beginners&amp;quot;
                                       &amp;quot;#docker&amp;quot;))
        erc-server &amp;quot;irc.freenode.net&amp;quot;
        erc-nick &amp;quot;shrysr&amp;quot;)
  (setq erc-fill-static-center t)

  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Loading ERC without password (temporarily). The password has to be set in the .authconfig file and encrypted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt; (erc
   :server &amp;quot;irc.freenode.net&amp;quot;
   :port 6667
   :nick &amp;quot;shrysr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scheme-setup&#34;&gt;Scheme setup&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-10-23 Wed 09:21] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
I used this briefly during a foray into the SICP course.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;ul&gt;
&lt;li&gt;References

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://praveen.kumar.in/2011/03/06/gnu-emacs-and-mit-scheme-on-mac-os-x/&#34; target=&#34;_blank&#34;&gt;http://praveen.kumar.in/2011/03/06/gnu-emacs-and-mit-scheme-on-mac-os-x/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq scheme-program-name &amp;quot;/Applications/MIT-GNU-Scheme.app/Contents/Resources/mit-scheme&amp;quot;)
(require &#39;xscheme)

(message &amp;quot;Loaded scheme setup&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lintr&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; lintr&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-11 Mon 07:21] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
It appears there is no package called lintr. This needs further investigation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This package is deemed necessary to enable flymake in ESS. Without it, there is significantly more lag while the suggestions / corrections are generated in ESS modes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package lintr
  :ensure nil
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;better-defaults&#34;&gt;Better defaults&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-08-28 Wed 13:45] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Disabling this package until it is explored better.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I need to explore the changed made by this package. For now, it is loaded right in the beginning so that it does not overwrite other customisations down the line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package better-defaults
  :ensure t
)

(message &amp;quot;Loaded better-defaults package&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pdf-tools&#34;&gt;&lt;span class=&#34;org-todo done STABLE&#34;&gt;STABLE&lt;/span&gt; PDF Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-10-23 Wed 09:26] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This appears to be setup via scimax already. Disabling for now.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-18 Mon 14:30] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Install epdfinfo via &amp;lsquo;brew install pdf-tools&amp;rsquo; and then install the
pdf-tools elisp via the use-package below. To upgrade the epdfinfo
server, use &amp;lsquo;brew upgrade pdf-tools&amp;rsquo; prior to upgrading to newest
pdf-tools package using Emacs package system. If things get messed up,
just do &amp;lsquo;brew uninstall pdf-tools&amp;rsquo;, wipe out the elpa pdf-tools
package and reinstall both as at the start.  source:
&lt;a href=&#34;https://emacs.stackexchange.com/questions/13314/install-pdf-tools-on-emacs-macosx&#34; target=&#34;_blank&#34;&gt;https://emacs.stackexchange.com/questions/13314/install-pdf-tools-on-emacs-macosx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--listend--&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package pdf-tools
  :ensure t
  :config
  (custom-set-variables
   &#39;(pdf-tools-handle-upgrades nil)) ; Use brew upgrade pdf-tools instead in the mac
  (setq pdf-info-epdfinfo-program &amp;quot;/usr/local/bin/epdfinfo&amp;quot;)
  (pdf-tools-install)
)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;elfeed-customisation&#34;&gt;Elfeed customisation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-09-25 Wed 14:09] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Scimax&amp;rsquo;s elfeed is enabled, along with elfeed-org and elfeeed-goodies&lt;/li&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-08 Mon 08:10] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
Disabling elfeed for now.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;elfeed-basic-plus-customisations&#34;&gt;Elfeed Basic + Customisations&lt;/h4&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://heikkil.github.io/blog/2015/05/09/notes-from-elfeed-entries/&#34; target=&#34;_blank&#34;&gt;http://heikkil.github.io/blog/2015/05/09/notes-from-elfeed-entries/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Elfeed configuration source :
(use-package elfeed
  :bind (:map elfeed-search-mode-map
              (&amp;quot;A&amp;quot; . bjm/elfeed-show-all)
              (&amp;quot;E&amp;quot; . bjm/elfeed-show-emacs)
              (&amp;quot;D&amp;quot; . bjm/elfeed-show-daily)
              (&amp;quot;q&amp;quot; . bjm/elfeed-save-db-and-bury))
  :init
  (setq my/default-elfeed-search-filter &amp;quot;@1-month-ago +unread !sport &amp;quot;)
  (setq-default elfeed-search-filter my/default-elfeed-search-filter)
  (setq elfeed-db-direcory &amp;quot;~/scimax/user/elfeeddb&amp;quot;)
  :config
  (elfeed-org)
  (elfeed-goodies/setup)
  (setq elfeed-use-curl t)

  ;;
  ;; linking and capturing
  ;;

  (defun elfeed-link-title (entry)
    &amp;quot;Copy the entry title and URL as org link to the clipboard.&amp;quot;
    (interactive)
    (let* ((link (elfeed-entry-link entry))
           (title (elfeed-entry-title entry))
           (titlelink (concat &amp;quot;[[&amp;quot; link &amp;quot;][&amp;quot; title &amp;quot;]]&amp;quot;)))
      (when titlelink
        (kill-new titlelink)
        (x-set-selection &#39;PRIMARY titlelink)
        (message &amp;quot;Yanked: %s&amp;quot; titlelink))))

  ;; show mode

  (defun elfeed-show-link-title ()
    &amp;quot;Copy the current entry title and URL as org link to the clipboard.&amp;quot;
    (interactive)
    (elfeed-link-title elfeed-show-entry))

  (defun elfeed-show-quick-url-note ()
    &amp;quot;Fastest way to capture entry link to org agenda from elfeed show mode&amp;quot;
    (interactive)
    (elfeed-link-title elfeed-show-entry)
    (org-capture nil &amp;quot;n&amp;quot;)
    (yank)
    (org-capture-finalize))

  (bind-keys :map elfeed-show-mode-map
             (&amp;quot;l&amp;quot; . elfeed-show-link-title)
             (&amp;quot;v&amp;quot; . elfeed-show-quick-url-note))

  ;; search mode

  (defun elfeed-search-link-title ()
    &amp;quot;Copy the current entry title and URL as org link to the clipboard.&amp;quot;
    (interactive)
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
               when (elfeed-entry-link entry)
               do (elfeed-link-title entry))))

  (defun elfeed-search-quick-url-note ()
    &amp;quot;In search mode, capture the title and link for the selected
     entry or entries in org aganda.&amp;quot;
    (interactive)
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
               do (elfeed-untag entry &#39;unread)
               when (elfeed-entry-link entry)
               do (elfeed-link-title entry)
               do (org-capture nil &amp;quot;n&amp;quot;)
               do (yank)
               do (org-capture-finalize)
               (mapc #&#39;elfeed-search-update-entry entries))
      (unless (use-region-p) (forward-line))))

  (bind-keys :map elfeed-search-mode-map
             (&amp;quot;l&amp;quot; . elfeed-search-link-title)
             (&amp;quot;v&amp;quot; . elfeed-search-quick-url-note))

   ;;functions to support syncing .elfeed between machines
  ;;makes sure elfeed reads index from disk before launching
  (defun bjm/elfeed-load-db-and-open ()
    &amp;quot;Wrapper to load the elfeed db from disk before opening&amp;quot;
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun bjm/elfeed-save-db-and-bury ()
    &amp;quot;Wrapper to save the elfeed db to disk before burying buffer&amp;quot;
    (interactive)
    (elfeed-db-save)
    (quit-window))
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;scimax-plus-elfeed-org-and-elfeed-goodies-setup&#34;&gt;Scimax + Elfeed-org and elfeed-goodies setup &lt;code&gt;[/]&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Using an org source is the easiest way to organise my RSS feeds for reading with Elfeed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;scimax-elfeed)

;; use an org file to organise feeds
(use-package elfeed-org
  :ensure t
  :config
  (setq rmh-elfeed-org-files (list &amp;quot;~/my_org/elfeed.org&amp;quot;))
  )

(use-package elfeed-goodies
  :ensure t
  :init
  (elfeed-goodies/setup)
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;consider-storing-the-feed-sources-here-in-org-format&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Consider storing the Feed sources here in org format&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-17 Sun 18:11] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
This will need an export to a source org file per the settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;loading-completed-1&#34;&gt;Loading completed&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(message &amp;quot;Loaded Elfeed customisations&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ediff&#34;&gt;ediff&lt;/h3&gt;

&lt;p&gt;I have to diff between org files pretty often, and need the headings to be unfolded.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://emacs.stackexchange.com/questions/21335/prevent-folding-org-files-opened-by-ediff&#34; target=&#34;_blank&#34;&gt;http://emacs.stackexchange.com/questions/21335/prevent-folding-org-files-opened-by-ediff&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Check for org mode and existence of buffer
(defun f-ediff-org-showhide (buf command &amp;amp;rest cmdargs)
  &amp;quot;If buffer exists and is orgmode then execute command&amp;quot;
  (when buf
    (when (eq (buffer-local-value &#39;major-mode (get-buffer buf)) &#39;org-mode)
      (save-excursion (set-buffer buf) (apply command cmdargs)))))

(defun f-ediff-org-unfold-tree-element ()
  &amp;quot;Unfold tree at diff location&amp;quot;
  (f-ediff-org-showhide ediff-buffer-A &#39;org-reveal)
  (f-ediff-org-showhide ediff-buffer-B &#39;org-reveal)
  (f-ediff-org-showhide ediff-buffer-C &#39;org-reveal))

(defun f-ediff-org-fold-tree ()
  &amp;quot;Fold tree back to top level&amp;quot;
  (f-ediff-org-showhide ediff-buffer-A &#39;hide-sublevels 1)
  (f-ediff-org-showhide ediff-buffer-B &#39;hide-sublevels 1)
  (f-ediff-org-showhide ediff-buffer-C &#39;hide-sublevels 1))

(add-hook &#39;ediff-select-hook &#39;f-ediff-org-unfold-tree-element)
(add-hook &#39;ediff-unselect-hook &#39;f-ediff-org-fold-tree)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;spell-checking&#34;&gt;Spell Checking&lt;/h3&gt;

&lt;h4 id=&#34;flycheck&#34;&gt;Flycheck&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-02-09 Sat 11:51] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
disabling flycheck for the moment and enabling flymake&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://writequit.org/org/&#34; target=&#34;_blank&#34;&gt;https://writequit.org/org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basic config&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package flycheck
  :defer 5
  :bind ((&amp;quot;M-g M-n&amp;quot; . flycheck-next-error)
         (&amp;quot;M-g M-p&amp;quot; . flycheck-previous-error)
         (&amp;quot;M-g M-=&amp;quot; . flycheck-list-errors))
  :init (global-flycheck-mode)
  :diminish flycheck-mode
  :config
  (progn
    (setq-default flycheck-disabled-checkers &#39;(emacs-lisp-checkdoc json-jsonlint json-python-json ess iess))
    (use-package flycheck-pos-tip
      :init (flycheck-pos-tip-mode))
    (use-package helm-flycheck
      :init (define-key flycheck-mode-map (kbd &amp;quot;C-c ! h&amp;quot;) &#39;helm-flycheck))
    (use-package flycheck-haskell
      :init (add-hook &#39;flycheck-mode-hook #&#39;flycheck-haskell-setup))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;enabling-flyspell&#34;&gt;Enabling Flyspell&lt;/h4&gt;

&lt;p&gt;Reference: &lt;a href=&#34;https://alhassy.github.io/init/&#34; target=&#34;_blank&#34;&gt;https://alhassy.github.io/init/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Org mode is derived from text mode, therefore it is sufficient to activate for text mode.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package flyspell
  :hook (
           (prog-mode . flyspell-prog-mode)
           (text-mode . flyspell-mode))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;replacing-flycheck-with-flymake&#34;&gt;Replacing flycheck with flymake&lt;/h4&gt;

&lt;p&gt;This is especially for python modules at the moment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(when (require &#39;flycheck nil t)
  (setq elpy-modules (delq &#39;elpy-module-flymake elpy-modules))
  (add-hook &#39;elpy-mode-hook &#39;flycheck-mode))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;switching-to-aspell-on-the-mac&#34;&gt;&lt;span class=&#34;org-todo done STABLE&#34;&gt;STABLE&lt;/span&gt; Switching to aspell on the mac&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Note taken on &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2019-07-12 Fri 20:22] &lt;/span&gt;&lt;/span&gt; &lt;br /&gt;
So far this is working out rather well, and as expected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Facing trouble enabling flyspell in the mac. This seems to be a solution, as outlined in &lt;a href=&#34;https://stackoverflow.com/questions/19022015/emacs-on-mac-os-x-how-to-get-spell-check-to-work&#34; target=&#34;_blank&#34;&gt;this SO discussion&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(if (system-type-is-darwin)
    (setq ispell-program-name &amp;quot;/usr/local/Cellar/aspell/0.60.6.1_1/bin/aspell&amp;quot;)
  )

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>An SSD can breathe life into old computers</title>
      <link>https://shreyas.ragavan.co/post/01252410-853f-4570-858f-f3d609f5def5/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://shreyas.ragavan.co/post/01252410-853f-4570-858f-f3d609f5def5/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s a well known trick that installing a &lt;a href=&#34;https://www.storagereview.com/ssd_vs_hdd&#34; target=&#34;_blank&#34;&gt;SSD&lt;/a&gt; in place of the
conventional Hard disk can breathe new life into very old machines. My
mid 2010 Macbook Pro is one such example, being over 8 years old.&lt;/p&gt;

&lt;p&gt;In particular, within Emacs - &lt;code&gt;mu4e&lt;/code&gt; responds much more quickly and there is
significantly less lag in searching / accessing emails and &lt;code&gt;HTML&lt;/code&gt; rendering.&lt;/p&gt;

&lt;p&gt;The other advantage of using a Mac over Linux is that installation and
setup instructions are more often available out the box for the Mac OS
(though this is changing). I have access to dedicated apps including
Evernote, Dash, Spotify, Whatsap, Slack etc on my Mac. This is in
addition to several other high quality apps on the App store.&lt;/p&gt;

&lt;p&gt;I do love using Arch Linux and Antergos and the packing management and
rolling OS upgrades are totally cool. However, a little bit of
elegance in the user interface and hardware (being available out of
the box) does ease up the mind and progress. It takes quite a bit of
effort to achieve that unless you are at the level of purely using
&lt;a href=&#34;http://www.howardism.org/Technical/Emacs/new-window-manager.html&#34; target=&#34;_blank&#34;&gt;Emacs as window manager&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the Mac, it is easy to move around virtual desktops and use the
magic track pad to rapidly switch between applications as well. I&amp;rsquo;m
sure many of these &amp;lsquo;gimmicks&amp;rsquo; may be setup with diligence and due time
on Linux through solutions with varying levels of quality.&lt;/p&gt;

&lt;p&gt;However, as of today : it&amp;rsquo;s likely I would have struggled with some
aspects on Linux that are readily available on other systems. Evernote
is an example. After hours of searching for an alternate (and
acceptable) solution for software packages that are not yet ported to
Linux, I would quite possibly end up making a compromise. Typically,
the compromises would mean using Electron or Web based versions of
apps, which are often not as powerful as the desktop app, not to
mention inconvenient. A prime example would be Evernote, on Arch
Linux. Some other examples are apps like Word, Pages, Outlook and Excel and
so on, which are more critical.&lt;/p&gt;

&lt;p&gt;Ultimately, my preference would be to use a Mac as my daily driver and
play around with Linux on a back up computer. In any case, multiple
Linux distros can be run on &lt;a href=&#34;https://www.virtualbox.org/&#34; target=&#34;_blank&#34;&gt;Virtual Box&lt;/a&gt; within the Mac.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting productive - an exploration into holistic task management</title>
      <link>https://shreyas.ragavan.co/post/2b0b2c79-3f6e-4079-a07d-9e382fda8954/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://shreyas.ragavan.co/post/2b0b2c79-3f6e-4079-a07d-9e382fda8954/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;To integrate tasks, reminders, notes, coding workflow into a single
framework is no easy challenge. Org mode and Emacs help you do just
that.&lt;/p&gt;

&lt;p&gt;After trying out several tools, IMHO : &lt;a href=&#34;https://todoist.com&#34; target=&#34;_blank&#34;&gt;Todoist&lt;/a&gt; offers the best bang
for your buck, especially with it&amp;rsquo;s natural language parsing ability,
smooth and reliable sync as well as its multi-platform
availability. Many describe &lt;a href=&#34;https://www.omnigroup.com/omnifocus&#34; target=&#34;_blank&#34;&gt;Omnifocus&lt;/a&gt; to be the king of task
management tools, with dedicated apps for different purposes and
probably well integrated.&lt;/p&gt;

&lt;p&gt;My journey veered away from Omnifocus since it is limited to the Apple
platform and this is obviously a serious handicap for people (like me)
who are often forced to use multiple operating systems and devices
distributed between personal and work environments.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d religiously managed my tasks on Todoist for over a year via the
Chrome extensions/add-ins, the stand alone apps on Windows and the
Mac, and on Android as well as iOS.&lt;/p&gt;

&lt;p&gt;However, there was something missing in terms of being able to truly
capture it all. This led me to &lt;a href=&#34;https://www.gnu.org/s/emacs/&#34; target=&#34;_blank&#34;&gt;Emacs&lt;/a&gt;. My search is summarised in this
article.&lt;/p&gt;

&lt;h1 id=&#34;needs-versus-the-software-development&#34;&gt;Needs versus the software development&lt;/h1&gt;

&lt;p&gt;The real problem surfaced when my needs evolved at a pace and
specificity that a general software&amp;rsquo;s development could not cater
to. The problem is characterized by an endless wait for seemingly
simple features that could make a phenomenal difference to personal
workflow and productivity. This feature may range from a small tweak or
bugfix to a rewiring of the basic behavior of the program itself.&lt;/p&gt;

&lt;p&gt;Additionally, the proprietary format of tasks/notes and entries in
Todoist or even Evernote is not a comforting aspect. On the other
hand, using a simple text file with lists of work or notes is too
simplistic to address a complex problem.&lt;/p&gt;

&lt;p&gt;However, the issue could be resolved when the simple and ubiquitous
Text file is parsed by a system like Org mode with in built and novel
routines to filter and present the data in the text file in a very
useful. Ultimately the key factor is that the workflow and output can
be completely customised as required.&lt;/p&gt;

&lt;h1 id=&#34;things-i-d-like-from-a-task-management-tool&#34;&gt;Things I&amp;rsquo;d like from a task management tool:&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Rapid and seamless Task/Note taking ability -  could be generic, or specific to a particular project/task.&lt;/li&gt;
&lt;li&gt;Quick capturing of links and snippets from websites and emails&lt;/li&gt;
&lt;li&gt;Consistent experience across multiple platforms and very fast sync.&lt;/li&gt;
&lt;li&gt;Ability to manage personal or work related projects&lt;/li&gt;
&lt;li&gt;A date management system with atleast reasonably good understanding
of natural language&lt;/li&gt;
&lt;li&gt;Refiling tasks/notes very easily across main tasks or categories or
projects&lt;/li&gt;
&lt;li&gt;Customisable Views of the task summary along with the deadlines&lt;/li&gt;
&lt;li&gt;Task and Note search and filtering at every level possible&lt;/li&gt;
&lt;li&gt;Ability to easily export notes to multiple formats and write in
some form of markup language so as to take care of formatting on
the go.&lt;/li&gt;
&lt;li&gt;Preferably an all-in-one tool for managing notes, all kinds of
writing, research, tasks, recurring reminders, maintaining an
activity log/journal, project summaries .. etc.&lt;/li&gt;
&lt;li&gt;Includes &amp;lsquo;clocking&amp;rsquo; abilities for tasks.&lt;/li&gt;
&lt;li&gt;Fast keyboard based shortcuts and &amp;lsquo;bookmarks&amp;rsquo; to do all that is required.&lt;/li&gt;
&lt;li&gt;Recording tasks or notes from the phone, while on the go.&lt;/li&gt;
&lt;li&gt;Should have the lightest footprint possible in terms of time spent
on the tool, as well as system resources with no compromise in benefits derived.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;can-it-be-achieved&#34;&gt;Can it be achieved?&lt;/h1&gt;

&lt;p&gt;Short answer: Yes. Through Emacs.&lt;/p&gt;

&lt;p&gt;Sure, several of the above points can be done in Todoist and other tools, in
one way or via combining different services.&lt;/p&gt;

&lt;p&gt;However, a holistic consideration of the above points indicate a
system that is a cross between Todoist and Evernote, capable of being
utilised for a multitude of purposes : a customised GTD workflow plus
an organiser for notes or writings. Point no 9, could serve to be a
concise but incomplete statement of Orgmode&amp;rsquo;s capabilities, and is a
stark reminder of Todoist&amp;rsquo;s specific expertise in only task
management. Additionally, the above points can be done in orgmode,
&lt;em&gt;very&lt;/em&gt;, &lt;em&gt;very&lt;/em&gt; quickly. Evernote has a great system, but is not as fast,
because it indexes a huge variety of content. &lt;sup&gt;&lt;a id=&#34;fnr.1&#34; class=&#34;footref&#34; href=&#34;#fn.1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h1 id=&#34;examples-of-workflows&#34;&gt;Examples of workflows&lt;/h1&gt;

&lt;p&gt;Lets say that while typing up a project summary, I remember an
additional task for another project or perhaps need to note down a
snippet of generic information. To compensate for the lack of a
photographic memory without breaking my on-going workflow - I need to
be able to store the task/note/idea in a place that I can easily look
up for further processing.&lt;/p&gt;

&lt;p&gt;Such an activity is not at all streamlined with Todoist, and
definitely not so with Evernote. With Org mode its just a &lt;code&gt;C-c c&lt;/code&gt;, or
Control + c and hit c again. Optionally, a &lt;code&gt;C-cw&lt;/code&gt; for refiling the note
on the spot if desired. When I hit refile - I can search through my
org headings or projects and place the newly captured item exactly
where it should be.&lt;/p&gt;

&lt;p&gt;Once accustomed to the speed of recording stuff with Org-capture, along
with the myriad possibilities of auto-save, backups, moving the cursor
to the last location you were at, switching to another
document/heading at lightning speed and etc - it will be hard to find
another system that is truly competitive.&lt;/p&gt;

&lt;p&gt;Project management via Emacs using the excellent &lt;a href=&#34;https://github.com/bbatsov/projectile&#34; target=&#34;_blank&#34;&gt;projectile&lt;/a&gt; package
can enable you to find information at a speed that is very pleasing. I
have often needed to deal with several customers of different kinds,
thoroughly understand their requirements, resolve technical and
commercial ambiguities and be able to refer to earlier jobs where
something was agreed upon. I&amp;rsquo;ve often worked in projects with a
bewildering number of aspects to take care of, along with sporadic
infusions of information which could be clarifications or even new
information altogether.&lt;/p&gt;

&lt;p&gt;Included in project / productivity /relationship management are
several subsets of activities like Minutes of Meetings (MOM&amp;rsquo;s),
summaries of travel/visits to the customer, telephonic discussions,
indications of future projects as well as generic or specific
problems.&lt;/p&gt;

&lt;p&gt;Using Org mode, it is possible create customised workflows and
templates to manage all the above aspects, more than any other note
taking system, including only handwritten notes. An excellent,
comprehensive overview can be found in &lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Bert Hansen&amp;rsquo;s article&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;everybody-s-needs-are-unique&#34;&gt;Everybody&amp;rsquo;s needs are unique&lt;/h1&gt;

&lt;p&gt;Eventually, I guess we all come to realise the fact that each human
being is truly unique. Each one of us have our own ways of thinking, being
and approaching problems.&lt;/p&gt;

&lt;p&gt;While Todoist worked very well for me - I was still bothered by being
constrained by it&amp;rsquo;s proprietary format and the lack of a lifetime
membership with a one time payment. Money spent should give me a tool
that brings supreme value and satisfaction with it. It was also
tiresome to take detailed notes on tasks and rely on a separate
Simplenote/Evernote system via Sublime Text for this purpose. You may
have a different viewpoint. You may want a great GUI design and
app that works well on your phone in addition to other
environments. &lt;sup&gt;&lt;a id=&#34;fnr.2&#34; class=&#34;footref&#34; href=&#34;#fn.2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Orgmode is more aligned to people who prefer to get most of their work
done on their computers, who are or atleast don&amp;rsquo;t mind being keyboard
shortcut freaks and those who would like to take the effort to learn a
souped up text editor like Emacs that can evolve to cover a lot of
needs efficiently. It&amp;rsquo;s not going to work well for people who need a
reminder to pop up on their phones, with a fancy GUI and those who
expect a software to work extremely well right out of the
box. However, this &lt;em&gt;is&lt;/em&gt; Org mode and Emacs&amp;#x2026;. there are ways to sync
your iOS / outlook calendar with orgmode&amp;rsquo;s calendar, or with
wunderlist or Toodledo. Anything is possible, but it just won&amp;rsquo;t be via
some classy GUI..&lt;/p&gt;

&lt;h1 id=&#34;concluding-points&#34;&gt;Concluding points&lt;/h1&gt;

&lt;p&gt;While it may seem daunting at first - the feeling of being able to
search through existing notes to know whether you have met this
particular thought/aspect before, can be extremely valuable and very
satisfying. There are people like &lt;a href=&#34;http://sachachua.com/blog/&#34; target=&#34;_blank&#34;&gt;Sacha Chua&lt;/a&gt; and &lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34; target=&#34;_blank&#34;&gt;Bert Hansen&lt;/a&gt;, who&amp;rsquo;ve
built complex, efficient, and beautiful workflows through which a
great deal of achievement has been made possible using the resulting
streamlined tool. As &lt;a href=&#34;http://calnewport.com/&#34; target=&#34;_blank&#34;&gt;Cal Newport&lt;/a&gt; often reiterates in his blog and
exploration on productivity - it is important to be able to accurately
quantify the time being spent on different things. The &lt;a href=&#34;https://github.com/emacs-tw/awesome-emacs&#34; target=&#34;_blank&#34;&gt;awesome-emacs&lt;/a&gt;
list on github offers several worthy resources, along with the
excellent &lt;a href=&#34;http://planet.emacsen.org/&#34; target=&#34;_blank&#34;&gt;Planet Emacsen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The organiser tool by itself should have the lightest possible
footprint in terms of the time taken to enter in stuff. Certainly -
most people spend a lifetime in customising emacs and that may seem
contrary to the previous point. However, it is possible to quickly
reach a certain point that results in a marked improvement in
productivity and workflow. Beyond this, leisure time can always be
spent in fine-tuning the basic setup and understanding the code better.&lt;/p&gt;

&lt;p&gt;The customisation options with Emacs and Org mode are literally
endless and constrained only by programming skills, or Googling skills
to find the code snippet that can get your work done, not to mention
social skills in getting help via online communities. This is actually
a lot easier than it sounds. While a bunch of people would call this a
weakness, there are a large number of people who see the value in a
customised tool which will evolve to facilitate a very fast and
efficient workflow.&lt;/p&gt;

&lt;p&gt;Deliberate practise towards improvement is certainly boosted when one
is able to work consistently in a environment customised to needs and
workflows. Using Org mode and Emacs is a firm step in this direction.&lt;/p&gt;

&lt;h1 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h1&gt;

&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.1&#34; href=&#34;#fnr.1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; While Org mode is optimised for text, it is possible to attach
any kind of file to a &amp;lsquo;heading&amp;rsquo;, and use interleave and other
techniques to browse and annotate PDF&amp;rsquo;s. The possibilities are too
numerous to be covered in a blog post or a single google search.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.2&#34; href=&#34;#fnr.2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; On iOS - I&amp;rsquo;ve found &lt;a href=&#34;http://agiletortoise.com/drafts/&#34; target=&#34;_blank&#34;&gt;Drafts&lt;/a&gt; is a great app for writing
fast and appending the notes to an org file, which can be refiled
later, using emacs. One problem I&amp;rsquo;m yet to resolve is that
appending to an org file in dropbox, requires a network/internet
connection. There should be a way to deal with situations without
handy internet available.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
