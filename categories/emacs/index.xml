<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on Shreyas Ragavan</title>
    <link>https://shrysr.github.io/categories/emacs/</link>
    <description>Recent content in Emacs on Shreyas Ragavan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Fri, 25 Jan 2019 14:59:00 -0700</lastBuildDate>
    
	<atom:link href="https://shrysr.github.io/categories/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why bother with Emacs and workflows?</title>
      <link>https://shrysr.github.io/post/11ef85e6-9efc-4af4-b5f3-7648f9ee9308/</link>
      <pubDate>Fri, 25 Jan 2019 14:59:00 -0700</pubDate>
      
      <guid>https://shrysr.github.io/post/11ef85e6-9efc-4af4-b5f3-7648f9ee9308/</guid>
      <description>I&amp;rsquo;ve written several posts on different ways and tools available to aid productivity, and probably a lot about Emacs. My background is in computational physics, and not in programming, and yet Emacs has been an indispensable driver of my daily workflow for the past 3 years.
The fact is that knowing Emacs (or Vim), or having a custom configuration is not a wildly marketable skill, nor is it mandatory to achieve spectacular results.</description>
    </item>
    
    <item>
      <title>Rapidly accessing cheatsheets to learn data science with Emacs</title>
      <link>https://shrysr.github.io/post/e86e171e-cc0d-4957-b587-ed2bbf36a8cf/</link>
      <pubDate>Sat, 19 Jan 2019 20:02:00 -0700</pubDate>
      
      <guid>https://shrysr.github.io/post/e86e171e-cc0d-4957-b587-ed2bbf36a8cf/</guid>
      <description>Matt Dancho&amp;rsquo;s course DSB-101-R is an awesome course to step into ROI driven business analytics fueled by Data Science. In this course, among many other things - he teaches methods to understand and use cheatsheets to gain rapid level-ups, especially to find information connecting various packages and functions and workflows. I have been hooked to this approach and needed a way to quickly refer to the different cheatsheets as needed.</description>
    </item>
    
    <item>
      <title>Juggling multiple projects and leveraging org-projectile</title>
      <link>https://shrysr.github.io/post/8f702ce2-8bb7-40a3-b44b-a47222c02909/</link>
      <pubDate>Fri, 25 Jan 2019 14:44:00 -0700</pubDate>
      
      <guid>https://shrysr.github.io/post/8f702ce2-8bb7-40a3-b44b-a47222c02909/</guid>
      <description>Scimax has a convenient feature of immediately creating projects (M-x nb-new). The location of the project directory is defined by the setting (setq nb-notebook-directory &amp;quot;~/my_projects/&amp;quot;), which has to be set in your Emacs config. Once the name of the project is chosen, a Readme.org buffer is immediately opened and one can start right away. It is an awesome, friction-free method to get started with a project.
These projects are automatically initialised as git repositories, to which it is trivial to add a new remote using Magit.</description>
    </item>
    
    <item>
      <title>Jupyter notebooks to Org source &#43; Tower of Babel</title>
      <link>https://shrysr.github.io/post/0b63f316-6f6b-4ec2-84a4-5ff287ecf7a7/</link>
      <pubDate>Fri, 25 Jan 2019 14:44:00 -0700</pubDate>
      
      <guid>https://shrysr.github.io/post/0b63f316-6f6b-4ec2-84a4-5ff287ecf7a7/</guid>
      <description>This post provides a simple example demonstrating how a shell script can be called with appropriate variables from any Org file in Emacs. The script essentially converts a Jupyter notebook to Org source, and Babel is leveraged to call the script with appropriate variables from any Org file. This reddit thread and blog post elucidate the advantages of using Babel and Org mode over Jupyter notebooks.
Directly editing code in a Jupyter notebook in a browser is not an attractive long term option and is inconvenient even in the short term.</description>
    </item>
    
    <item>
      <title>Emacs notes: Select paragraph and browse-kill-ring for effective content capture</title>
      <link>https://shrysr.github.io/post/2d1b3227-28de-4b30-93c8-ad5cbe276e44/</link>
      <pubDate>Fri, 25 Jan 2019 14:45:00 -0700</pubDate>
      
      <guid>https://shrysr.github.io/post/2d1b3227-28de-4b30-93c8-ad5cbe276e44/</guid>
      <description>I like to have any reading material and my notes side by side1. This is easily done with Emacs by splitting the buffer vertically (C-x 3)2
For example: Once a link has been opened via w3m, I hit org-capture (C-c) with a preset template that grabs the URL to the article along with the created date in the properties, with the cursor in position ready to take notes.
(setq org-capture-templates &#39;((&amp;quot;l&amp;quot; &amp;quot;Link + notes&amp;quot; entry (file+headline &amp;quot;~/my_org/link_database.</description>
    </item>
    
    <item>
      <title>Iosevka - an awesome font for Emacs</title>
      <link>https://shrysr.github.io/post/951004ce-add0-4e7e-b6e2-2932e0dee429/</link>
      <pubDate>Sat, 19 Jan 2019 19:22:00 -0700</pubDate>
      
      <guid>https://shrysr.github.io/post/951004ce-add0-4e7e-b6e2-2932e0dee429/</guid>
      <description>Before my foray into Emacs, I purchased applications like IAWriter (classic)1, Marked2, Texts (cross platform Mac/Windows), and have also tried almost all the recommended apps for longer form writing. I am a fan of zen writing apps. In particular the font and environment provided by IAWriter are conducive to focused writing. There also exist apps like Hemingway that also help check the quality of your writing.
Zen writing apps are called so because they have a unique combination of fonts, background color, including line spacing and overall text-width - all of which enable a streamlined and focused flow of words onto the screen.</description>
    </item>
    
    <item>
      <title>Searching the awesome-lists on Github</title>
      <link>https://shrysr.github.io/post/03133c10-709e-4d06-9f3d-c00ffeae64a7/</link>
      <pubDate>Fri, 25 Jan 2019 14:38:00 -0700</pubDate>
      
      <guid>https://shrysr.github.io/post/03133c10-709e-4d06-9f3d-c00ffeae64a7/</guid>
      <description>Discovered the glorious awesome lists today on Github. They are available through a simple search on github, and contain curated lists of resources of all kinds on a multitude of topics.
As one might expect, there is a lot of common ground between these lists, including topics and links.
How could one search for a keyword through all these repositories? I have always wanted search for particular keywords or code snippets in my Emacs configuration files, or in other files in a particular location.</description>
    </item>
    
    <item>
      <title>Literate Programming - Emacs, Howard Abrams and Library of Babel</title>
      <link>https://shrysr.github.io/post/6953c104-a8b3-4779-aad3-c33032beb111/</link>
      <pubDate>Sat, 19 Jan 2019 19:25:00 -0700</pubDate>
      
      <guid>https://shrysr.github.io/post/6953c104-a8b3-4779-aad3-c33032beb111/</guid>
      <description>I&amp;rsquo;m an admirer of Howard Abrams, especially because his posts and videos show the awesome power of doing things in Emacs, and the importance of writing clean and logical code. Watching his videos and reading his posts make me feel like I was born yesterday and I am just getting started. But more importantly, they also fire up my imagination regarding the possibilities out there and the potential to create glorious workflows.</description>
    </item>
    
  </channel>
</rss>