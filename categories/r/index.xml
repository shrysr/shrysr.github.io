<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | Shreyas Ragavan</title>
    <link>https://shreyas.ragavan.co/categories/r/</link>
      <atom:link href="https://shreyas.ragavan.co/categories/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 01 Nov 2019 14:27:00 -0600</lastBuildDate>
    <image>
      <url>https://shreyas.ragavan.co/img/icon-192.png</url>
      <title>R</title>
      <link>https://shreyas.ragavan.co/categories/r/</link>
    </image>
    
    <item>
      <title>Federal R&amp;D Spending on climate change</title>
      <link>https://shreyas.ragavan.co/project/fed-rnd-spending-tt1/</link>
      <pubDate>Fri, 01 Nov 2019 14:27:00 -0600</pubDate>
      <guid>https://shreyas.ragavan.co/project/fed-rnd-spending-tt1/</guid>
      <description>

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is a short exploration into the tidy tuesday dataset focused on the Federal R&amp;amp;D budget towards global climate change. The data has been extracted from a TidyTuesday dataset, which in return is moderately cleaned dataset from publicly available data. The analysis will show that NASA&amp;rsquo;s budget dwarfs the money going into other departments, and that the median spend towards climate change has been increasing since the year 2000.&lt;/p&gt;

&lt;p&gt;Useful links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/shrysr/sr-tidytuesday&#34; target=&#34;_blank&#34;&gt;Github Repo&lt;/a&gt; of Tidy Tuesday explorations&lt;/li&gt;
&lt;li&gt;Tidy tuesday dataset: &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-02-12&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Data Dictionary &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-02-12#data-dictionary&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Viz &lt;a href=&#34;https://twitter.com/ShreyasRagavan/status/1100765886892265472&#34; target=&#34;_blank&#34;&gt;posted on Twitter&lt;/a&gt; to participate in TidyTuesday.&lt;/li&gt;
&lt;li&gt;Tools used: ESS, Org mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://shreyas.ragavan.co/scripts/tt1-fed-rnd.R&#34;&gt;Download R script&lt;/a&gt; : this is the entire script below.&lt;/p&gt;

&lt;h2 id=&#34;loading-libraries&#34;&gt;Loading libraries&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;easypackages&lt;/code&gt; library allows quickly installing and loading multiple packages. &lt;em&gt;Note: Uncomment the appropriate line if this library needs to be installed.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;                                        # Loading libraries
                                        # install.packages(&amp;quot;easypackages&amp;quot;)
library(&amp;quot;easypackages&amp;quot;)
libraries(&amp;quot;tidyverse&amp;quot;, &amp;quot;tidyquant&amp;quot;, &amp;quot;DataExplorer&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;
All packages loaded successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reading-in-the-data&#34;&gt;Reading in the data&lt;/h2&gt;

&lt;p&gt;Since this is a small dataset, the data can be read in directly from Github into memory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;                                        # Reading in data directly from github
climate_spend_raw  &amp;lt;- readr::read_csv(&amp;quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-02-12/climate_spending.csv&amp;quot;, col_types = &amp;quot;cin&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exploring-the-data&#34;&gt;Exploring the data&lt;/h2&gt;

&lt;p&gt;We have 6 departments, and the remaining departments are lumped together as &amp;lsquo;All Other&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;The data is available for the years 2000 to 2017.&lt;/p&gt;

&lt;p&gt;The above can be found using the &lt;code&gt;unique&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;climate_spend_raw$department %&amp;gt;% unique()
climate_spend_raw$year %&amp;gt;% unique()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[1] &amp;quot;NASA&amp;quot;            &amp;quot;NSF&amp;quot;             &amp;quot;Commerce (NOAA)&amp;quot; &amp;quot;Energy&amp;quot;
[5] &amp;quot;Agriculture&amp;quot;     &amp;quot;Interior&amp;quot;        &amp;quot;All Other&amp;quot;

 [1] 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014
[16] 2015 2016 2017
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some Notes on the data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have the following columns:

&lt;ul&gt;
&lt;li&gt;name of the department. (chr)&lt;/li&gt;
&lt;li&gt;year (int)&lt;/li&gt;
&lt;li&gt;spending (double)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The data is relatively clean. However some manipulation is required to summarise the department wise spending.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An overview of missing data can be easily scrutinised using the &lt;code&gt;plot_intro&lt;/code&gt; command, and actual numbers can be extracted using &lt;code&gt;introduce&lt;/code&gt;. These functions are from the &lt;code&gt;DataExplorer&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;##plot_str(climate_spend_raw, type = &#39;r&#39;)
plot_intro(climate_spend_raw)
##introduce(climate_spend_raw)
&lt;/code&gt;&lt;/pre&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyas.ragavan.co/img/plot-intro.png&#34; &gt;
&lt;img src=&#34;https://shreyas.ragavan.co/img/plot-intro.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;


&lt;p&gt;There are no missing values or NA&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;For a quick look at the outliers, we can use a boxplot, using DataExplorer&amp;rsquo;s functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;variance_climate_spend &amp;lt;- plot_boxplot(climate_spend_raw, by = &amp;quot;year&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyas.ragavan.co/img/variance-spend.png&#34; data-caption=&#34;Figure 1: It can be seen above that there are not many outliers. Subsequent visualisations will show that NASA is the most significant outlier. The median spending has been increasing over the years.&#34;&gt;
&lt;img src=&#34;https://shreyas.ragavan.co/img/variance-spend.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 1: It can be seen above that there are not many outliers. Subsequent visualisations will show that NASA is the most significant outlier. The median spending has been increasing over the years.
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;h2 id=&#34;data-conditioning&#34;&gt;Data Conditioning&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note: this initial conditioning need not have involved the date manipulation, as the year extracted from a date object is still a double.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;climate_spend_conditioned &amp;lt;- climate_spend_raw %&amp;gt;%
  mutate(year_dt = str_glue(&amp;quot;{year}-01-01&amp;quot;)) %&amp;gt;%
  mutate(year_dt = as.Date(year_dt)) %&amp;gt;%
  mutate(test_median = median(gcc_spending)) %&amp;gt;%
  mutate(gcc_spending_txt = scales::dollar(gcc_spending,
                                           scale = 1e-09,
                                           suffix = &amp;quot;B&amp;quot;
                                           )
         )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Applying some summary statistics to calculate the total spend per department, per year.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;                                        # Total spend per department per year
climate_spend_dept_y &amp;lt;- climate_spend_conditioned %&amp;gt;%
  group_by(department, year_dt = year(year_dt)) %&amp;gt;%
  summarise(
    tot_spend_dept_y = sum(gcc_spending)) %&amp;gt;%
  mutate(tot_spend_dept_y_txt = tot_spend_dept_y %&amp;gt;%
           scales::dollar(scale = 1e-09,
                          suffix = &amp;quot;B&amp;quot;)
         ) %&amp;gt;%
  ungroup()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets see how much money has been budgeted in each department towards R&amp;amp;D in climate change from 2000 to 2017.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;climate_spend_conditioned %&amp;gt;%
  select(-c(gcc_spending_txt, year_dt)) %&amp;gt;%
  group_by(department) %&amp;gt;%
  summarise(total_spend_y = sum(gcc_spending)) %&amp;gt;%
  arrange(desc(total_spend_y)) %&amp;gt;%
  mutate(total_spend_y = total_spend_y %&amp;gt;% scales::dollar(scale = 1e-09,
                                                        suffix = &amp;quot;B&amp;quot;,
                                                        prefix = &amp;quot;$&amp;quot;)
       )

&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Department&lt;/th&gt;
&lt;th&gt;Total Spend from 2000-2017&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NASA&lt;/td&gt;
&lt;td&gt;$25.77B&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Commerce (NOAA)&lt;/td&gt;
&lt;td&gt;$5.28B&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;NSF&lt;/td&gt;
&lt;td&gt;$5.26B&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Energy&lt;/td&gt;
&lt;td&gt;$3.32B&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Agriculture&lt;/td&gt;
&lt;td&gt;$1.63B&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;All Other&lt;/td&gt;
&lt;td&gt;$1.54B&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Interior&lt;/td&gt;
&lt;td&gt;$0.86B&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It is clear from here that the outlier department is NASA. Further exploration would be needed to understand the function of each department and the justification of this expenditure and the skew. &lt;em&gt;For example, one might think the Interior department would not be able to produce R&amp;amp;D superior to NASA/NSF.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;function-to-plot-a-facet-grid-of-the-department-spending&#34;&gt;Function to plot a facet grid of the department spending&lt;/h2&gt;

&lt;p&gt;By using a function to complete the plot, the plot can be easily repeated for any range of years. It can also work for a single year.&lt;/p&gt;

&lt;p&gt;The function below takes the following arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The range of the years we want to look into , example 2005-2010&lt;/li&gt;
&lt;li&gt;The number of columns in the facet wrap plot.&lt;/li&gt;
&lt;li&gt;The caption that consititues the observation from the plots and anything else.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The title of the plot includes the year range that is input above.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;climate_spend_plt_fn &amp;lt;- function(
                                 data,
                                 y_range_low = 2000,
                                 y_range_hi  = 2010,
                                 ncol = 3,
                                 caption = &amp;quot;&amp;quot;
                                 )
{

  plot_title  &amp;lt;- str_glue(&amp;quot;Federal R&amp;amp;D budget towards Climate Change: {y_range_low}-{y_range_hi}&amp;quot;)

  data %&amp;gt;%
  filter(year_dt &amp;gt;= y_range_low &amp;amp; year_dt &amp;lt;= y_range_hi) %&amp;gt;%
  ggplot(aes(y = tot_spend_dept_y_txt, x = department, fill = department ))+
  geom_col() +
  facet_wrap(~ year_dt,
             ncol = 3,
             scales = &amp;quot;free_y&amp;quot;
             ) +
  #scale_y_continuous(breaks = scales::pretty_breaks(10)) +
  theme_tq() +
  scale_fill_tq(theme = &amp;quot;dark&amp;quot;) +
  theme(
    axis.text.x = element_text(angle = 45,
                               hjust = 1.2),
    legend.position = &amp;quot;none&amp;quot;,
    plot.background=element_rect(fill=&amp;quot;#f7f7f7&amp;quot;),
    ) +
  labs(
    title = plot_title,
    x = &amp;quot;Department&amp;quot;,
    y = &amp;quot;Total Budget $ Billion&amp;quot;,
    subtitle = &amp;quot;NASA literally dwarfs all the other departments, getting to spend upwards of 1.1 Billion dollars every year since 2000.&amp;quot;,
    caption = caption
  )

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;visualizing-department-wise-spending-over-the-years&#34;&gt;Visualizing department-wise spending over the years&lt;/h2&gt;

&lt;p&gt;Calling the function and passing in the entire date (year) range of 2000-2010. Note that for a single year, have both the arguments &lt;code&gt;y_range_low&lt;/code&gt; and &lt;code&gt;y_range_high&lt;/code&gt; equal to the same year.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;climate_spend_plt_fn(climate_spend_dept_y,
                     y_range_low = 2000,
                     y_range_hi = 2010,
                     caption = &amp;quot;#TidyTuesday:\nDataset 2019-02-12\nShreyas Ragavan&amp;quot;
                       )
&lt;/code&gt;&lt;/pre&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyas.ragavan.co/img/fed-rnd-spending-1.png&#34; data-caption=&#34;Figure 2: R&amp;amp;D Budget towards Climate Change from year 2000-2010 across departments.&#34;&gt;
&lt;img src=&#34;https://shreyas.ragavan.co/img/fed-rnd-spending-1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 2: R&amp;amp;D Budget towards Climate Change from year 2000-2010 across departments.
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;climate_spend_plt_fn(climate_spend_dept_y,
                     y_range_low = 2011,
                     y_range_hi = 2017,
                     caption = &amp;quot;#TidyTuesday:\nDataset 2019-02-12\nShreyas Ragavan&amp;quot;
                       )
&lt;/code&gt;&lt;/pre&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyas.ragavan.co/img/fed-rnd-spending-2.png&#34; data-caption=&#34;Figure 3: R&amp;amp;D Budget towards Climate Change from year 2011-2017 across departments.&#34;&gt;
&lt;img src=&#34;https://shreyas.ragavan.co/img/fed-rnd-spending-2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 3: R&amp;amp;D Budget towards Climate Change from year 2011-2017 across departments.
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;h2 id=&#34;some-concluding-statements&#34;&gt;Some Concluding statements&lt;/h2&gt;

&lt;p&gt;NASA has the highest R&amp;amp;D budget allocation towards climate change, and one that is significantly higher than all the other departments put together. The median spending on R&amp;amp;D towards climate change has been increasing over the years, which is a good sign considering the importance of the problem. Some further explorations could be along the lines of the percentage change in spending per department every year, and the proportion of each department in terms of percentage for each year.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some notes on research-compendium</title>
      <link>https://shreyas.ragavan.co/post/research-compendium/</link>
      <pubDate>Sun, 01 Sep 2019 23:23:00 -0600</pubDate>
      <guid>https://shreyas.ragavan.co/post/research-compendium/</guid>
      <description>

&lt;p&gt;These are my notes while studying  the research-compendium concept, which is essentially a bunch of guidelines to produce research that is &amp;lsquo;easily&amp;rsquo; reproducible.&lt;/p&gt;

&lt;p&gt;The notes are mostly based on &lt;sup id=&#34;e8fb07a97f3c5beb5e514bdbae541795&#34;&gt;&lt;a href=&#34;#marwick-2018-packag-r&#34; title=&#34;@misc{marwick-2018-packag-r,
  DATE_ADDED =   {Mon Oct 14 13:55:11 2019},
  author =   {Ben Marwick and Carl Boettiger and Lincoln Mullen},
  doi =      {10.7287/peerj.preprints.3192v2},
  title =    {Packaging data analytical work reproducibly using R
                  (and friends)},
  url =      {https://doi.org/10.7287/peerj.preprints.3192v2},
  year =     2018,
}&#34;&gt;marwick-2018-packag-r&lt;/a&gt;&lt;/sup&gt; , which is one canonical reading on the concept. Other references are mentioned throughout the text, and also &lt;a href=&#34;#reference-list&#34;&gt;collected separately&lt;/a&gt;. These notes were prepared a few weeks ago during a foray into Docker. They are neither complete not comprehensive - but will serve as a good refresher of the principle concepts.&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://research-compendium.science/&#34; target=&#34;_blank&#34;&gt;Landing page&lt;/a&gt; : contains several references explaining research-compendium.&lt;/li&gt;
&lt;li&gt;Principles

&lt;ul&gt;
&lt;li&gt;stick with the prevailing conventions of your peers / scholarly community&lt;/li&gt;
&lt;li&gt;Keep data, methods and outputs separate, but make sure to unambiguously express the connections between them. The result files should be treated disposable (can be regenerated).&lt;/li&gt;
&lt;li&gt;Specify computational environment as clearly as possible. Minimally, a text file specifying the version numbers of the software and other critical tools being used.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;R&amp;rsquo;s package structure is conducive to organise and share a compendium, for any project.&lt;/li&gt;
&lt;li&gt;Dynamic documents : essentially like org files or Rmarkdown files i.e. literate programming. Sweave was originally introduced around 2002. However, around 2015 : knittr and rmarkdown made substantial progress and are in general more preferred than using sweave.&lt;/li&gt;
&lt;li&gt;Shipping data with the packages

&lt;ul&gt;
&lt;li&gt;CRAN : generally less than 5MB. A large percentage of the packages have some form of data. Data should be included if a methods package is being shipped with the analysis.&lt;/li&gt;
&lt;li&gt;use the &lt;a href=&#34;https://github.com/ropensci/piggyback&#34; target=&#34;_blank&#34;&gt;piggyback&lt;/a&gt; package for attaching large datafiles to github repos.

&lt;ul&gt;
&lt;li&gt;It is convenient to be able to upload a new dataset to be associated with thep package, and this can be accessed with &lt;code&gt;pb_download()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;medium&amp;rsquo; sized data files can be attached using &lt;a href=&#34;https://github.com/ropensci/arkdb&#34; target=&#34;_blank&#34;&gt;arkdb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Adding a Dockerfile to the compendium

&lt;ul&gt;
&lt;li&gt;containerit    : o2r/containerit&lt;/li&gt;
&lt;li&gt;repo to docker : jupyter/repo2docker&lt;/li&gt;
&lt;li&gt;Binder         : &lt;a href=&#34;https://mybinder.org&#34; target=&#34;_blank&#34;&gt;https://mybinder.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use the &lt;a href=&#34;https://github.com/karthik/holepunch&#34; target=&#34;_blank&#34;&gt;holepunch&lt;/a&gt; package to make the setup easier.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Summarising the folder structure for R packages esque

&lt;ul&gt;
&lt;li&gt;Readme file : self-explanatory and should be as detailed as possible, and preferably include a graphical connection between various components.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R/&lt;/code&gt; : Script files with resusable functions go here. If roxygen is used to generate the documentation, then &lt;code&gt;man/&lt;/code&gt; dicrectory is automatically populated with this.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;analysis/&lt;/code&gt; : analysis scripts and reports. Considering using ascending names in the file names to aid clarity and order eg 001-load.R, 002 -&amp;hellip; and so on.&lt;/li&gt;
&lt;li&gt;The above does not capture the dependencies. Therefore an .Rmd  or &lt;code&gt;Makefile&lt;/code&gt; (or &lt;code&gt;Makefile.R&lt;/code&gt;) can be included to capture the full tree of dependencies. These files control the order of execution.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DESCRIPTION&lt;/code&gt; file in the project root provides formally structured, machine and human-readable information on authors / project license, software dependenceis and other meta data.

&lt;ul&gt;
&lt;li&gt;when this file is included, the project becomes an installable R package.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NAMESPACE&lt;/code&gt;: autogenerated file that exports R functions for repeated use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LICENSE&lt;/code&gt; : specifying conditions for use /reuse&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Drone : CI service that operates on Docker containers. This can be used as a check.&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Makefiles&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;uses the make language.&lt;/li&gt;
&lt;li&gt;specifies the relationship between data, the output and the code generating the output.&lt;/li&gt;
&lt;li&gt;Defines outputs (targets) in terms of inputs (dependencies) and the code necessary to produce them (recipes).&lt;/li&gt;
&lt;li&gt;Allows rebuilding only the parts that are out of date.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;remake&lt;/code&gt; package enables write Make like instructions in R.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Principles to consider before sharing a research compendium

&lt;ul&gt;
&lt;li&gt;Licensing, Version control, persistence, metadata : main aspects to consider.&lt;/li&gt;
&lt;li&gt;Archive a specific commit at a repository that issues persistent URL&amp;rsquo;s eg DOI which are designed to be more persistent than other URL&amp;rsquo;s. Refere re3data.org for discipline-specific DOI issuing repositories. Using a DOI simplifies citations by allowing the transfer of basic metadata to a central registry (eg CrossRef and Datacite). Doing this ensures that a publicly available snapshot of code exists that can match the results published.&lt;/li&gt;
&lt;li&gt;CRAN is generally not recommended for research-compendium packages, because it is strict about directory structures and contents of the R packages. It also has a 5MB limit for package data and documentation.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Tools and templates

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;devtools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rrtools&lt;/code&gt; : extends devtools&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reference-list&#34;&gt;Reference list&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ropensci.org/commcalls/2019-07-30/?eType=EmailBlastContent&amp;amp;eId=2d18a2f6-57ef-4d15-8c52-84be5c49e039&#34; target=&#34;_blank&#34;&gt;https://ropensci.org/commcalls/2019-07-30/?eType=EmailBlastContent&amp;amp;eId=2d18a2f6-57ef-4d15-8c52-84be5c49e039&lt;/a&gt; | rOpenSci | Reproducible Research with R&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/annakrystalli/rrtools-repro-research&#34; target=&#34;_blank&#34;&gt;https://github.com/annakrystalli/rrtools-repro-research&lt;/a&gt; | annakrystalli/rrtools-repro-research: Tutorial on Reproducible Research in R with rrtools&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://karthik.github.io/holepunch/&#34; target=&#34;_blank&#34;&gt;https://karthik.github.io/holepunch/&lt;/a&gt; | Configure Your R Project for binderhub • hole punch&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/karthik/holepunch&#34; target=&#34;_blank&#34;&gt;https://github.com/karthik/holepunch&lt;/a&gt; | karthik/holepunch: Make your R project Binder ready&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://peerj.com/preprints/3192/&#34; target=&#34;_blank&#34;&gt;https://peerj.com/preprints/3192/&lt;/a&gt; | Packaging data analytical work reproducibly using R (and friends) [PeerJ Preprints]&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alan-turing-institute/the-turing-way/tree/master/workshops/build-a-binderhub&#34; target=&#34;_blank&#34;&gt;https://github.com/alan-turing-institute/the-turing-way/tree/master/workshops/build-a-binderhub&lt;/a&gt; | the-turing-way/workshops/build-a-binderhub at master · alan-turing-institute/the-turing-way&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alan-turing-institute/the-turing-way/tree/master/workshops&#34; target=&#34;_blank&#34;&gt;https://github.com/alan-turing-institute/the-turing-way/tree/master/workshops&lt;/a&gt; | the-turing-way/workshops at master · alan-turing-institute/the-turing-way&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research-compendium.science/&#34; target=&#34;_blank&#34;&gt;https://research-compendium.science/&lt;/a&gt; | Research Compendium&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://inundata.org/talks/rstd19/#/0/33&#34; target=&#34;_blank&#34;&gt;http://inundata.org/talks/rstd19/#/0/33&lt;/a&gt; | reproducible-data-analysis&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/benmarwick/rrtools&#34; target=&#34;_blank&#34;&gt;https://github.com/benmarwick/rrtools&lt;/a&gt; | benmarwick/rrtools: rrtools: Tools for Writing Reproducible Research in R&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/shrysr/correlationfunnel&#34; target=&#34;_blank&#34;&gt;https://github.com/shrysr/correlationfunnel&lt;/a&gt; | shrysr/correlationfunnel: Speed Up Exploratory Data Analysis (EDA)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cboettig/nonparametric-bayes&#34; target=&#34;_blank&#34;&gt;https://github.com/cboettig/nonparametric-bayes&lt;/a&gt; | cboettig/nonparametric-bayes: Non-parametric Bayesian Inference for Conservation Decisions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lincolnmullen.com/blog/makefiles-for-writing-data-analysis-ocr-and-converting-shapefiles/#fnref2&#34; target=&#34;_blank&#34;&gt;https://lincolnmullen.com/blog/makefiles-for-writing-data-analysis-ocr-and-converting-shapefiles/#fnref2&lt;/a&gt; | Makefiles for Writing, Data Analysis, OCR, and Converting Shapefiles | Lincoln Mullen&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lmullen/civil-procedure-codes/blob/master/Makefile&#34; target=&#34;_blank&#34;&gt;https://github.com/lmullen/civil-procedure-codes/blob/master/Makefile&lt;/a&gt; | civil-procedure-codes/Makefile at master · lmullen/civil-procedure-codes&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;bibliography&#34;&gt;Bibliography&lt;/h1&gt;

&lt;p&gt;&lt;a id=&#34;marwick-2018-packag-r&#34;&gt;&lt;/a&gt;[marwick-2018-packag-r] @miscmarwick-2018-packag-r,
  DATE_ADDED =   Mon Oct 14 13:55:11 2019,
  author =   Ben Marwick and Carl Boettiger and Lincoln Mullen,
  doi =      10.7287/peerj.preprints.3192v2,
  title =    Packaging data analytical work reproducibly using R
                  (and friends),
  url =      &lt;a href=&#34;https://doi.org/10.7287/peerj.preprints.3192v2&#34; target=&#34;_blank&#34;&gt;https://doi.org/10.7287/peerj.preprints.3192v2&lt;/a&gt;,
  year =     2018,
 &lt;a href=&#34;#e8fb07a97f3c5beb5e514bdbae541795&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using ESS for Data Science</title>
      <link>https://shreyas.ragavan.co/docs/ess-datascience-r/</link>
      <pubDate>Fri, 15 Mar 2019 11:43:00 -0600</pubDate>
      <guid>https://shreyas.ragavan.co/docs/ess-datascience-r/</guid>
      <description>

&lt;p&gt;RStudio is a formidable IDE to work with and offers an environment to seamlessly work with multiple languages beyond R. It is especially convenient for tasks involving frequent visualisation of data frames and plots, and for use with Shiny app development.&lt;/p&gt;

&lt;p&gt;However, the text (i.e code) editing capabalities are still significantly lacking compared to the likes of Emacs and Vim. Besides this, it does not offer a seamless interface integrating task, time management and multi-language programming environments to the extent available within Org-mode via Emacs. Enter ESS !&lt;/p&gt;

&lt;p&gt;This is an evolving document of how I use ESS  and will be a useful guide to anybody starting out with ESS especially for R based workflows. My ESS configuration is mostly available in my Dotemacs documentation. However this is a deeper dive into ESS workflows for data science projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Emacs Speaks Statistics (ESS) is an add-on package for GNU Emacs. It is designed to support editing of scripts and interaction with various statistical analysis programs such as R, S-Plus, SAS, Stata and OpenBUGS/JAGS. Although all users of these statistical analysis programs are welcome to apply ESS, advanced users or professionals who regularly work with text-based statistical analysis scripts, with various statistical languages/programs, or with different operating systems might benefit from it the most.&lt;/p&gt;

&lt;p&gt;The rationale for developing ESS is that most statistical analysis systems provide a more or less sophisticated graphical user interface (GUI). However, their full power is only available using their scripting language. Furthermore, complex statistical analysis projects require a high degree of automation and documentation which can only be handled by creating statistical analysis scripts. Unfortunately, many statistics packages provide only weak text editor functionality and show major differences between them. Without a unified text editor user interface additional effort is required from the user to cope with limited functionality and with text editor differences.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ess.r-project.org/&#34; target=&#34;_blank&#34;&gt;ESS website&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://ess.r-project.org/index.php?Section=documentation&amp;amp;subSection=manuals&#34; target=&#34;_blank&#34;&gt;Different versions of the ESS manual&lt;/a&gt; are available online and it is worth a frequent read to aid familiarisation with the commands and features available. The ESS mailing list is also worth subscribing to.&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;While it seems that ESS is reasonably popular, it was surprising to find relatively few examples of configurations on the web. The &lt;a href=&#34;https://www.emacswiki.org/emacs/EmacsSpeaksStatistics&#34; target=&#34;_blank&#34;&gt;Emacs ESS wikipage&lt;/a&gt; and &lt;a href=&#34;https://emacs.readthedocs.io/en/latest/ess%5F%5Femacs%5Fspeaks%5Fstatistics.html&#34; target=&#34;_blank&#34;&gt;Yi Tang&amp;rsquo;s Emacs configuration&lt;/a&gt; are among the few useful resources I&amp;rsquo;ve been able to find.&lt;/p&gt;

&lt;h2 id=&#34;starting-a-new-project&#34;&gt;Starting a new project&lt;/h2&gt;

&lt;p&gt;Typically, I start with a fresh Org-mode document for a new project in a repository of its own. This is as easy as &lt;code&gt;M-x nb-new&lt;/code&gt; in Scimax. This initialises a new git repository in the designated projects folder. Currently, I have each such project as a submodule of the main project repo.&lt;/p&gt;

&lt;p&gt;It may seem convenient to include libraries and a variety of other customisations in the .Rrofile startup. However, as mentioned in the initial comments of this &lt;a href=&#34;https://stackoverflow.com/questions/1189759/expert-r-users-whats-in-your-rprofile&#34; target=&#34;_blank&#34;&gt;SO Discussion&lt;/a&gt;, in the interest of reproducibility - it is better to have a script run commands at the beginning of each session. Alternately, one could use a package like YASnippet to insert snippets of frequently used code.&lt;/p&gt;

&lt;h2 id=&#34;org-documents-for-literate-programming&#34;&gt;Org documents for literate programming&lt;/h2&gt;

&lt;p&gt;Being a fan of literate programming, my code is usually embedded into Org-babel source blocks in line with the explanations or analysis.&lt;/p&gt;

&lt;p&gt;For longer projects, I often define a Yasnippet extension for the source code blocks specifying a unique session name to cater to that project. This prevents mixing up of variables and environments between projects as I switch, and I can search and insert snippets with the handy &lt;code&gt;ivy-yasnippet&lt;/code&gt; package that allows previews of snippets before insertion.&lt;/p&gt;

&lt;p&gt;Typically, I enter the major mode from the Org-Babel source block (&lt;code&gt;C-c &#39;&lt;/code&gt; inside a source block) to enable access to mode specific features like command completion, variable access and so on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is worth noting that when entering a major mode from a source block, the correct or desired ESS process has to be attached, especially if you are simultaneously using multiple sessions. This can be done with the &lt;code&gt;C-c C-s&lt;/code&gt; command after entering the major mode buffer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;frequently-used-ess-commands&#34;&gt;Frequently used ESS commands&lt;/h2&gt;

&lt;p&gt;Though there are many commands available - the ones listed below are worth noting. Going through the ESS manual is definitely worth the effort to understand detailed descriptions of these commands. Another simple way to search for commands within ESS is using the &lt;code&gt;M-x&lt;/code&gt; command and type in &amp;lsquo;ess&amp;rsquo; to view the commands available.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;M-p&lt;/code&gt;, &lt;code&gt;M-n&lt;/code&gt; : Previous and next command in comint input history.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-r&lt;/code&gt;      : Regex search of input history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-x&lt;/code&gt;  : List of objects in the environment. Prepend &lt;code&gt;C-u&lt;/code&gt; to print to console. Note that it is possible to list commands of libraries by prepending numbers to &lt;code&gt;C-c C-x&lt;/code&gt;. The default prefix is the global environment, which is a prefix of 1, i.e &lt;code&gt;C-1 C-c C-x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-v&lt;/code&gt;  : Help at point.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-q&lt;/code&gt;  : Ess-quit. This is important to use when exiting an R session. Using this makes sure that temporary buffers are quit. Such buffers can pile up very easily as you use the help documentation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-z&lt;/code&gt;  : Switch between the R script and the process buffer. This is a nifty feature especially when when using&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-M-x&lt;/code&gt;    : Sends the current selected region or function or paragraph.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-d v&lt;/code&gt;: (ess-display-vignettes) this is a handy method to browse all the available vignettes. This opens up a buffer, which contains links to vignettes in multiple formats (PDF, Rmd, Rnw). Note that the vignettes of a newsly installed package is loaded only after being loaded with the library function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-e w&lt;/code&gt; : Resizing the display to adapt to a buffer that has changed dimension. i.e if I split the R terminal buffer which changes it&amp;rsquo;s size - this command will enable the output to be better adjusted to the buffer size and thus enable better readability.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;window-configuration&#34;&gt;Window configuration&lt;/h2&gt;

&lt;p&gt;The ESS manual has a helpful snippet if you prefer your window arrangement similar to Rstudio&amp;rsquo;s, which is quite sensible as such. The width values can be modified as required.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq display-buffer-alist
      `((&amp;quot;*R Dired&amp;quot;
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (slot . -1)
         (window-width . 0.33)
         (reusable-frames . nil))
        (&amp;quot;*R&amp;quot;
         (display-buffer-reuse-window display-buffer-at-bottom)
         (window-width . 0.35)
         (reusable-frames . nil))
        (&amp;quot;*Help&amp;quot;
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (slot . 1)
         (window-width . 0.33)
         (reusable-frames . nil))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rmarkdown-polymode&#34;&gt;Rmarkdown : Polymode&lt;/h2&gt;

&lt;p&gt;Polymode makes it easy to work with Rmd, Rnw, Snw format documents within Emacs. The only configuration necessary for this Is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;poly-markdown)
(require &#39;poly-R)

;; MARKDOWN
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.md&amp;quot; . poly-markdown-mode))

;; R modes
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.Snw&amp;quot; . poly-noweb+r-mode))
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.Rnw&amp;quot; . poly-noweb+r-mode))
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.Rmd&amp;quot; . poly-markdown+r-mode))

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exporting&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Exporting&lt;/h2&gt;

&lt;p&gt;When sharing documents, it is necessary to convert to a format non-Emacs users can user. My current approach is to use &lt;code&gt;ox-ipynb&lt;/code&gt; package to export to as a jupyter notebook, and then the excellent jupytext package to convert to Rmd.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R notes and snippets</title>
      <link>https://shreyas.ragavan.co/docs/r-notes-snippets/</link>
      <pubDate>Thu, 11 Jul 2019 11:21:36 -0600</pubDate>
      <guid>https://shreyas.ragavan.co/docs/r-notes-snippets/</guid>
      <description>

&lt;h2 id=&#34;lubridate-introductory-technical-paper&#34;&gt;Lubridate - introductory technical paper&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&#34;https://vita.had.co.nz/papers/lubridate.pdf&#34; target=&#34;_blank&#34;&gt;paper&lt;/a&gt; (Grolemund and Wickham) offers a good introduction and comparison between using lubridate and not using it, as well as several examples of using the library. It also offers some case studies which can serve as useful drill exercises.&lt;/p&gt;

&lt;h2 id=&#34;importing-multiple-excel-sheets-from-multiple-excel-files&#34;&gt;Importing multiple excel sheets from multiple excel files&lt;/h2&gt;

&lt;p&gt;This is one approach to importing multiple sheets from multiple excel files into a list of tibbles. The goal is that each sheet is imported as a separate tibble.&lt;/p&gt;

&lt;p&gt;Loading the libraries:
While you may have the tidyverse package installed, this approach uses the  package &lt;code&gt;rio&lt;/code&gt; ( ).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;## install the rio library.
## Rio  makes data import a little easier for different file types.

## install.packages(&amp;quot;rio&amp;quot;)
library(&amp;quot;rio&amp;quot;)
library(&amp;quot;tidyverse&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;User input for the path. This basically points towards a folder which presumably contains multiple excel files.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;## Note that patterns can be provided as an argument to filter file types.
folder_path &amp;lt;- c(&amp;quot;~/temp/bsu_test/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The information in the directory can be gleaned with the &lt;code&gt;fs::dir_info&lt;/code&gt; function, and from this the path variable can be pulled which will contain the paths to the excel files found.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;excel_paths_tbl &amp;lt;- fs::dir_info(folder_path)

paths_chr &amp;lt;- excel_paths_tbl %&amp;gt;%
  pull(path)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import_list()&lt;/code&gt; from the &lt;code&gt;rio&lt;/code&gt; package is used and the class is set to tibble using the argument &lt;code&gt;tbl&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An anonymous function is used to map the paths and apply the &lt;code&gt;import_list&lt;/code&gt; function on each path.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For example: assuming that there were 2 Nos. excel files in the specified directory; = the map function creates 2 lists containing 2 tibbles each. Each tibble represents an excel sheet from the file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The  final &lt;code&gt;combine()&lt;/code&gt; function combines these 2 Nos. lists into a single list of 4 tibbles, each being a sheet in the excel file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;excel_data &amp;lt;- paths_chr %&amp;gt;%
map(~ import_list(. , setclass = &amp;quot;tbl&amp;quot;)) %&amp;gt;%
combine()

glimpse(excel_data)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;references&#34;&gt;References&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;BSU Course DSB-101-R&lt;/li&gt;
&lt;li&gt;I learnt about the &lt;code&gt;Rio&lt;/code&gt; package in this &lt;a href=&#34;https://stackoverflow.com/questions/12945687/read-all-worksheets-in-an-excel-workbook-into-an-r-list-with-data-frames&#34; target=&#34;_blank&#34;&gt;Stack Overflow discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;data-explorer-package&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Data Explorer package&lt;/h2&gt;

&lt;p&gt;The DataExplorer package aims to have tools for EDA, Feature engineering and Data reporting. It is handy to get quick overview of the data from multiple perspectives.&lt;/p&gt;

&lt;p&gt;Installation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packges(&amp;quot;DataExplorer&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Salient points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A list of data frames can be provided as the input.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plot_str&lt;/code&gt; : display a graphic networking the various variables, their types and the list of data frames. This is displayed in the browser. The &lt;code&gt;type = &amp;quot;r&amp;quot;&lt;/code&gt; argument can be used for a radial network.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;introduce&lt;/code&gt; : provides a table of numbers rather than percentages, like the number of rows, columns, missing data and so on.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plot_intro&lt;/code&gt; : Visualises the output of &lt;code&gt;introduce&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plot_missing&lt;/code&gt; : useful to know the percentage of missing values in each feature.
6.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;devtools-package&#34;&gt;Devtools package&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;devtools package, which is the public face for a suite of R functions that automate common development tasks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://r-pkgs.org/intro.html&#34; target=&#34;_blank&#34;&gt;R Packages (book)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Official details of package development : &lt;a href=&#34;https://cran.r-project.org/doc/manuals/R-exts.html#Creating-R-packages&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;basic-libraries-to-aid-package-development&#34;&gt;Basic libraries to aid package development&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packages(c(&amp;quot;devtools&amp;quot;, &amp;quot;roxygen2&amp;quot;, &amp;quot;testthat&amp;quot;, &amp;quot;knitr&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;visdat-preprocessing-visualisation-link&#34;&gt;Visdat : preprocessing visualisation &lt;a href=&#34;http://visdat.njtierney.com/&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This package could be very useful in exploring new data or looking at how the data is changing after a wrangling operation. It could save repeatedly looking at the CSV file manually to make sure the change is implemented.&lt;/p&gt;

&lt;p&gt;Installing Visdat&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(&amp;quot;easypackages&amp;quot;)
packages(&amp;quot;visdat&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main Functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;vis_dat
vis_miss
vis_compare
vis_expect
vis_cor
vis_guess
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;General Exploration&lt;/p&gt;

&lt;p&gt;Note: &lt;code&gt;typical_data&lt;/code&gt; is a dataset that is included with the package and is useful to explore the functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;libraries(&amp;quot;tidyverse&amp;quot;, &amp;quot;visdat&amp;quot;)
vis_dat(typical_data)
vis_miss(typical_data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clustering the missing data in the columns&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;vis_miss(typical_data,
         cluster =  TRUE)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;long-wide-formats-example-for-gathering&#34;&gt;Long &amp;lt;-&amp;gt; Wide formats : example for gathering&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(&amp;quot;tidyverse&amp;quot;)

## Defining a sample tribble with several duplicates
a &amp;lt;- tribble(
    ~IDS, ~&amp;quot;client id 1&amp;quot;, ~&amp;quot;client id 2&amp;quot;, ~&amp;quot;client id 3&amp;quot;, ~&amp;quot;client id 4&amp;quot;, ~&amp;quot;old app&amp;quot;, ~&amp;quot;new app&amp;quot;,
    123, 767, 888,&amp;quot;&amp;quot; , &amp;quot;&amp;quot;, &amp;quot;yes&amp;quot; , &amp;quot;no&amp;quot;,
    222, 333, 455, 55, 677, &amp;quot;no&amp;quot;, &amp;quot;yes&amp;quot;,
    222, 333, 343, 55,677, &amp;quot;no&amp;quot;, &amp;quot;yes&amp;quot;
)


## Defining vector to form column names
vec1 &amp;lt;- seq(1:4)
vec2 &amp;lt;- &amp;quot;client id&amp;quot;
vec3 &amp;lt;- str_glue(&amp;quot;{vec2} {vec1}&amp;quot;)

## Gathering and removing duplicates
a %&amp;gt;%
    gather(
        key = &amp;quot;Client number&amp;quot;,
        value = &amp;quot;client ID&amp;quot;,
        vec3
    ) %&amp;gt;%
    unique()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;matrix&#34;&gt;Matrix&lt;/h2&gt;

&lt;h3 id=&#34;defining-a-matrix&#34;&gt;Defining a matrix&lt;/h3&gt;

&lt;p&gt;A matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns.&lt;/p&gt;

&lt;p&gt;A matrix is called two-dimensional, since there are rows and columns. It is constructed using the &lt;code&gt;matrix()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elements of the matrix&lt;/li&gt;
&lt;li&gt;&lt;code&gt;byrow&lt;/code&gt; to have the matrix filled by rows. By default, this is set to false.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;nrow&lt;/code&gt; for number of rows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;matrix(1:10,byrow = TRUE, nrow = 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Demonstrating the difference of not using &lt;code&gt;byrow&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;matrix(1:10, ncol = 2, nrow = 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;matrix(1:10, ncol = 2, nrow= 5 , byrow = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;naming-the-rows-and-the-columns&#34;&gt;Naming the rows and the columns&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rownames()&lt;/code&gt; and &lt;code&gt;colnames()&lt;/code&gt; can be used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;#Defining the row data
row_1 &amp;lt;- c(250, 300)
row_2 &amp;lt;- c(55, 350)

# Defining the matrix
my_matrix &amp;lt;- matrix(c(row_1, row_2), byrow = TRUE, nrow = 2)

# Defining row and column names
my_rownames &amp;lt;- c(&amp;quot;test_row1&amp;quot;, &amp;quot;test_row2&amp;quot;)
my_colnames &amp;lt;- c(&amp;quot;test_col1&amp;quot;, &amp;quot;test_col2&amp;quot;)

# Attaching row and column names to the created matrix
rownames(my_matrix) &amp;lt;- my_rownames
colnames(my_matrix) &amp;lt;- my_colnames

my_matrix

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sums-rowsums-and-colsums-adding-rows-rbind-and-columns-cbind&#34;&gt;Sums - &lt;code&gt;rowSums()&lt;/code&gt; and &lt;code&gt;colSums()&lt;/code&gt;, adding rows - &lt;code&gt;rbind()&lt;/code&gt; and columns - &lt;code&gt;cbind()&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;my_rowsums &amp;lt;-  rowSums(my_matrix)

# Adding a new column of the calculated sums
my_new_matrix &amp;lt;- cbind(my_matrix, my_rowsums)
my_new_matrix

# Adding a new row and calculating the sums again
row_3 &amp;lt;- c(200, 100 )
my_newest_matrix &amp;lt;- rbind(my_matrix, row_3)
my_new_rowsums &amp;lt;- rowSums(my_newest_matrix)
my_newest_matrix &amp;lt;- cbind(my_newest_matrix, my_new_rowsums)

my_newest_matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dates&#34;&gt;Dates&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The ISO 8601 format is the way R accepts and stores dates. This is basically in the yyyy-mm-dd format. Internally stored by R as the number of days since January 1, 1970.&lt;/li&gt;
&lt;li&gt;Alternative format year/month/day&lt;/li&gt;
&lt;li&gt;Dates are internally stored as numerics with some special characteristics over typical numerics.&lt;/li&gt;
&lt;li&gt;Current time from the system : &lt;code&gt;Sys.time()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Current date from the system : &lt;code&gt;Sys.Date()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Character vectors are most common source of creating dates.&lt;/li&gt;
&lt;li&gt;class of dates

&lt;ul&gt;
&lt;li&gt;could be a &lt;code&gt;date&lt;/code&gt; class catering to calendar dates.&lt;/li&gt;
&lt;li&gt;could also be a POSIX - Portable Operating System Interface class, which is commonly used in the finance world

&lt;ul&gt;
&lt;li&gt;POSIXlt and POSIXct allow holding a date.&lt;/li&gt;
&lt;li&gt;POSIXct is a way to represent datetime objects like &amp;ldquo;2015-01-22 08:39:40 EST&amp;rdquo;. This method is important for storing intraday financial data.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Using the simplest date class is generally the best strategy.&lt;/li&gt;
&lt;li&gt;There are other classes of date as well.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;as.date()&lt;/code&gt; can be used to convert the object to a date class.

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;format&lt;/code&gt; argument can facilitate conversion from different formats to the necessary ISO format.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Extractor functions

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;weekdays()&lt;/code&gt; can be used to extract the day of the week from a date object.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format()&lt;/code&gt; can be used to convert existing date objects to different date formats.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;months()&lt;/code&gt; for extracting the months of the date objects&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quarters()&lt;/code&gt; to extract the quarter in which the date object falls&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Dates can be subtracted, just like numerics.

&lt;ul&gt;
&lt;li&gt;The object must be in the Date format. Direct subtraction provides the difference in days.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;difftime(date1, date2, units = &amp;quot;secs&amp;quot;)&lt;/code&gt; can be used to find the difference in time, with the argument units specifying the output type

&lt;ul&gt;
&lt;li&gt;Argument &lt;code&gt;units&lt;/code&gt; should be one of “auto”, “secs”, “mins”, “hours”, “days”, “weeks”&lt;/li&gt;
&lt;li&gt;The 2nd argument &lt;code&gt;date2&lt;/code&gt;, will be subtracted from the first argument &lt;code&gt;date1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Formats of representing alternate date formats&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Y: 4-digit year (1982)&lt;/li&gt;
&lt;li&gt;y: 2-digit year (82)&lt;/li&gt;
&lt;li&gt;m: 2-digit month (01)&lt;/li&gt;
&lt;li&gt;d: 2-digit day of the month (13)&lt;/li&gt;
&lt;li&gt;A: weekday (Wednesday)&lt;/li&gt;
&lt;li&gt;a: abbreviated weekday (Wed)&lt;/li&gt;
&lt;li&gt;B: month (January)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;b: abbreviated month (Jan)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# Using the system date and time
todays_date &amp;lt;- Sys.Date()
todays_time &amp;lt;- Sys.time()
todays_date
todays_time

# Class of defined date and time
class(todays_date)
class(todays_time)

# Reading alternate formats of dates
test_date_alt_format &amp;lt;- &amp;quot;23/02/2019&amp;quot;
as.Date(test_date_alt_format, format = &amp;quot;%d/%m/%Y&amp;quot;)

test2_date_alt_format &amp;lt;- &amp;quot;Sep 25,2020&amp;quot;
as.Date(test2_date_alt_format, format = &amp;quot;%B %d,%Y&amp;quot;)

# Extractor functions
weekdays(as.Date(test2_date_alt_format, format = &amp;quot;%B %d,%Y&amp;quot;))

# Subtracting dates
date1 &amp;lt;- as.Date(&amp;quot;2030-02-20&amp;quot;)
date2 &amp;lt;- as.Date(&amp;quot;2040-03-30&amp;quot;)
date2 - date1
difftime(date2, date1, units = &#39;secs&#39;)
difftime(date1, date2, units = &#39;mins&#39;)

# Setting the weekdays as names()
dates3 &amp;lt;- c(date1, date2, as.Date(c(&amp;quot;2025-03-23&amp;quot;, &amp;quot;2015-04-25&amp;quot;)))
names(dates3) &amp;lt;- weekdays(dates3)
dates3

# Syntax example of using Not (relational operators)
a &amp;lt;- c(100,140,2,240, 300)
# checking where a is Not greater than 200
!(a &amp;gt; 200)

# Testing runif()

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;vectors&#34;&gt;Vectors&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;One dimensional collection of data.&lt;/li&gt;
&lt;li&gt;vectors need to contain a similar data type. To combine multiple data types, a data frame type object or a list is required.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;length()&lt;/code&gt; can be used with numeric type vectors to find the length of the vector. However the &lt;code&gt;nchar()&lt;/code&gt; function should be used for character type vectors (using &lt;code&gt;length()&lt;/code&gt; will provide an answer of 1)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A single number is also stored as a vector of length 1.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;a &amp;lt;- c(&amp;quot;This is a character type vector&amp;quot;, &amp;quot;which contains 2 strings&amp;quot;)
a
length(a) # the result will be 2 because there are 2 elements
nchar(a)  # Actual number of characters in each string

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;vectorised-functions&#34;&gt;Vectorised functions&lt;/h2&gt;

&lt;p&gt;Most functions in R are vectorised. The function will apply itself to each element of a vector. This concept is important to understand especially while progressing onto tidyeval style Functions.&lt;/p&gt;

&lt;p&gt;Example of multiple substitutions with the assignment operator which is a  vectorised function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;languages &amp;lt;- c(&amp;quot;English&amp;quot;, &amp;quot;Italian&amp;quot;, &amp;quot;Urdu&amp;quot;)
print(languages)
languages[c(2,3)] &amp;lt;- c(&amp;quot;Norwegian&amp;quot;, &amp;quot;Latin&amp;quot;)
print(languages)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lists&#34;&gt;Lists&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The list is a one dimensional collection of data, like a vector.&lt;/li&gt;
&lt;li&gt;The list data type is equivalent to the dictionary data type in Python.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;list()&lt;/code&gt; with the chosen data structures as the arguments. The list can contain multiple types of objects or data types.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lists are used to create Dataframes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;                                    # Creating a simple list of 4 elements, name, age, height, horn.sizre

my.list &amp;lt;- list(
name = &amp;quot;Shreyas&amp;quot;,
age = 776,
height = 167,
horn.size = 25
)

my.list
                                    # the tag names can be extracted using the names()
names(my.list)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Subsetting: using a &lt;code&gt;[]&lt;/code&gt; returns a subset of the list and using &lt;code&gt;[[]]&lt;/code&gt; returns the data inside the list being referenced.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A single bracket always means to filter a location. list[&lt;index&gt;] is actually a filtered list.&lt;/li&gt;
&lt;li&gt;Single brackets return a list and Double brackets return the element itself.&lt;/li&gt;
&lt;li&gt;A subset can be used on a dateframe to extract specific data.&lt;/li&gt;
&lt;li&gt;Syntax example with conditionals: &lt;code&gt;subset(dataframe, column1 &amp;gt; condition1 &amp;amp; column2 &amp;lt; condition2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The elements of the list can be named, by adding the element to the arguments while defining the list.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;adding names to an existing list can be done using the &lt;code&gt;names(list name)&lt;/code&gt; function.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;With a named list, the &lt;code&gt;$&lt;/code&gt; operator can also be used to access specific list items.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;items can be added to the list using &lt;code&gt;c()&lt;/code&gt;, which would look like &lt;code&gt;c(list_name, new_item_name = item_name)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Removing elements from a list can be done by assigning the item the NULL value.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Other list creating functions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;split()&lt;/code&gt; : &lt;code&gt;split(list-name, item-name)&lt;/code&gt;. This will create 2 lists separated by the item name specified.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsplit()&lt;/code&gt; : to unsplit a list. &lt;code&gt;unsplit(split-list-name, grouping)&lt;/code&gt; Similar syntax to the above.&lt;/li&gt;
&lt;li&gt;split-apply-combine class of problems. Example is where a particular factor is to be applied for a portion of the data and another factor for the other portion, and after which the 2 portions are recombined. For eg: offering customer A a discount of 10% and customer B a discount of 20% via splitting and them recombining the split parts into a common dataframe.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;attributes()&lt;/code&gt;: meta data of an object. For example the dim or dimension is an attribute of a matrix, and the names, row.names and class are common attributes of a dataframe.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;attr()&lt;/code&gt; to access a specific attribute. This takes 2 arguments at least. &lt;code&gt;attr(matrix_name, which = &amp;quot;desired attribute&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Applying functions to lists&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lapply&lt;/code&gt; is for lists.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;sapply&lt;/code&gt; : simplified apply works well with Vectors.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;people &amp;lt;- c(&amp;quot;shreyas&amp;quot;, &amp;quot;tom&amp;quot;, &amp;quot;harry&amp;quot;)
lapply(people, toupper)
                                # the first argument is the list and the 2nd argument is the function. Additional arguments to the function can also be supplied. This returns a new list and the old list remains unmodified.
lapply(people, paste, &amp;quot;hello&amp;quot;)
people
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples using lapply and other list and vector Manipulation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;                                        # Creating vectors of meals  and meal items

breakfast &amp;lt;- c(&amp;quot;eggs&amp;quot;, &amp;quot;bread&amp;quot;, &amp;quot;orange juice&amp;quot;)
lunch &amp;lt;- c(&amp;quot;pasta&amp;quot;, &amp;quot;coffee&amp;quot;)
meals &amp;lt;- list(breakfast = breakfast, lunch =  lunch)
meals
meals &amp;lt;- c(meals, list(dinner = c(&amp;quot;noodles&amp;quot;, &amp;quot;bread&amp;quot;)))
meals
names(meals)

                                        # Extracting dinner
dinner &amp;lt;- meals$dinner

                                        # Adding earlier meals to a separate list
early_meals &amp;lt;- c(meals[&amp;quot;breakfast&amp;quot;], meals[&amp;quot;lunch&amp;quot;])
early_meals

                                        # Finding the number of items in each meal.
number_items_meal &amp;lt;- lapply(meals , length)
number_items_meal

                                        # Write a function `add_pizza` that adds pizza to a given meal vector, and  returns the pizza-fied vector
add_pizza &amp;lt;- function(vector, string = &amp;quot;pizza&amp;quot;) {
  pizzafied &amp;lt;- paste(vector, string, sep = &amp;quot;-&amp;quot;)
  return(pizzafied)
  }

add_pizza(breakfast)

                                        # Create a vector `better_meals` that is all your meals, but with pizza!
updated_meals &amp;lt;- c(add_pizza(breakfast),
                   add_pizza(lunch),
                   add_pizza(dinner)
                   )
updated_meals

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;factors&#34;&gt;Factors&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;factor()&lt;/code&gt; can be used to store the unique levels of a vector.

&lt;ul&gt;
&lt;li&gt;The vector to be converted to a factor is passed in as an argument.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;levels()&lt;/code&gt; can be used to access the unique levels of a factor object.

&lt;ul&gt;
&lt;li&gt;Rename the levels by just passing a vector &lt;code&gt;levels(factor_object)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cut()&lt;/code&gt; can be used to break up a vector into specified buckets or based on specified intervals.

&lt;ul&gt;
&lt;li&gt;argument &amp;lsquo;breaks&amp;rsquo; to specify the demarcations in which the vector will be cut up.&lt;/li&gt;
&lt;li&gt;R treats the left side of the bucket as exclusive and the right side of the bucket as inclusive. This is represented by &amp;lsquo;(&amp;rsquo; and &amp;lsquo;]&amp;rsquo;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summary()&lt;/code&gt; can be used to provide the counts of items under each factor. This is best used on a factor object.&lt;/li&gt;
&lt;li&gt;Ordering and sub-setting vectors

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ordered()&lt;/code&gt; : R has an inbuilt system to order the object alphabetically.&lt;/li&gt;
&lt;li&gt;passing the &lt;code&gt;levels&lt;/code&gt; argument to &lt;code&gt;factor()&lt;/code&gt; along with the argument &lt;code&gt;ordered = T&lt;/code&gt;, with levels containing the desired order (written as least to greatest) will enable a custom ordering of factors.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drop = T&lt;/code&gt; argument to drop a level completely. Subsetting with [-1] only drops the object at the first position, but retains the level.&lt;/li&gt;
&lt;li&gt;R&amp;rsquo;s default behavior when creating data frames is to convert all characters into factors&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;working-with-categorical-data&#34;&gt;Working with categorical data:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;forcats::as_factor()&lt;/code&gt; : assigns factor values based on order in the vector&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;base::as.factor()&lt;/code&gt; : uses an alphabetical order. Assigns factor order based on the alphabetical order&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;ranking &amp;lt;- c(1:20)
head(ranking)
buckets &amp;lt;- c(0, 5, 10, 15, 20)
ranking_grouped &amp;lt;- cut(ranking, breaks = buckets)
head(ranking_grouped)
ranking_grouped
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dataframe&#34;&gt;Dataframe&lt;/h2&gt;

&lt;p&gt;Used to store a table of data. Multiple data types can be stored in a single dataframe. A matrix can store only a single data type.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Defined using &lt;code&gt;data.frame()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;colnames()&lt;/code&gt; : to rename the columns in a dataframe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subset()&lt;/code&gt; : to extract a particular subset of a dataframe. Compared to calling a column name, using this is more informative or robust.

&lt;ul&gt;
&lt;li&gt;first argument: name of the dataframe&lt;/li&gt;
&lt;li&gt;2nd argument: the condition or the column name within the dataframe&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A column can be deleted by assigning it NULL&lt;/li&gt;
&lt;li&gt;There is no need to use a &lt;code&gt;c()&lt;/code&gt; to add multiple objects to the dataframe. Directly add the vectors like &lt;code&gt;data.frame(variable 1, variable 2)&lt;/code&gt; and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;dataframe-peek-function-in-r&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Dataframe peek function in R&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;head()
tail()
str()
desc()
glimpse()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;package-installation--especially-for-data-science-and-ml&#34;&gt;Package installation (especially for data science and ML)&lt;/h2&gt;

&lt;p&gt;The package &lt;code&gt;easypackages&lt;/code&gt; enables quickly loading or installing multiple libraries. This snippet will enable installing multiple packages. In general, it is better to install packages one by one. They can however be called together.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packages(&amp;quot;easypackages&amp;quot;)
library(&amp;quot;easypackages&amp;quot;)
packages(&amp;quot;tidyverse&amp;quot;, &amp;quot;tidyquant&amp;quot;, &amp;quot;glmnet&amp;quot;, &amp;quot;rpart&amp;quot;, &amp;quot;rpart.plot&amp;quot;, &amp;quot;ranger&amp;quot;, &amp;quot;randomForest&amp;quot;, &amp;quot;xgboost&amp;quot;, &amp;quot;kernlab&amp;quot;, &amp;quot;visdat&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;basic-statistics-concepts&#34;&gt;Basic Statistics concepts&lt;/h2&gt;

&lt;h3 id=&#34;median&#34;&gt;Median&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;##&#39; Source: Conway, Drew; White, John Myles. Machine Learning for Hackers: Case Studies and Algorithms to Get You Started (p. 39). O&#39;Reilly Media. Kindle Edition.
##&#39; Additional comments are my own.
##&#39; Function to illustrate how a median is calculated for odd and even datasets

my.median  &amp;lt;- function(x){
                                        # Step 1:  Sort x ascending or descending
  sorted.x  &amp;lt;-  sort(x)
                                        # Find the length of x whether (odd number of digits or even). If odd : there are 2 medians. If even: there is a single median.
  if(length(x) %% 2 != 0){
    indices  &amp;lt;- c(length(x)/2 , length(x)/2 +1)
                                        # These numbers are used as indices for the initially sorted vector to return the exact median.
    return(mean(sorted.x[indices]))
}
else {
  index  &amp;lt;- ceiling(length(x)/2)
  return(sorted.x[index])
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;quantile&#34;&gt;Quantile&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;                                        # Defining a sample of numbers to calculate quantile.
a  &amp;lt;- c(seq(from = 1, to = 30), seq(from = 40, to = 50, by = 0.2))
quantile(a)

                                        # Defining bins or cuts for quantile. The default is 0.25.
quantile(a, probs =  seq(0,1,by = 0.2))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;promptdata-generate-shell-documentation-of-dataset&#34;&gt;&lt;code&gt;promptData()&lt;/code&gt; : generate shell documentation of dataset&lt;/h2&gt;

&lt;p&gt;If the filename argument is given as &amp;ldquo;NA&amp;rdquo;, the output will provide lists of the information. If no filename is specified, then an .Rd file will be created in the same working directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;promptData(sunspots, filename = NA)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;downloading-a-file-to-specific-location&#34;&gt;Downloading a file to specific location&lt;/h2&gt;

&lt;p&gt;With wget : -P is the flag for the prefix directory for the file being downloaded. The path will be created if it does not exist. If the file already exists, a duplicate will be created with the &amp;lsquo;.1&amp;rsquo; suffix. Since this is a string being passed to wger, the &amp;ldquo; and other characters have to be explicitly escaped.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;## Download file to specific location
system(&amp;quot;wget \&amp;quot;https://raw.githubusercontent.com/amrrs/sample_revenue_dashboard_shiny/master/recommendation.csv\&amp;quot; -P ./sales-rev-app/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;removing-user-installed-packages-alone&#34;&gt;Removing user installed packages alone&lt;/h2&gt;

&lt;p&gt;Sometimes, it is not possible to remove R completely. This is a nice snippet from an &lt;a href=&#34;https://www.r-bloggers.com/how-to-remove-all-user-installed-packages-in-r/&#34; target=&#34;_blank&#34;&gt;R-bloggers post&lt;/a&gt; to remove the user installed packages alone.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# create a list of all installed packages
 ip &amp;lt;- as.data.frame(installed.packages())
 head(ip)
# if you use MRO, make sure that no packages in this library will be removed
 ip &amp;lt;- subset(ip, !grepl(&amp;quot;MRO&amp;quot;, ip$LibPath))
# we don&#39;t want to remove base or recommended packages either\
 ip &amp;lt;- ip[!(ip[,&amp;quot;Priority&amp;quot;] %in% c(&amp;quot;base&amp;quot;, &amp;quot;recommended&amp;quot;)),]
# determine the library where the packages are installed
 path.lib &amp;lt;- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
 pkgs.to.remove &amp;lt;- ip[,1]
 head(pkgs.to.remove)
# remove the packages
 sapply(pkgs.to.remove, remove.packages, lib = path.lib)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rprofile-and-user-files&#34;&gt;Rprofile and user files&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?Startup&lt;/code&gt; in the R interpreter for information on how the R environment is started up.&lt;/li&gt;
&lt;li&gt;Note that the Rprofile.site and other user files are not setup by default. These have to be created by the user.&lt;/li&gt;
&lt;li&gt;The default CRAN repo can be set in the &lt;code&gt;Rprofile.site&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To find the installation location of R, use the &lt;code&gt;R.home()&lt;/code&gt; function with component specified as shown below. &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/base/html/Rhome.html&#34; target=&#34;_blank&#34;&gt;More information&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;R.home(component=&#39;home&#39;)
R.home(component=&#39;etc&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jupytext-for-conversion-to-rmd&#34;&gt;Jupytext for conversion to Rmd&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Jupytext can save Jupyter notebooks as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Markdown and R Markdown Documents,&lt;/li&gt;
&lt;li&gt;Julia, Python, R, Bash, Scheme, Clojure, Matlab, Octave, C++ and q/kdb+ scripts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mwouts/jupytext&#34; target=&#34;_blank&#34;&gt;Jupytext package&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The is a convenient tool to convert the jupyter notebook into multiple formats, and it also enables collaboration across documents.&lt;/p&gt;

&lt;p&gt;Installing Jupytext using conda:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda install -c conda-forge jupytext
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My most common usage of this tool is to convert jupyter notebooks (.ipynb) to Rmarkdown(Rmd). Deploying jupytext as a Library of Babel(LOB) Ingest makes it easy to be called from anywhere in Emacs.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;code-snippet--jupytext-ipynb-rmd&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jupytext $jup_notebook --to rmarkdown
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;package-installation--especially-for-data-science-and-ml-1&#34;&gt;Package installation (especially for data science and ML)&lt;/h2&gt;

&lt;p&gt;The package &lt;code&gt;easypackages&lt;/code&gt; enables quickly loading or installing multiple libraries. This snippet will enable installing multiple packages. In general, it is better to install packages one by one. They can however be called together.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packages(&amp;quot;easypackages&amp;quot;, )
library(&amp;quot;easypackages&amp;quot;)
packages(&amp;quot;tidyverse&amp;quot;, &amp;quot;tidyquant&amp;quot;, &amp;quot;glmnet&amp;quot;, &amp;quot;rpart&amp;quot;, &amp;quot;rpart.plot&amp;quot;, &amp;quot;ranger&amp;quot;, &amp;quot;randomForest&amp;quot;, &amp;quot;xgboost&amp;quot;, &amp;quot;kernlab&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-the-r-kernel-for-jupyter-notebooks&#34;&gt;Installing the R kernel for Jupyter notebooks&lt;/h2&gt;

&lt;p&gt;Reference: &lt;a href=&#34;https://github.com/IRkernel/IRkernel&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The easiest way for me to export org files to a notebook format will be using the Ipython notebook export available in Scimax. Installing the R kernel for Jupyter notebooks is as simple as installing an R package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packages(&#39;IRkernel&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To register the kernel in the current R installation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;IRKernel::installspec()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Per default IRkernel::installspec() will install a kernel with the name “ir” and a display name of “R”. For having multiple versions of R available as  kernels:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# in R 3.3
IRkernel::installspec(name = &#39;ir33&#39;, displayname = &#39;R 3.3&#39;)
# in R 3.2
IRkernel::installspec(name = &#39;ir32&#39;, displayname = &#39;R 3.2&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is possible to install the IRKernel package via Docker.&lt;/p&gt;

&lt;p&gt;Note: Some additional packages may be required before installing IRKernel. Try the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packages(c(&#39;repr&#39;, &#39;IRdisplay&#39;, &#39;evaluate&#39;, &#39;crayon&#39;, &#39;pbdZMQ&#39;, &#39;devtools&#39;, &#39;uuid&#39;, &#39;digest&#39;))
devtools::install_github(&#39;IRkernel/IRkernel&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;troubleshooting-with-r-version-dot&#34;&gt;Troubleshooting with R version.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;finding the R version being used is as simple as typing in version on the R console&lt;/li&gt;
&lt;li&gt;the shell command which R can also be used to find the path from R is being loaded.&lt;/li&gt;
&lt;li&gt;anaconda installs earlier versions of R. This has to be removed completely, so that a single version of R is accesed by R studio and R console and within Emacs as well.&lt;/li&gt;
&lt;li&gt;in my case, differing versions 3.4 and 3.5 of R were being accessed, which made package installation difficult.&lt;/li&gt;
&lt;li&gt;therefore, I uninstalled the older conda version and then downloaded the R pkg from CRAN as a fresh install on the mac.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;it is possible to set the default R version for the inferior ESS shell in Emacs as specified here &lt;a href=&#34;https://stackoverflow.com/questions/12574738/how-can-i-specify-the-r-version-opened-by-ess-session-in-emacs&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;version
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;which R
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-an-r-session-starts&#34;&gt;How an R session starts&lt;/h2&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html&#34; target=&#34;_blank&#34;&gt;https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;upgrading-packages-in-r--r-session&#34;&gt;Upgrading packages in R (R session)&lt;/h2&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://wiki.archlinux.org/index.php/R&#34; target=&#34;_blank&#34;&gt;Arch wiki&lt;/a&gt;
When you also need to rebuild packages which were built for an older version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;update.packages(ask=FALSE,checkBuilt=TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;when you also need to select a specific mirror (&lt;a href=&#34;https://cran.r-project.org/mirrors.html&#34; target=&#34;_blank&#34;&gt;https://cran.r-project.org/mirrors.html&lt;/a&gt;) to download the packages from (changing the url as needed):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;update.packages(ask=FALSE,checkBuilt=TRUE,repos=&amp;quot;https://cran.cnr.berkeley.edu/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use Rscript, which comes with r to update packages from a Shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Rscript -e &amp;quot;update.packages()&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-r-on-debian&#34;&gt;Installing R on Debian&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo cat &amp;gt;&amp;gt; /etc/apt/sources.list &amp;lt;&amp;lt; EOF
# adding mirror for installation of R
deb http://cran.rstudio.com/bin/linux/debian stretch-cran34/
EOF

sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using Debian&amp;rsquo;s GPG Key&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt install dirmngr
sudo apt-key adv --keyserver keys.gnupg.net --recv-key &#39;E19F5F87128899B192B1A2C2AD5F960A256A04AF&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Installing r-Base&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install r-base
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some pre-requisite libraries are required for installing various R Packages&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install libcurl4-openssl-dev
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
